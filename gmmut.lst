                      (        gmmut.asm):00001          PRAGMA autobranchlength
                      (        gmmut.asm):00002          PRAGMA cescapes
                      (        gmmut.asm):00003          org $6001
6001                  (        gmmut.asm):00004         out_param rmb 1
6002                  (        gmmut.asm):00005         gime_flag rmb 1 # boolean; true if gime, false if jr
6003                  (        gmmut.asm):00006         text_block rmb 1 # mmu block of text screen
6004                  (        gmmut.asm):00007         text_address rmb 2 # address of text screen
6006                  (        gmmut.asm):00008         text_position rmb 2 # cursor offset
6008                  (        gmmut.asm):00009         gime_0 rmb 1 shadow register
6009                  (        gmmut.asm):00010         gime_1 rmb 1 shadow register
                      (        gmmut.asm):00011         
600A                  (        gmmut.asm):00012         start
600A                  (        gmmut.asm):00013         init_tests
                      (        gmmut.asm):00014         # Test for coco3
                      (        gmmut.asm):00015         # CoCo 3 will have $38, Jr. will have $00
                      (        gmmut.asm):00016         # Mooh is currently unknown
600A B6FFA0           (        gmmut.asm):00017          lda $ffa0
600D 843F             (        gmmut.asm):00018          anda #%00111111
600F 8138             (        gmmut.asm):00019          cmpa #$38
6011 10270025         (        gmmut.asm):00020          beq init_gime
6015 8100             (        gmmut.asm):00021          cmpa #$0
6017 10270032         (        gmmut.asm):00022          beq init_jr
                      (        gmmut.asm):00023         # unknown MMU
601B 8E602B           (        gmmut.asm):00024          ldx #unknown_message
601E                  (        gmmut.asm):00025         error_loop
601E A680             (        gmmut.asm):00026          lda ,x+
6020 10270006         (        gmmut.asm):00027          beq error_done
6024 AD9FA002         (        gmmut.asm):00028          jsr [$a002] ; Color BASIC ROM CHROUT
6028 20F4             (        gmmut.asm):00029          bra error_loop
602A                  (        gmmut.asm):00030         error_done
602A 39               (        gmmut.asm):00031          rts ; Go Back to BASIC
602B                  (        gmmut.asm):00032         unknown_message
602B 0D554E4B4E4F574E (        gmmut.asm):00033          fcn "\rUNKNOWN MMU.\r"
     204D4D552E0D00
                      (        gmmut.asm):00034         
603A                  (        gmmut.asm):00035         init_gime
603A 86FF             (        gmmut.asm):00036          lda #$ff
603C B76002           (        gmmut.asm):00037          sta gime_flag
603F 8638             (        gmmut.asm):00038          lda #$38
6041 B76003           (        gmmut.asm):00039          sta text_block
6044 CC0400           (        gmmut.asm):00040          ldd #$0400
6047 FD6004           (        gmmut.asm):00041          std text_address
                      (        gmmut.asm):00042         # gime mmu slots are initialized by Color BASIC
604A 160038           (        gmmut.asm):00043          bra init_common
                      (        gmmut.asm):00044         
604D                  (        gmmut.asm):00045         init_jr
                      (        gmmut.asm):00046         # flag Jr
604D 8600             (        gmmut.asm):00047          lda #$0
604F B76002           (        gmmut.asm):00048          sta gime_flag
6052 8638             (        gmmut.asm):00049          lda #$38 # lowest banks start at $38
                      (        gmmut.asm):00050         # load default mmu
6054 8EFFA0           (        gmmut.asm):00051          ldx #$ffa0
6057 108EFFA8         (        gmmut.asm):00052          ldy #$ffa8
605B C608             (        gmmut.asm):00053          ldb #8
605D                  (        gmmut.asm):00054         init_jr_loop
605D A780             (        gmmut.asm):00055          sta ,x+
605F A7A0             (        gmmut.asm):00056          sta ,y+
6061 4C               (        gmmut.asm):00057          inca
6062 5A               (        gmmut.asm):00058          decb
6063 26F8             (        gmmut.asm):00059          bne init_jr_loop
                      (        gmmut.asm):00060         # initialize internal variables
6065 8600             (        gmmut.asm):00061          lda #$0
6067 B76003           (        gmmut.asm):00062          sta text_block
606A CC0400           (        gmmut.asm):00063          ldd #$0400
606D FD6004           (        gmmut.asm):00064          std text_address
                      (        gmmut.asm):00065         # change to all ram mode
6070 8E8000           (        gmmut.asm):00066          ldx #$8000
6073 170BC2           (        gmmut.asm):00067          bsr turn_off_ints   # need to turn off interrupts before swapping in RAM
6076                  (        gmmut.asm):00068         ram_loop
6076 B7FFDE           (        gmmut.asm):00069          sta $ffde
6079 EC84             (        gmmut.asm):00070          ldd ,x
607B B7FFDF           (        gmmut.asm):00071          sta $ffdf
607E ED81             (        gmmut.asm):00072          std ,x++
6080 8CFF00           (        gmmut.asm):00073          cmpx #$ff00
6083 26F1             (        gmmut.asm):00074          bne ram_loop
                      (        gmmut.asm):00075         
6085                  (        gmmut.asm):00076         init_common
6085 0F71             (        gmmut.asm):00077          clr $71 # force cold start on reset
6087 170BAE           (        gmmut.asm):00078          bsr turn_off_ints
                      (        gmmut.asm):00079         # turn on mmu, task 0, no const ram (for both gime and jr)
608A 86C4             (        gmmut.asm):00080          lda #$c4
608C B76008           (        gmmut.asm):00081          sta gime_0
608F B7FF90           (        gmmut.asm):00082          sta $ff90
6092 8600             (        gmmut.asm):00083          lda #$0
6094 B76009           (        gmmut.asm):00084          sta gime_1
6097 B7FF91           (        gmmut.asm):00085          sta $ff91
                      (        gmmut.asm):00086         # init casflg
609A 86FF             (        gmmut.asm):00087          lda #$ff
609C B76D2E           (        gmmut.asm):00088          sta casflg
                      (        gmmut.asm):00089          
609F                  (        gmmut.asm):00090         main_menu
609F 170BC6           (        gmmut.asm):00091          bsr clear_screen
60A2 170BD7           (        gmmut.asm):00092          bsr strout
60A5 47494D45204D4D55 (        gmmut.asm):00093          fcc "GIME MMU TESTER\r"
     205445535445520D
60B5 324D422041574152 (        gmmut.asm):00094          fcc "2MB AWARE\r"
     450D
60BF 312920434F554E54 (        gmmut.asm):00095          fcc "1) COUNT AVAILABLE MMU BANKS\r"
     20415641494C4142
     4C45204D4D552042
     414E4B530D
60DC 2D29204D4D552053 (        gmmut.asm):00096          fcc "-) MMU SLOT REGISTER WIDTH\r"
     4C4F542052454749
     5354455220574944
     54480D
60F7 3329205445535420 (        gmmut.asm):00097          fcc "3) TEST TASK SWITCHING\r"
     5441534B20535749
     544348494E470D
610E 3429205445535420 (        gmmut.asm):00098          fcc "4) TEST CONSTANT RAM\r"
     434F4E5354414E54
     2052414D0D
6123 3529205445535420 (        gmmut.asm):00099          fcc "5) TEST RAM\r"
     52414D0D
612F 36292053484F5720 (        gmmut.asm):00100          fcc "6) SHOW VDG WRAP AROUND\r"
     5644472057524150
     2041524F554E440D
6147 372920534C4F5720 (        gmmut.asm):00101          fcn "7) SLOW TIMER TEST\r"
     54494D4552205445
     53540D00
615B                  (        gmmut.asm):00102         init_loop
615B 5A               (        gmmut.asm):00103          decb
615C 1026000E         (        gmmut.asm):00104          bne mm_skip
6160 3404             (        gmmut.asm):00105          pshs b
6162 BE6004           (        gmmut.asm):00106          ldx text_address
6165 FC6006           (        gmmut.asm):00107          ldd text_position
6168 308B             (        gmmut.asm):00108          leax d,x
616A 6384             (        gmmut.asm):00109          com ,x
616C 3504             (        gmmut.asm):00110          puls b
616E                  (        gmmut.asm):00111         mm_skip
616E 170BBE           (        gmmut.asm):00112          bsr keyin
6171 8100             (        gmmut.asm):00113          cmpa #0
6173 27E6             (        gmmut.asm):00114          beq init_loop
6175 3402             (        gmmut.asm):00115          pshs a
6177 170B3C           (        gmmut.asm):00116          bsr chrout
617A 860D             (        gmmut.asm):00117          lda #$0d
617C 170B37           (        gmmut.asm):00118          bsr chrout
617F E6E4             (        gmmut.asm):00119          ldb ,s
6181 C031             (        gmmut.asm):00120          subb #'1
6183 C106             (        gmmut.asm):00121          cmpb #6
6185 10220016         (        gmmut.asm):00122          bhi mm_done
6189 58               (        gmmut.asm):00123          lslb
618A 8E61C5           (        gmmut.asm):00124          ldx #jump_table
618D AD95             (        gmmut.asm):00125          jsr [b,x]
618F                  (        gmmut.asm):00126         done_after
618F E6E4             (        gmmut.asm):00127          ldb ,s
6191 C031             (        gmmut.asm):00128          subb #'1
6193 C106             (        gmmut.asm):00129          cmpb #6
6195 10220006         (        gmmut.asm):00130          bhi mm_done
6199 58               (        gmmut.asm):00131          lslb
619A 8E61D3           (        gmmut.asm):00132          ldx #post_jump_table
619D AD95             (        gmmut.asm):00133          jsr [b,x]
619F                  (        gmmut.asm):00134         mm_done
619F 170ADA           (        gmmut.asm):00135          bsr strout
61A2 505245535320414E (        gmmut.asm):00136          fcn "PRESS ANY KEY TO CONTINUE\r"
     59204B455920544F
     20434F4E54494E55
     450D00
61BD 170B5E           (        gmmut.asm):00137          bsr wait
61C0 3504             (        gmmut.asm):00138          puls b
61C2 7E609F           (        gmmut.asm):00139          jmp main_menu
                      (        gmmut.asm):00140         
61C5                  (        gmmut.asm):00141         jump_table
61C5 61E2             (        gmmut.asm):00142          fdb count_mmu_blocks
61C7 61E1             (        gmmut.asm):00143          fdb return
61C9 6745             (        gmmut.asm):00144          fdb test_task_switching
61CB 68AE             (        gmmut.asm):00145          fdb test_constant_ram
61CD 6AC7             (        gmmut.asm):00146          fdb test_ram
61CF 63E7             (        gmmut.asm):00147          fdb vdg_wrap
61D1 65F1             (        gmmut.asm):00148          fdb timer_test
                      (        gmmut.asm):00149         
61D3                  (        gmmut.asm):00150         post_jump_table
61D3 6288             (        gmmut.asm):00151          fdb report_count_mmu
61D5 61E1             (        gmmut.asm):00152          fdb return
61D7 61E1             (        gmmut.asm):00153          fdb return
61D9 61E1             (        gmmut.asm):00154          fdb return
61DB 61E1             (        gmmut.asm):00155          fdb return
61DD 61E1             (        gmmut.asm):00156          fdb return
61DF 61E1             (        gmmut.asm):00157          fdb return
                      (        gmmut.asm):00158         
61E1                  (        gmmut.asm):00159         return
61E1 39               (        gmmut.asm):00160          rts
                      (        gmmut.asm):00161                 
61E2                  (        gmmut.asm):00162         count_mmu_blocks
61E2 170A6B           (        gmmut.asm):00163          bsr save_task_0
                      (        gmmut.asm):00164         # Put mmu block number in first byte of each block
                      (        gmmut.asm):00165         # and save value
61E5 5F               (        gmmut.asm):00166          clrb
61E6 8E6F0B           (        gmmut.asm):00167          ldx #buffer2
61E9                  (        gmmut.asm):00168         count_bocks_loop
61E9 F7FFA1           (        gmmut.asm):00169          stb $ffa1
61EC B62000           (        gmmut.asm):00170          lda $2000
61EF A780             (        gmmut.asm):00171          sta ,x+
61F1 F72000           (        gmmut.asm):00172          stb $2000
61F4 5C               (        gmmut.asm):00173          incb
61F5 26F2             (        gmmut.asm):00174          bne count_bocks_loop
                      (        gmmut.asm):00175         # fill buffer with what is
                      (        gmmut.asm):00176         # left in the first byte of each block
61F7 5F               (        gmmut.asm):00177          clrb
61F8 8E6E0B           (        gmmut.asm):00178          ldx #buffer
61FB                  (        gmmut.asm):00179         count_loop
                      (        gmmut.asm):00180         
                      (        gmmut.asm):00181         ### test code
61FB 3404             (        gmmut.asm):00182          pshs b
61FD F66E43           (        gmmut.asm):00183          ldb buffer+$38
6200 C1B8             (        gmmut.asm):00184          cmpb #$b8
6202 10270026         (        gmmut.asm):00185          beq found_error_in_38
6206 3504             (        gmmut.asm):00186          puls b
                      (        gmmut.asm):00187         ### test code
                      (        gmmut.asm):00188          
6208 F7FFA1           (        gmmut.asm):00189          stb $ffa1
620B B62000           (        gmmut.asm):00190          lda $2000
620E A780             (        gmmut.asm):00191          sta ,x+
6210 5C               (        gmmut.asm):00192          incb
6211 26E8             (        gmmut.asm):00193          bne count_loop
                      (        gmmut.asm):00194         # report first byte of buffer
6213 B66E0B           (        gmmut.asm):00195          lda buffer
6216 B76001           (        gmmut.asm):00196          sta out_param
                      (        gmmut.asm):00197         # fix up overwritten bytes
6219 5F               (        gmmut.asm):00198          clrb
621A 8E6F0B           (        gmmut.asm):00199          ldx #buffer2
621D                  (        gmmut.asm):00200         restore_loop
621D F7FFA1           (        gmmut.asm):00201          stb $ffa1
6220 A680             (        gmmut.asm):00202          lda ,x+
6222 B72000           (        gmmut.asm):00203          sta $2000
6225 5C               (        gmmut.asm):00204          incb
6226 26F5             (        gmmut.asm):00205          bne restore_loop
6228 170A1B           (        gmmut.asm):00206          bsr restore_task_0
622B 39               (        gmmut.asm):00207          rts 
                      (        gmmut.asm):00208         
                      (        gmmut.asm):00209         ### test code
622C                  (        gmmut.asm):00210         found_error_in_38
622C 170A4D           (        gmmut.asm):00211          bsr strout
622F 464F554E44202442 (        gmmut.asm):00212          fcc "FOUND $B8 IN $38 DURING\r"
     3820494E20243338
     20445552494E470D
6247 434F50592046524F (        gmmut.asm):00213          fcn "COPY FROM BANK: $"
     4D2042414E4B3A20
     2400
6259 3502             (        gmmut.asm):00214          puls a
625B BD6C8B           (        gmmut.asm):00215          jsr charout_hex
625E 170A1B           (        gmmut.asm):00216          bsr strout
6261 0D544F205441424C (        gmmut.asm):00217          fcn "\rTO TABLE\rIGNOGE FOLLOFING REPORTING\r"
     450D49474E4F4745
     20464F4C4C4F4649
     4E47205245504F52
     54494E470D00
6287 39               (        gmmut.asm):00218          rts
                      (        gmmut.asm):00219         ### test code
                      (        gmmut.asm):00220         
6288                  (        gmmut.asm):00221         report_count_mmu
6288 B66001           (        gmmut.asm):00222          lda out_param
628B 81F0             (        gmmut.asm):00223          cmpa #$f0
628D 10270032         (        gmmut.asm):00224          beq rc_128k
6291 81E0             (        gmmut.asm):00225          cmpa #$e0
6293 10270045         (        gmmut.asm):00226          beq rc_256k
6297 81C0             (        gmmut.asm):00227          cmpa #$c0
6299 10270058         (        gmmut.asm):00228          beq rc_512k
629D 8180             (        gmmut.asm):00229          cmpa #$80
629F 1027006B         (        gmmut.asm):00230          beq rc_1024k
62A3 8100             (        gmmut.asm):00231          cmpa #$00
62A5 1027007F         (        gmmut.asm):00232          beq rc_2048k
62A9 1709D0           (        gmmut.asm):00233          bsr strout
62AC 554E4B4E4F574E20 (        gmmut.asm):00234          fcn "UNKNOWN RAM AMOUNT\r"
     52414D20414D4F55
     4E540D00
62C0 16007C           (        gmmut.asm):00235          bra rc_printTable
62C3                  (        gmmut.asm):00236         rc_128k
62C3 1709B6           (        gmmut.asm):00237          bsr strout
62C6 3132384B202D2024 (        gmmut.asm):00238          fcn "128K - $30 TO $3F\r"
     333020544F202433
     460D00
62D9 160063           (        gmmut.asm):00239          bra rc_printTable
62DC                  (        gmmut.asm):00240         rc_256k
62DC 17099D           (        gmmut.asm):00241          bsr strout
62DF 3235364B202D2024 (        gmmut.asm):00242          fcn "256K - $20 TO $3F\r"
     323020544F202433
     460D00
62F2 16004A           (        gmmut.asm):00243          bra rc_printTable
62F5                  (        gmmut.asm):00244         rc_512k
62F5 170984           (        gmmut.asm):00245          bsr strout
62F8 3531324B202D2024 (        gmmut.asm):00246          fcn "512K - $00 TO $3F\r"
     303020544F202433
     460D00
630B 160031           (        gmmut.asm):00247          bra rc_printTable
630E                  (        gmmut.asm):00248         rc_1024k
630E 17096B           (        gmmut.asm):00249          bsr strout
6311 313032344B202D20 (        gmmut.asm):00250          fcn "1024K - $00 TO $7F\r"
     24303020544F2024
     37460D00
6325 160017           (        gmmut.asm):00251          bra rc_printTable
6328                  (        gmmut.asm):00252         rc_2048k
6328 170951           (        gmmut.asm):00253          bsr strout
632B 323034384B202D20 (        gmmut.asm):00254          fcn "2048K - $00 TO $FF\r"
     24303020544F2024
     46460D00
633F                  (        gmmut.asm):00255         rc_printTable
633F 17093A           (        gmmut.asm):00256          bsr strout
6342 4649525354204259 (        gmmut.asm):00257          fcn "FIRST BYTE OF TABLE: "
     5445204F46205441
     424C453A2000
6358 B66E0B           (        gmmut.asm):00258          lda buffer
635B BD6C8B           (        gmmut.asm):00259          jsr charout_hex
635E 17091B           (        gmmut.asm):00260          bsr strout
6361 0D00             (        gmmut.asm):00261          fcn "\r"
                      (        gmmut.asm):00262         # look for anomaly in table
6363 B66001           (        gmmut.asm):00263          lda out_param
6366 8E6E0B           (        gmmut.asm):00264          ldx #buffer
6369                  (        gmmut.asm):00265         rc_loop
6369 A180             (        gmmut.asm):00266          cmpa ,x+
636B 10270066         (        gmmut.asm):00267          beq rc_pass
636F 301F             (        gmmut.asm):00268          leax -1,x
6371 3402             (        gmmut.asm):00269          pshs a
6373 E684             (        gmmut.asm):00270          ldb ,x
6375 3404             (        gmmut.asm):00271          pshs b
6377 CC6E0B           (        gmmut.asm):00272          ldd #buffer
637A 3406             (        gmmut.asm):00273          pshs d
637C 3410             (        gmmut.asm):00274          pshs x
637E 1708FB           (        gmmut.asm):00275          bsr strout
6381 414E4F4D414C5920 (        gmmut.asm):00276          fcn "ANOMALY IN TABLE POSITION: "
     494E205441424C45
     20504F534954494F
     4E3A2000
639D 3506             (        gmmut.asm):00277          puls d
639F A3E1             (        gmmut.asm):00278          subd ,s++
63A1 1F98             (        gmmut.asm):00279          tfr b,a
63A3 BD6C8B           (        gmmut.asm):00280          jsr charout_hex
63A6 1708D3           (        gmmut.asm):00281          bsr strout
63A9 0D00             (        gmmut.asm):00282          fcn "\r"
63AB 1708CE           (        gmmut.asm):00283          bsr strout
63AE 4558504543544544 (        gmmut.asm):00284          fcn "EXPECTED: "
     3A2000
63B9 3502             (        gmmut.asm):00285          puls a
63BB BD6C8B           (        gmmut.asm):00286          jsr charout_hex
63BE 1708BB           (        gmmut.asm):00287          bsr strout
63C1 0D464F554E443A20 (        gmmut.asm):00288          fcn "\rFOUND: "
     00
63CA 3502             (        gmmut.asm):00289          puls a
63CC BD6C8B           (        gmmut.asm):00290          jsr charout_hex
63CF 1708AA           (        gmmut.asm):00291          bsr strout
63D2 0D00             (        gmmut.asm):00292          fcn "\r"
63D4 39               (        gmmut.asm):00293          rts
                      (        gmmut.asm):00294         
63D5                  (        gmmut.asm):00295         rc_pass
63D5 8C6F0B           (        gmmut.asm):00296          cmpx #buffer+256
63D8 1027000A         (        gmmut.asm):00297          beq rc_done
63DC 4C               (        gmmut.asm):00298          inca
63DD 8100             (        gmmut.asm):00299          cmpa #0
63DF 2688             (        gmmut.asm):00300          bne rc_loop
63E1 B66001           (        gmmut.asm):00301          lda out_param
63E4 2083             (        gmmut.asm):00302          bra rc_loop
63E6                  (        gmmut.asm):00303         rc_done
63E6 39               (        gmmut.asm):00304          rts
                      (        gmmut.asm):00305          
63E7                  (        gmmut.asm):00306         vdg_wrap
63E7 170866           (        gmmut.asm):00307          bsr save_task_0
                      (        gmmut.asm):00308         # explain what is going to happen
63EA 17088F           (        gmmut.asm):00309          bsr strout
63ED 0D544845204E4558 (        gmmut.asm):00310          fcc "\rTHE NEXT SCREEN WILL BE A PMODE 4 "
     542053435245454E
     2057494C4C204245
     204120504D4F4445
     203420
6410 4752415048494353 (        gmmut.asm):00311          fcc "GRAPHICS SCREEN WITH THE START ADDRESS "
     2053435245454E20
     5749544820544845
     2053544152542041
     44445245535320
6437 53455420544F2024 (        gmmut.asm):00312          fcc "SET TO $FE00.\r"
     464530302E0D
6445 5448452057524150 (        gmmut.asm):00313          fcc "THE WRAP AROUND MMU PAGE WILL BE IDENTIFIED."
     2041524F554E4420
     4D4D552050414745
     2057494C4C204245
     204944454E544946
     4945442E
6471 0D50524553532041 (        gmmut.asm):00314          fcn "\rPRESS ANY KEY TO CONTINUE\r\r"
     4E59204B45592054
     4F20434F4E54494E
     55450D0D00
648E 17088D           (        gmmut.asm):00315          bsr wait
                      (        gmmut.asm):00316         
                      (        gmmut.asm):00317         # Set Sam to PMODE 4
6491 86F0             (        gmmut.asm):00318          lda #%11110000
6493 B7FFC5           (        gmmut.asm):00319          sta $ffc5
6496 B7FFC3           (        gmmut.asm):00320          sta $ffc3
6499 B7FFC0           (        gmmut.asm):00321          sta $ffc0
649C B7FF22           (        gmmut.asm):00322          sta $ff22
                      (        gmmut.asm):00323         # set SAM to highest base address ($FE00)
                      (        gmmut.asm):00324         # for video
649F 867F             (        gmmut.asm):00325          lda #%01111111
64A1 17077D           (        gmmut.asm):00326          bsr store_a_into_sam_offset
                      (        gmmut.asm):00327         
64A4 863F             (        gmmut.asm):00328          lda #$3f
64A6 B7FFA1           (        gmmut.asm):00329          sta $ffa1
64A9 170118           (        gmmut.asm):00330          bsr write_string
64AC 2000             (        gmmut.asm):00331          fdb $2000
64AE 506167653A203366 (        gmmut.asm):00332          fcn "Page: 3f, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
64C6 1700FB           (        gmmut.asm):00333          bsr write_string
64C9 3E00             (        gmmut.asm):00334          fdb $3e00
64CB 506167653A203366 (        gmmut.asm):00335          fcn "Page: 3f, Offset: 1e00 "
     2C204F6666736574
     3A20316530302000
                      (        gmmut.asm):00336          
64E3 8607             (        gmmut.asm):00337          lda #$7
64E5 B7FFA1           (        gmmut.asm):00338          sta $ffa1
64E8 1700D9           (        gmmut.asm):00339          bsr write_string
64EB 2000             (        gmmut.asm):00340          fdb $2000
64ED 506167653A203037 (        gmmut.asm):00341          fcn "Page: 07, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
6505 1700BC           (        gmmut.asm):00342          bsr write_string
6508 3E00             (        gmmut.asm):00343          fdb $3e00
650A 506167653A203037 (        gmmut.asm):00344          fcn "Page: 07, Offset: 1e00 "
     2C204F6666736574
     3A20316530302000
                      (        gmmut.asm):00345         
6522 8638             (        gmmut.asm):00346          lda #$38
6524 B7FFA1           (        gmmut.asm):00347          sta $ffa1
6527 17009A           (        gmmut.asm):00348          bsr write_string
652A 2000             (        gmmut.asm):00349          fdb $2000
652C 506167653A203338 (        gmmut.asm):00350          fcn "Page: 38, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00351         
6544 8640             (        gmmut.asm):00352          lda #$40
6546 B7FFA1           (        gmmut.asm):00353          sta $ffa1
6549 170078           (        gmmut.asm):00354          bsr write_string
654C 2000             (        gmmut.asm):00355          fdb $2000
654E 506167653A203430 (        gmmut.asm):00356          fcn "Page: 40, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00357         
6566 8600             (        gmmut.asm):00358          lda #$00
6568 B7FFA1           (        gmmut.asm):00359          sta $ffa1
656B 170056           (        gmmut.asm):00360          bsr write_string
656E 2000             (        gmmut.asm):00361          fdb $2000
6570 506167653A203030 (        gmmut.asm):00362          fcn "Page: 00, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00363          
6588 8608             (        gmmut.asm):00364          lda #$8
658A B7FFA1           (        gmmut.asm):00365          sta $ffa1
658D 170034           (        gmmut.asm):00366          bsr write_string
6590 2000             (        gmmut.asm):00367          fdb $2000
6592 506167653A203038 (        gmmut.asm):00368          fcn "Page: 08, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00369         
65AA 170771           (        gmmut.asm):00370          bsr wait
                      (        gmmut.asm):00371         
65AD 170696           (        gmmut.asm):00372          bsr restore_task_0
                      (        gmmut.asm):00373         # Set Sam to text mode
65B0 8600             (        gmmut.asm):00374          lda #$00
65B2 B7FFC0           (        gmmut.asm):00375          sta $ffc0
65B5 B7FFC2           (        gmmut.asm):00376          sta $ffc2
65B8 B7FFC4           (        gmmut.asm):00377          sta $ffc4
65BB B7FF22           (        gmmut.asm):00378          sta $ff22
                      (        gmmut.asm):00379         # set SAM to text screen base address ($0400)
                      (        gmmut.asm):00380         # for video
65BE 8602             (        gmmut.asm):00381          lda #%00000010
65C0 17065E           (        gmmut.asm):00382          bsr store_a_into_sam_offset
65C3 39               (        gmmut.asm):00383          rts
                      (        gmmut.asm):00384         
65C4                  (        gmmut.asm):00385         write_string
65C4 3540             (        gmmut.asm):00386          puls u
65C6 10AEC1           (        gmmut.asm):00387          ldy ,u++
65C9                  (        gmmut.asm):00388         write_string_loop
65C9 A6C0             (        gmmut.asm):00389          lda ,u+
65CB 1027000B         (        gmmut.asm):00390          beq write_string_done
65CF 8020             (        gmmut.asm):00391          suba #32
65D1 170008           (        gmmut.asm):00392          bsr write_character
65D4 31A9FF01         (        gmmut.asm):00393          leay (-8*32)+1,y
65D8 20EF             (        gmmut.asm):00394          bra write_string_loop
65DA                  (        gmmut.asm):00395         write_string_done
65DA 1F35             (        gmmut.asm):00396          tfr u,pc
                      (        gmmut.asm):00397         
65DC                  (        gmmut.asm):00398         write_character
65DC 8E700B           (        gmmut.asm):00399          ldx #bitmap_font
65DF C608             (        gmmut.asm):00400          ldb #8
65E1 3D               (        gmmut.asm):00401          mul
65E2 308B             (        gmmut.asm):00402          leax d,x
65E4 C608             (        gmmut.asm):00403          ldb #8
65E6                  (        gmmut.asm):00404         write_character_loop
65E6 A680             (        gmmut.asm):00405          lda ,x+
65E8 A7A4             (        gmmut.asm):00406          sta ,y
65EA 31A820           (        gmmut.asm):00407          leay 32,y
65ED 5A               (        gmmut.asm):00408          decb
65EE 26F6             (        gmmut.asm):00409          bne write_character_loop
65F0 39               (        gmmut.asm):00410          rts
                      (        gmmut.asm):00411         
65F1                  (        gmmut.asm):00412         timer_test
                      (        gmmut.asm):00413         # save palette
65F1 B6FFBD           (        gmmut.asm):00414          lda $ffbd
65F4 843F             (        gmmut.asm):00415          anda #%00111111
65F6 B766F2           (        gmmut.asm):00416          sta save_palette
                      (        gmmut.asm):00417          
                      (        gmmut.asm):00418         # turn off all pia interrupts
65F9 B6FF01           (        gmmut.asm):00419          lda $ff01
65FC B766F0           (        gmmut.asm):00420          sta save_pia0a
65FF 843E             (        gmmut.asm):00421          anda #%00111110
6601 B7FF01           (        gmmut.asm):00422          sta $ff01
6604 B6FF00           (        gmmut.asm):00423          lda $ff00
                      (        gmmut.asm):00424          
6607 B6FF03           (        gmmut.asm):00425          lda $ff03
660A B766F1           (        gmmut.asm):00426          sta save_pia0b
660D 843E             (        gmmut.asm):00427          anda #%00111110
660F B7FF03           (        gmmut.asm):00428          sta $ff03
6612 B6FF02           (        gmmut.asm):00429          lda $ff02
                      (        gmmut.asm):00430          
                      (        gmmut.asm):00431         # install both isr
6615 867E             (        gmmut.asm):00432          lda #$7e # JMP instruction extended
6617 B7FEF4           (        gmmut.asm):00433          sta $fef4
661A B7FEF7           (        gmmut.asm):00434          sta $fef7
661D CC671B           (        gmmut.asm):00435          ldd #tt_isr_firq
6620 FDFEF5           (        gmmut.asm):00436          std $fef5
6623 CC6730           (        gmmut.asm):00437          ldd #tt_isr_irq
6626 FDFEF8           (        gmmut.asm):00438          std $fef8
                      (        gmmut.asm):00439         
                      (        gmmut.asm):00440         # setup timer
6629 8600             (        gmmut.asm):00441          lda #0 # lsb of timer
662B B7FF95           (        gmmut.asm):00442          sta $ff95
662E 8600             (        gmmut.asm):00443          lda #0 # msb of timer
6630 B7FF94           (        gmmut.asm):00444          sta $ff94
6633 8620             (        gmmut.asm):00445          lda #%00100000 # firq for timer
6635 B7FF93           (        gmmut.asm):00446          sta $ff93
6638 8608             (        gmmut.asm):00447          lda #%00001000 # irq for vertical border
663A B7FF92           (        gmmut.asm):00448          sta $ff92
663D B6FF92           (        gmmut.asm):00449          lda $ff92
6640 B6FF93           (        gmmut.asm):00450          lda $ff93
                      (        gmmut.asm):00451         
                      (        gmmut.asm):00452         # set timer source
6643 B66009           (        gmmut.asm):00453          lda gime_1
6646 8A00             (        gmmut.asm):00454          ora #%00000000 # slow - 15khz
6648 B76009           (        gmmut.asm):00455          sta gime_1
664B B7FF91           (        gmmut.asm):00456          sta $ff91
                      (        gmmut.asm):00457          
                      (        gmmut.asm):00458         # turn on gime interrupts
664E B66008           (        gmmut.asm):00459          lda gime_0
6651 8A30             (        gmmut.asm):00460          ora #%00110000
6653 B76008           (        gmmut.asm):00461          sta gime_0
6656 B7FF90           (        gmmut.asm):00462          sta $ff90
                      (        gmmut.asm):00463         
6659 17060C           (        gmmut.asm):00464          bsr clear_screen
665C CCE6E6           (        gmmut.asm):00465          ldd #$e6e6
665F 8E041F           (        gmmut.asm):00466          ldx #$400+31
6662                  (        gmmut.asm):00467         checker_loop
6662 ED84             (        gmmut.asm):00468          std ,x
6664 308820           (        gmmut.asm):00469          leax 32,x
6667 8C061F           (        gmmut.asm):00470          cmpx #$400+31+(32*16)
666A 26F6             (        gmmut.asm):00471          bne checker_loop
                      (        gmmut.asm):00472          
666C 8E66E0           (        gmmut.asm):00473          ldx #hex
                      (        gmmut.asm):00474         
666F 1705C9           (        gmmut.asm):00475          bsr turn_on_ints
                      (        gmmut.asm):00476         
6672                  (        gmmut.asm):00477         tt_loop
6672 108E0400         (        gmmut.asm):00478          ldy #$400
6676 FC672E           (        gmmut.asm):00479          ldd timer_value
6679 840F             (        gmmut.asm):00480          anda #$0f
667B A686             (        gmmut.asm):00481          lda a,x
667D A7A0             (        gmmut.asm):00482          sta ,y+
667F 1F98             (        gmmut.asm):00483          tfr b,a
6681 44               (        gmmut.asm):00484          lsra
6682 44               (        gmmut.asm):00485          lsra
6683 44               (        gmmut.asm):00486          lsra
6684 44               (        gmmut.asm):00487          lsra
6685 A686             (        gmmut.asm):00488          lda a,x
6687 A7A0             (        gmmut.asm):00489          sta ,y+
6689 1F98             (        gmmut.asm):00490          tfr b,a
668B 840F             (        gmmut.asm):00491          anda #$0f
668D A686             (        gmmut.asm):00492          lda a,x
668F A7A1             (        gmmut.asm):00493          sta ,y++
                      (        gmmut.asm):00494          
6691 17069B           (        gmmut.asm):00495          bsr keyin
6694 8153             (        gmmut.asm):00496          cmpa #'S
6696 1027001A         (        gmmut.asm):00497          beq tt_inc10
669A 8141             (        gmmut.asm):00498          cmpa #'A
669C 1027001F         (        gmmut.asm):00499          beq tt_dec10
66A0 8158             (        gmmut.asm):00500          cmpa #'X
66A2 10270024         (        gmmut.asm):00501          beq tt_inc1
66A6 815A             (        gmmut.asm):00502          cmpa #'Z
66A8 10270029         (        gmmut.asm):00503          beq tt_dec1
66AC 8151             (        gmmut.asm):00504          cmpa #'Q
66AE 10270041         (        gmmut.asm):00505          beq tt_cleanup
66B2 20BE             (        gmmut.asm):00506          bra tt_loop
66B4                  (        gmmut.asm):00507         tt_inc10
66B4 FC672E           (        gmmut.asm):00508          ldd timer_value
66B7 C3000A           (        gmmut.asm):00509          addd #10
66BA FD672E           (        gmmut.asm):00510          std timer_value
66BD 20B3             (        gmmut.asm):00511          bra tt_loop
66BF                  (        gmmut.asm):00512         tt_dec10
66BF FC672E           (        gmmut.asm):00513          ldd timer_value
66C2 83000A           (        gmmut.asm):00514          subd #10
66C5 FD672E           (        gmmut.asm):00515          std timer_value
66C8 20A8             (        gmmut.asm):00516          bra tt_loop
66CA                  (        gmmut.asm):00517         tt_inc1
66CA FC672E           (        gmmut.asm):00518          ldd timer_value
66CD C30001           (        gmmut.asm):00519          addd #1
66D0 FD672E           (        gmmut.asm):00520          std timer_value
66D3 209D             (        gmmut.asm):00521          bra tt_loop
66D5                  (        gmmut.asm):00522         tt_dec1
66D5 FC672E           (        gmmut.asm):00523          ldd timer_value
66D8 830001           (        gmmut.asm):00524          subd #1
66DB FD672E           (        gmmut.asm):00525          std timer_value
66DE 2092             (        gmmut.asm):00526          bra tt_loop
66E0 3031323334353637 (        gmmut.asm):00527         hex fcb 48,49,50,51,52,53,54,55,56,57,1,2,3,4,5,6
     3839010203040506
66F0                  (        gmmut.asm):00528         save_pia0a rmb 1
66F1                  (        gmmut.asm):00529         save_pia0b rmb 1
66F2                  (        gmmut.asm):00530         save_palette rmb 1
66F3                  (        gmmut.asm):00531         tt_cleanup
66F3 170542           (        gmmut.asm):00532          bsr turn_off_ints
                      (        gmmut.asm):00533         # turn off gime interrupts
66F6 B66008           (        gmmut.asm):00534          lda gime_0
66F9 84CF             (        gmmut.asm):00535          anda #%11001111
66FB B76008           (        gmmut.asm):00536          sta gime_0
66FE B7FF90           (        gmmut.asm):00537          sta $ff90
                      (        gmmut.asm):00538         # turn off interrupt flags
6701 4F               (        gmmut.asm):00539          clra
6702 B7FF93           (        gmmut.asm):00540          sta $ff93
6705 B7FF92           (        gmmut.asm):00541          sta $ff92
                      (        gmmut.asm):00542         # restore PIA
6708 B666F0           (        gmmut.asm):00543          lda save_pia0a
670B B7FF01           (        gmmut.asm):00544          sta $ff01
670E B666F1           (        gmmut.asm):00545          lda save_pia0b
6711 B7FF03           (        gmmut.asm):00546          sta $ff03
                      (        gmmut.asm):00547         # restore palette
6714 B666F2           (        gmmut.asm):00548          lda save_palette
6717 B7FFBD           (        gmmut.asm):00549          sta $ffbd
671A 39               (        gmmut.asm):00550          rts
                      (        gmmut.asm):00551          
671B                  (        gmmut.asm):00552         tt_isr_firq
671B 3402             (        gmmut.asm):00553          pshs a
671D 8600             (        gmmut.asm):00554          lda #0 
671F B7FFBD           (        gmmut.asm):00555          sta $ffbd
6722 B7FF95           (        gmmut.asm):00556          sta $ff95 # zero timer count down
6725 B7FF94           (        gmmut.asm):00557          sta $ff94
6728 B6FF93           (        gmmut.asm):00558          lda $ff93
672B 3502             (        gmmut.asm):00559          puls a
                      (        gmmut.asm):00560         #  inc $401
672D 3B               (        gmmut.asm):00561          rti
                      (        gmmut.asm):00562         
672E 0080             (        gmmut.asm):00563         timer_value fdb $0080
6730                  (        gmmut.asm):00564         tt_isr_irq
6730 86FF             (        gmmut.asm):00565          lda #$ff
6732 B7FFBD           (        gmmut.asm):00566          sta $ffbd
6735 FC672E           (        gmmut.asm):00567          ldd timer_value # reset timer count down
6738 F7FF95           (        gmmut.asm):00568          stb $ff95
673B B7FF94           (        gmmut.asm):00569          sta $ff94
                      (        gmmut.asm):00570         #  inc $402
673E B6FF92           (        gmmut.asm):00571          lda $ff92 # clear the irq interrupt
6741 B6FF93           (        gmmut.asm):00572          lda $ff93 # Also clear the firq interrupt
6744 3B               (        gmmut.asm):00573          rti
                      (        gmmut.asm):00574         
6745                  (        gmmut.asm):00575         test_task_switching
                      (        gmmut.asm):00576         # Copy current slot 2 and 3 to task 1
6745 170534           (        gmmut.asm):00577          bsr strout
6748 434F505920435552 (        gmmut.asm):00578          fcn "COPY CURRENT SLOT 2 AND 3 TO TASK 1\r"
     52454E5420534C4F
     54203220414E4420
     3320544F20544153
     4B20310D00
676D B6FFA2           (        gmmut.asm):00579          lda $ffa2
6770 B7FFAA           (        gmmut.asm):00580          sta $ffaa
6773 B6FFA3           (        gmmut.asm):00581          lda $ffa3
6776 B7FFAB           (        gmmut.asm):00582          sta $ffab
                      (        gmmut.asm):00583         
                      (        gmmut.asm):00584         # Switch to task 1
6779 1702F4           (        gmmut.asm):00585          bsr switch_to_task_1
                      (        gmmut.asm):00586         
                      (        gmmut.asm):00587         # set task 0 slot 4,5 to 3e and 3f
                      (        gmmut.asm):00588         # set task 1 slot 4,5 to 3f and 3e
677C 1704FD           (        gmmut.asm):00589          bsr strout
677F 534554205441534B (        gmmut.asm):00590          fcc "SET TASK 0 SLOT 4,5 TO 3E AND 3F"
     203020534C4F5420
     342C3520544F2033
     4520414E44203346
679F 534554205441534B (        gmmut.asm):00591          fcn "SET TASK 1 SLOT 4,5 TO 3F AND 3E"
     203120534C4F5420
     342C3520544F2033
     4620414E44203345
     00
67C0 863E             (        gmmut.asm):00592          lda #$3e
67C2 B7FFA4           (        gmmut.asm):00593          sta $ffa4
67C5 B7FFAD           (        gmmut.asm):00594          sta $ffad
67C8 863F             (        gmmut.asm):00595          lda #$3f
67CA B7FFA5           (        gmmut.asm):00596          sta $ffa5
67CD B7FFAC           (        gmmut.asm):00597          sta $ffac
                      (        gmmut.asm):00598          
                      (        gmmut.asm):00599         # write to $8000-$9fff
67D0 1704A9           (        gmmut.asm):00600          bsr strout
67D3 575249544520544F (        gmmut.asm):00601          fcn "WRITE TO $8000-$9FFF\r"
     2024383030302D24
     394646460D00
67E9 8613             (        gmmut.asm):00602          lda #19 # random seed
67EB B76AC6           (        gmmut.asm):00603          sta randomseed
67EE 8E8000           (        gmmut.asm):00604          ldx #$8000
67F1                  (        gmmut.asm):00605         tts_loop1
67F1 1702BA           (        gmmut.asm):00606          bsr randomeor
67F4 A780             (        gmmut.asm):00607          sta ,x+
67F6 8CA000           (        gmmut.asm):00608          cmpx #$a000
67F9 26F6             (        gmmut.asm):00609          bne tts_loop1
                      (        gmmut.asm):00610          
                      (        gmmut.asm):00611         # switch to task 0
67FB 17028F           (        gmmut.asm):00612          bsr switch_to_task_0
                      (        gmmut.asm):00613          
                      (        gmmut.asm):00614         # test $a000-$bfff, expect pass
67FE 17047B           (        gmmut.asm):00615          bsr strout
6801 5445535420244130 (        gmmut.asm):00616          fcn "TEST $A000-$BFFF\r"
     30302D2442464646
     0D00
6813 8613             (        gmmut.asm):00617          lda #19 # random seed
6815 B76AC6           (        gmmut.asm):00618          sta randomseed
6818 8EA000           (        gmmut.asm):00619          ldx #$a000
681B                  (        gmmut.asm):00620         tts_loop2
681B 170290           (        gmmut.asm):00621          bsr randomeor
681E A180             (        gmmut.asm):00622          cmpa ,x+
6820 1026007D         (        gmmut.asm):00623          bne tts_fail
6824 8CC000           (        gmmut.asm):00624          cmpx #$c000
6827 26F2             (        gmmut.asm):00625          bne tts_loop2
                      (        gmmut.asm):00626         
                      (        gmmut.asm):00627         # write to $8000-$9fff
6829 170450           (        gmmut.asm):00628          bsr strout
682C 575249544520544F (        gmmut.asm):00629          fcn "WRITE TO $8000-$9FFF\r"
     2024383030302D24
     394646460D00
6842 869A             (        gmmut.asm):00630          lda #154 # different random seed
6844 B76AC6           (        gmmut.asm):00631          sta randomseed
6847 8E8000           (        gmmut.asm):00632          ldx #$8000
684A                  (        gmmut.asm):00633         tts_loop3
684A 170261           (        gmmut.asm):00634          bsr randomeor
684D A780             (        gmmut.asm):00635          sta ,x+
684F 8CA000           (        gmmut.asm):00636          cmpx #$a000
6852 26F6             (        gmmut.asm):00637          bne tts_loop3
                      (        gmmut.asm):00638         
                      (        gmmut.asm):00639         # switch to task 1
6854 170219           (        gmmut.asm):00640          bsr switch_to_task_1
                      (        gmmut.asm):00641         
                      (        gmmut.asm):00642         # test $8000-$9fff expect fail
6857 170422           (        gmmut.asm):00643          bsr strout
685A 5445535420243830 (        gmmut.asm):00644          fcn "TEST $8000-$9FFF\r"
     30302D2439464646
     0D00
686C 86FF             (        gmmut.asm):00645          lda #$ff
686E B76894           (        gmmut.asm):00646          sta tts_pass_flag
6871 869A             (        gmmut.asm):00647          lda #154 # different random seed
6873 B76AC6           (        gmmut.asm):00648          sta randomseed
6876 8E8000           (        gmmut.asm):00649          ldx #$8000
6879                  (        gmmut.asm):00650         tts_loop4
6879 170232           (        gmmut.asm):00651          bsr randomeor
687C A180             (        gmmut.asm):00652          cmpa ,x+
687E 10270003         (        gmmut.asm):00653          beq tts_skip
6882 7F6894           (        gmmut.asm):00654          clr tts_pass_flag
6885                  (        gmmut.asm):00655         tts_skip
6885 8CA000           (        gmmut.asm):00656          cmpx #$a000
6888 26EF             (        gmmut.asm):00657          bne tts_loop4
688A B66894           (        gmmut.asm):00658          lda tts_pass_flag
688D 10270004         (        gmmut.asm):00659          beq tts_pass
6891 16000D           (        gmmut.asm):00660          bra tts_fail
                      (        gmmut.asm):00661          
6894                  (        gmmut.asm):00662         tts_pass_flag rmb 1
                      (        gmmut.asm):00663         
                      (        gmmut.asm):00664         # pass
6895                  (        gmmut.asm):00665         tts_pass
6895 1703E4           (        gmmut.asm):00666          bsr strout
6898 504153530D00     (        gmmut.asm):00667          fcn "PASS\r"
689E 160009           (        gmmut.asm):00668          bra tts_done
                      (        gmmut.asm):00669         
68A1                  (        gmmut.asm):00670         tts_fail
68A1 1703D8           (        gmmut.asm):00671          bsr strout
68A4 4641494C0D00     (        gmmut.asm):00672          fcn "FAIL\r"
                      (        gmmut.asm):00673          
                      (        gmmut.asm):00674         # switch to task 0
68AA                  (        gmmut.asm):00675         tts_done
68AA 1701E0           (        gmmut.asm):00676          bsr switch_to_task_0
68AD 39               (        gmmut.asm):00677          rts
                      (        gmmut.asm):00678         
68AE                  (        gmmut.asm):00679         test_constant_ram
                      (        gmmut.asm):00680         # switch to task 0
68AE BD6A8D           (        gmmut.asm):00681          jsr switch_to_task_0
                      (        gmmut.asm):00682         
                      (        gmmut.asm):00683         # copy code to task 1
68B1 B6FFA2           (        gmmut.asm):00684          lda $ffa2
68B4 B7FFAA           (        gmmut.asm):00685          sta $ffaa
68B7 B6FFA3           (        gmmut.asm):00686          lda $ffa3
68BA B7FFAB           (        gmmut.asm):00687          sta $ffab
                      (        gmmut.asm):00688          
68BD 1703BC           (        gmmut.asm):00689          bsr strout
68C0 5345545550204241 (        gmmut.asm):00690          fcn "SETUP BANKS (TASK 0)\r"
     4E4B532028544153
     4B2030290D00
68D6 863F             (        gmmut.asm):00691          lda #$3f
68D8 B7FFA4           (        gmmut.asm):00692          sta $ffa4
68DB 863E             (        gmmut.asm):00693          lda #$3e
68DD B7FFA7           (        gmmut.asm):00694          sta $ffa7
                      (        gmmut.asm):00695          
68E0 BD6945           (        gmmut.asm):00696          jsr do_const_ram_test
68E3 1027000D         (        gmmut.asm):00697          beq tcr_do_task_1
68E7                  (        gmmut.asm):00698         tcr_fail
                      (        gmmut.asm):00699         # switch to task 0
68E7 BD6A8D           (        gmmut.asm):00700          jsr switch_to_task_0
                      (        gmmut.asm):00701         # bail
68EA 17038F           (        gmmut.asm):00702          bsr strout
68ED 4641494C0D00     (        gmmut.asm):00703          fcn "FAIL\r"
68F3 39               (        gmmut.asm):00704          rts
                      (        gmmut.asm):00705         
68F4                  (        gmmut.asm):00706         tcr_do_task_1
68F4 170385           (        gmmut.asm):00707          bsr strout
68F7 504153530D00     (        gmmut.asm):00708          fcn "PASS\r"
                      (        gmmut.asm):00709         # switch to task 1
68FD BD6A70           (        gmmut.asm):00710          jsr switch_to_task_1
                      (        gmmut.asm):00711         
6900 170379           (        gmmut.asm):00712          bsr strout
6903 5345545550204241 (        gmmut.asm):00713          fcn "SETUP BANKS (TASK 1)\r"
     4E4B532028544153
     4B2031290D00
6919 863F             (        gmmut.asm):00714          lda #$3f
691B B7FFAC           (        gmmut.asm):00715          sta $ffac
691E 863E             (        gmmut.asm):00716          lda #$3e
6920 B7FFAF           (        gmmut.asm):00717          sta $ffaf
                      (        gmmut.asm):00718         
                      (        gmmut.asm):00719         # clear out test buffers
6923 8600             (        gmmut.asm):00720          lda #0
6925 8EFE00           (        gmmut.asm):00721          ldx #$fe00
6928 BD6A3C           (        gmmut.asm):00722          jsr write_seed_256
692B 8600             (        gmmut.asm):00723          lda #0
692D 8E9E00           (        gmmut.asm):00724          ldx #$9e00
6930 BD6A3C           (        gmmut.asm):00725          jsr write_seed_256
                      (        gmmut.asm):00726         
6933 BD6945           (        gmmut.asm):00727          jsr do_const_ram_test
6936 26AF             (        gmmut.asm):00728          bne tcr_fail
6938 170152           (        gmmut.asm):00729          bsr switch_to_task_0 
693B 17033E           (        gmmut.asm):00730          bsr strout
693E 504153530D00     (        gmmut.asm):00731          fcn "PASS\r"
6944 39               (        gmmut.asm):00732          rts
                      (        gmmut.asm):00733          
6945                  (        gmmut.asm):00734         do_const_ram_test 
6945 170334           (        gmmut.asm):00735          bsr strout
6948 5455524E204F4E20 (        gmmut.asm):00736          fcn "TURN ON CONST RAM\r"
     434F4E5354205241
     4D0D00
695B B66008           (        gmmut.asm):00737          lda gime_0
695E 8A08             (        gmmut.asm):00738          ora #%00001000
6960 B76008           (        gmmut.asm):00739          sta gime_0
6963 B7FF90           (        gmmut.asm):00740          sta $ff90
                      (        gmmut.asm):00741          
6966 170313           (        gmmut.asm):00742          bsr strout
6969 5752495445205345 (        gmmut.asm):00743          fcn "WRITE SEED #87 TO $FE00-$FEFF\r"
     4544202338372054
     4F2024464530302D
     24464546460D00
6988 8657             (        gmmut.asm):00744          lda #87
698A 8EFE00           (        gmmut.asm):00745          ldx #$fe00
698D BD6A3C           (        gmmut.asm):00746          jsr write_seed_256
                      (        gmmut.asm):00747          
6990 1702E9           (        gmmut.asm):00748          bsr strout
6993 5445535420534545 (        gmmut.asm):00749          fcn "TEST SEED #87 ON $9E00-$9EFF\r"
     4420233837204F4E
     2024394530302D24
     394546460D00
69B1 8657             (        gmmut.asm):00750          lda #87
69B3 8E9E00           (        gmmut.asm):00751          ldx #$9e00
69B6 BD6A51           (        gmmut.asm):00752          jsr test_seed_256
69B9 1026007C         (        gmmut.asm):00753          bne do_tcr_fail
                      (        gmmut.asm):00754          
69BD 1702BC           (        gmmut.asm):00755          bsr strout
69C0 5455524E204F4646 (        gmmut.asm):00756          fcn "TURN OFF CONST RAM\r"
     20434F4E53542052
     414D0D00
69D4 B66008           (        gmmut.asm):00757          lda gime_0
69D7 84F7             (        gmmut.asm):00758          anda #%11110111
69D9 B76008           (        gmmut.asm):00759          sta gime_0
69DC B7FF90           (        gmmut.asm):00760          sta $ff90
                      (        gmmut.asm):00761         
69DF 17029A           (        gmmut.asm):00762          bsr strout
69E2 5752495445205345 (        gmmut.asm):00763          fcn "WRITE SEED #92 TO $FE00-$FEFF\r"
     4544202339322054
     4F2024464530302D
     24464546460D00
6A01 865C             (        gmmut.asm):00764          lda #92
6A03 8EFE00           (        gmmut.asm):00765          ldx #$fe00
6A06 BD6A3C           (        gmmut.asm):00766          jsr write_seed_256
                      (        gmmut.asm):00767         
6A09 170270           (        gmmut.asm):00768          bsr strout
6A0C 5445535420534545 (        gmmut.asm):00769          fcn "TEST SEED #87 ON $9E00-$9EFF\r"
     4420233837204F4E
     2024394530302D24
     394546460D00
6A2A 8657             (        gmmut.asm):00770          lda #87
6A2C 8E9E00           (        gmmut.asm):00771          ldx #$9e00
6A2F BD6A51           (        gmmut.asm):00772          jsr test_seed_256
6A32 10260003         (        gmmut.asm):00773          bne do_tcr_fail
                      (        gmmut.asm):00774         
6A36 1A04             (        gmmut.asm):00775          orcc #%00000100 # set z, pass
6A38 39               (        gmmut.asm):00776          rts
                      (        gmmut.asm):00777          
6A39                  (        gmmut.asm):00778         do_tcr_fail
6A39 1CFB             (        gmmut.asm):00779          andcc #%11111011 # clear z, fail
6A3B 39               (        gmmut.asm):00780          rts
                      (        gmmut.asm):00781         
                      (        gmmut.asm):00782         # subroutine
6A3C                  (        gmmut.asm):00783         write_seed_256
6A3C B76AC6           (        gmmut.asm):00784          sta randomseed
6A3F 1F10             (        gmmut.asm):00785          tfr x,d
6A41 C30100           (        gmmut.asm):00786          addd #$100
6A44 3406             (        gmmut.asm):00787          pshs d
6A46                  (        gmmut.asm):00788         ws256_loop
6A46 BD6AAE           (        gmmut.asm):00789          jsr randomeor
6A49 A780             (        gmmut.asm):00790          sta ,x+
6A4B ACE4             (        gmmut.asm):00791          cmpx ,s
6A4D 26F7             (        gmmut.asm):00792          bne ws256_loop
6A4F 3590             (        gmmut.asm):00793          puls x,pc
                      (        gmmut.asm):00794          
                      (        gmmut.asm):00795         # subroutine
6A51                  (        gmmut.asm):00796         test_seed_256
6A51 B76AC6           (        gmmut.asm):00797          sta randomseed
6A54 1F10             (        gmmut.asm):00798          tfr x,d
6A56 C30100           (        gmmut.asm):00799          addd #$100
6A59 3406             (        gmmut.asm):00800          pshs d
6A5B                  (        gmmut.asm):00801         ts256_loop
6A5B BD6AAE           (        gmmut.asm):00802          jsr randomeor
6A5E A180             (        gmmut.asm):00803          cmpa ,x+
6A60 10260008         (        gmmut.asm):00804          bne ts256_fail
6A64 ACE4             (        gmmut.asm):00805          cmpx ,s
6A66 26F3             (        gmmut.asm):00806          bne ts256_loop
6A68                  (        gmmut.asm):00807         ts256_pass
6A68 1A04             (        gmmut.asm):00808          orcc #%00000100 # set z
6A6A 3590             (        gmmut.asm):00809          puls x,pc
6A6C                  (        gmmut.asm):00810         ts256_fail
6A6C 1CFB             (        gmmut.asm):00811          andcc #%11111011 # clear z
6A6E 3590             (        gmmut.asm):00812          puls x,pc
                      (        gmmut.asm):00813         
                      (        gmmut.asm):00814         # subroutine
6A70                  (        gmmut.asm):00815         switch_to_task_1
6A70 170209           (        gmmut.asm):00816          bsr strout
6A73 5357495443482054 (        gmmut.asm):00817          fcn "SWITCH TO TASK 1\r"
     4F205441534B2031
     0D00
6A85 B66009           (        gmmut.asm):00818          lda gime_1
6A88 8A01             (        gmmut.asm):00819          ora #%00000001
6A8A 16001A           (        gmmut.asm):00820          bra stt1_entry
                      (        gmmut.asm):00821         
                      (        gmmut.asm):00822         # subroutine
6A8D                  (        gmmut.asm):00823         switch_to_task_0
6A8D 1701EC           (        gmmut.asm):00824          bsr strout
6A90 5357495443482054 (        gmmut.asm):00825          fcn "SWITCH TO TASK 0\r"
     4F205441534B2030
     0D00
6AA2 B66009           (        gmmut.asm):00826          lda gime_1
6AA5 84FE             (        gmmut.asm):00827          anda #%11111110
6AA7                  (        gmmut.asm):00828         stt1_entry
6AA7 B76009           (        gmmut.asm):00829          sta gime_1
6AAA B7FF91           (        gmmut.asm):00830          sta $ff91
6AAD 39               (        gmmut.asm):00831          rts
                      (        gmmut.asm):00832          
                      (        gmmut.asm):00833         
                      (        gmmut.asm):00834         
                      (        gmmut.asm):00835         
                      (        gmmut.asm):00836         # ---------------------------------------------------------------
                      (        gmmut.asm):00837         # RandomEor sub
                      (        gmmut.asm):00838         # Pick random number from 0 to 255
                      (        gmmut.asm):00839         # Entry: randomseed
                      (        gmmut.asm):00840         # Exit: A = number produced
                      (        gmmut.asm):00841         # Uses a,b
                      (        gmmut.asm):00842         # ---------------------------------------------------------------
6AAE                  (        gmmut.asm):00843         randomeor:
6AAE F66AC6           (        gmmut.asm):00844          ldb randomseed # get last random number
6AB1 10270009         (        gmmut.asm):00845          beq doeor # handle input of zero
6AB5 58               (        gmmut.asm):00846          aslb # shift it left, clear bit zero
6AB6 10270006         (        gmmut.asm):00847          beq rndready # if the input was $80, skip the eor
6ABA 10240002         (        gmmut.asm):00848          bcc rndready # if the carry is now clear skip the eor
6ABE                  (        gmmut.asm):00849         doeor:
6ABE C81D             (        gmmut.asm):00850          eorb #$1d # eor with magic number %00011101
6AC0                  (        gmmut.asm):00851         rndready:
6AC0 F76AC6           (        gmmut.asm):00852          stb randomseed # save the output as the new seed
6AC3 1F98             (        gmmut.asm):00853          tfr b,a
6AC5 39               (        gmmut.asm):00854          rts          
                      (        gmmut.asm):00855         
6AC6                  (        gmmut.asm):00856         randomseed rmb 1  
                      (        gmmut.asm):00857         
6AC7                  (        gmmut.asm):00858         test_ram
6AC7 863C             (        gmmut.asm):00859          lda #$3c
6AC9 B7FFA4           (        gmmut.asm):00860          sta $ffa4
6ACC 1701AD           (        gmmut.asm):00861          bsr strout
6ACF 54455354204F4E4C (        gmmut.asm):00862          fcn "TEST ONLY RAM PAGE $3C (BETA)\r"
     592052414D205041
     4745202433432028
     42455441290D00
                      (        gmmut.asm):00863         # Set Sam to PMODE 4
6AEE 86F0             (        gmmut.asm):00864          lda #%11110000
6AF0 B7FFC5           (        gmmut.asm):00865          sta $ffc5
6AF3 B7FFC3           (        gmmut.asm):00866          sta $ffc3
6AF6 B7FFC0           (        gmmut.asm):00867          sta $ffc0
6AF9 B7FF22           (        gmmut.asm):00868          sta $ff22
                      (        gmmut.asm):00869         # set SAM to base address ($8000)
                      (        gmmut.asm):00870         # for video
6AFC 8640             (        gmmut.asm):00871          lda #$40
6AFE 170120           (        gmmut.asm):00872          bsr store_a_into_sam_offset
                      (        gmmut.asm):00873         
6B01 17006F           (        gmmut.asm):00874          bsr mu_start
6B04 1026001D         (        gmmut.asm):00875          bne tr_fail
6B08                  (        gmmut.asm):00876         tr_pass
                      (        gmmut.asm):00877         # Set Sam to text mode
6B08 8600             (        gmmut.asm):00878          lda #$00
6B0A B7FFC0           (        gmmut.asm):00879          sta $ffc0
6B0D B7FFC2           (        gmmut.asm):00880          sta $ffc2
6B10 B7FFC4           (        gmmut.asm):00881          sta $ffc4
6B13 B7FF22           (        gmmut.asm):00882          sta $ff22
                      (        gmmut.asm):00883         # set SAM to text screen base address ($0400)
                      (        gmmut.asm):00884         # for video
6B16 8602             (        gmmut.asm):00885          lda #%00000010
6B18 170106           (        gmmut.asm):00886          bsr store_a_into_sam_offset
6B1B 17015E           (        gmmut.asm):00887          bsr strout
6B1E 504153530D00     (        gmmut.asm):00888          fcn "PASS\r"
6B24 39               (        gmmut.asm):00889          rts
6B25                  (        gmmut.asm):00890         tr_fail
6B25 3422             (        gmmut.asm):00891          pshs a,y
                      (        gmmut.asm):00892         # Set Sam to text mode
6B27 8600             (        gmmut.asm):00893          lda #$00
6B29 B7FFC0           (        gmmut.asm):00894          sta $ffc0
6B2C B7FFC2           (        gmmut.asm):00895          sta $ffc2
6B2F B7FFC4           (        gmmut.asm):00896          sta $ffc4
6B32 B7FF22           (        gmmut.asm):00897          sta $ff22
                      (        gmmut.asm):00898         # set SAM to text screen base address ($0400)
                      (        gmmut.asm):00899         # for video
6B35 8602             (        gmmut.asm):00900          lda #%00000010
6B37 1700E7           (        gmmut.asm):00901          bsr store_a_into_sam_offset
6B3A 17013F           (        gmmut.asm):00902          bsr strout
6B3D 4641494C20424954 (        gmmut.asm):00903          fcn "FAIL BITS: $"
     533A202400
6B4A 3502             (        gmmut.asm):00904          puls a
6B4C 17013C           (        gmmut.asm):00905          bsr charout_hex
                      (        gmmut.asm):00906         
6B4F 17012A           (        gmmut.asm):00907          bsr strout
6B52 0D4641494C204144 (        gmmut.asm):00908          fcn "\rFAIL ADDRESS: $"
     44524553533A2024
     00
6B63 3502             (        gmmut.asm):00909          puls a
6B65 170123           (        gmmut.asm):00910          bsr charout_hex
6B68 3502             (        gmmut.asm):00911          puls a
6B6A 17011E           (        gmmut.asm):00912          bsr charout_hex
6B6D 17010C           (        gmmut.asm):00913          bsr strout
6B70 0D00             (        gmmut.asm):00914          fcn "\r"
6B72 39               (        gmmut.asm):00915          rts
                      (        gmmut.asm):00916          
                      (        gmmut.asm):00917          include "marchu_6809.asm"
                      (  marchu_6809.asm):00001         ; March U
                      (  marchu_6809.asm):00002         ; Inspired by
                      (  marchu_6809.asm):00003         ; https://github.com/misterblack1/appleII_deadtest
                      (  marchu_6809.asm):00004         
     8000             (  marchu_6809.asm):00005         start_memory equ $8000
     A000             (  marchu_6809.asm):00006         end_memory equ $a000
                      (  marchu_6809.asm):00007         
6B73                  (  marchu_6809.asm):00008         mu_start
6B73 8E6C15           (  marchu_6809.asm):00009          ldx #test_table
                      (  marchu_6809.asm):00010          
6B76                  (  marchu_6809.asm):00011         marchU
6B76 A684             (  marchu_6809.asm):00012          lda ,x                 ; get the test value into a
6B78 1F89             (  marchu_6809.asm):00013          tfr a,b                ; save the test value into b
6B7A 108E8000         (  marchu_6809.asm):00014          ldy #start_memory
                      (  marchu_6809.asm):00015         
6B7E                  (  marchu_6809.asm):00016         marchU0
6B7E A7A0             (  marchu_6809.asm):00017          sta ,y+                ; w0 - write the test value
6B80 108CA000         (  marchu_6809.asm):00018          cmpy #end_memory
6B84 26F8             (  marchu_6809.asm):00019          bne marchU0
                      (  marchu_6809.asm):00020          
6B86 108E8000         (  marchu_6809.asm):00021          ldy #start_memory
6B8A                  (  marchu_6809.asm):00022         marchU1
6B8A A8A4             (  marchu_6809.asm):00023          eora ,y                ; r0 - read and compare with test value (by XOR'ing with accumulator)
6B8C 10260035         (  marchu_6809.asm):00024          bne mem_bad    ; if bits differ, location is bad
6B90 1F98             (  marchu_6809.asm):00025          tfr b,a                ; get the test value
6B92 43               (  marchu_6809.asm):00026          coma                   ; invert
6B93 A7A4             (  marchu_6809.asm):00027          sta ,y                 ; w1 - write the inverted test value
6B95 A8A4             (  marchu_6809.asm):00028          eora ,y                ; r1 - read the same value back and compare using XOR
6B97 1026002A         (  marchu_6809.asm):00029          bne mem_bad    ; if bits differ, location is bad
6B9B 1F98             (  marchu_6809.asm):00030          tfr b,a                ; get the test value
6B9D A7A0             (  marchu_6809.asm):00031          sta ,y+                ; w0 - write the test value to the memory location
6B9F 108CA000         (  marchu_6809.asm):00032          cmpy #end_memory
6BA3 26E5             (  marchu_6809.asm):00033          bne marchU1
                      (  marchu_6809.asm):00034          
6BA5                  (  marchu_6809.asm):00035         marchU1delay
6BA5 170020           (  marchu_6809.asm):00036          bsr delay100ms
                      (  marchu_6809.asm):00037                 
6BA8 108E8000         (  marchu_6809.asm):00038          ldy #start_memory
                      (  marchu_6809.asm):00039         #step 2; up - r0,w1
6BAC                  (  marchu_6809.asm):00040         marchU2
6BAC 1F98             (  marchu_6809.asm):00041          tfr b,a                ; recover test value
6BAE A8A4             (  marchu_6809.asm):00042          eora ,y                ; r0 - read and compare with test value (by XOR'ing with accumulator)
6BB0 10260011         (  marchu_6809.asm):00043          bne mem_bad    ; if bits differ, location is bad
6BB4 1F98             (  marchu_6809.asm):00044          tfr b,a                ; get the test value
6BB6 43               (  marchu_6809.asm):00045          coma                   ; invert
6BB7 A7A0             (  marchu_6809.asm):00046          sta ,y+                ; w1 - write the inverted test value
6BB9 108CA000         (  marchu_6809.asm):00047          cmpy #end_memory
6BBD 26ED             (  marchu_6809.asm):00048          bne marchU2
                      (  marchu_6809.asm):00049          
6BBF                  (  marchu_6809.asm):00050         marchU2delay
6BBF 170006           (  marchu_6809.asm):00051          bsr delay100ms
6BC2 16000C           (  marchu_6809.asm):00052          bra continue
                      (  marchu_6809.asm):00053          
6BC5                  (  marchu_6809.asm):00054         mem_bad
6BC5 7E6C12           (  marchu_6809.asm):00055          jmp mem_error
                      (  marchu_6809.asm):00056         
6BC8                  (  marchu_6809.asm):00057         delay100ms
6BC8 108E0000         (  marchu_6809.asm):00058          ldy #$0
                      (  marchu_6809.asm):00059         !
6BCC 3121             (  marchu_6809.asm):00060          leay 1,y
6BCE 26FC             (  marchu_6809.asm):00061          bne <
6BD0 39               (  marchu_6809.asm):00062          rts
                      (  marchu_6809.asm):00063                  
6BD1                  (  marchu_6809.asm):00064         continue
6BD1 108E9FFF         (  marchu_6809.asm):00065          ldy #end_memory-1
6BD5 1F98             (  marchu_6809.asm):00066          tfr b,a                ; recover test value
6BD7 43               (  marchu_6809.asm):00067          coma                   ; invert
                      (  marchu_6809.asm):00068         
                      (  marchu_6809.asm):00069         ; step 3; down - r1,w0,r0,w1
6BD8                  (  marchu_6809.asm):00070         marchU3
6BD8 A8A4             (  marchu_6809.asm):00071          eora ,y                ; r1 - read and compare with inverted test value (by XOR'ing with accumulator)
6BDA 26E9             (  marchu_6809.asm):00072          bne mem_bad    ; if bits differ, location is bad
6BDC 1F98             (  marchu_6809.asm):00073          tfr b,a                ; get the test value
6BDE A7A4             (  marchu_6809.asm):00074          sta ,y                 ; w0 - write the test value
6BE0 A8A4             (  marchu_6809.asm):00075          eora ,y                ; r0 - read the same value back and compare using XOR
6BE2 26E1             (  marchu_6809.asm):00076          bne mem_bad    ; if bits differ, location is bad
6BE4 1F98             (  marchu_6809.asm):00077          tfr b,a                ; get a fresh copy of the test value
6BE6 43               (  marchu_6809.asm):00078          coma                   ; invert
6BE7 A7A4             (  marchu_6809.asm):00079          sta ,y                 ; w1 - write the inverted test value
6BE9 313F             (  marchu_6809.asm):00080          leay -1,y              ; count down
6BEB 108C7FFF         (  marchu_6809.asm):00081          cmpy #start_memory-1   ; did we wrap?
6BEF 26E7             (  marchu_6809.asm):00082          bne marchU3    ; repeat until Y overflows back to FF
                      (  marchu_6809.asm):00083         
                      (  marchu_6809.asm):00084         ; step 4; down - r1,w0
6BF1 108E9FFF         (  marchu_6809.asm):00085          ldy #end_memory-1
6BF5                  (  marchu_6809.asm):00086         marchU4
6BF5 A8A4             (  marchu_6809.asm):00087          eora ,y                ; r1 - read and compare with inverted test value (by XOR'ing with accumulator)
6BF7 26CC             (  marchu_6809.asm):00088          bne mem_bad    ; if bits differ, location is bad
6BF9 1F98             (  marchu_6809.asm):00089          tfr b,a                ; get the test value
6BFB A7A4             (  marchu_6809.asm):00090          sta ,y                 ; w0 - write the test value
6BFD 43               (  marchu_6809.asm):00091          coma                   ; invert
6BFE 313F             (  marchu_6809.asm):00092          leay -1,y              ; count down
6C00 108C7FFF         (  marchu_6809.asm):00093          cmpy #start_memory-1   ; did we wrap?
6C04 26EF             (  marchu_6809.asm):00094          bne marchU4    ; repeat until Y overflows back to FF
                      (  marchu_6809.asm):00095         
6C06 3001             (  marchu_6809.asm):00096          leax 1,x               ; choose the next one
6C08 8C6C21           (  marchu_6809.asm):00097          cmpx #test_table_end
6C0B 1026FF67         (  marchu_6809.asm):00098          bne marchU             ; start again with next value
                      (  marchu_6809.asm):00099         
6C0F                  (  marchu_6809.asm):00100         mem_good
6C0F 1A04             (  marchu_6809.asm):00101          orcc #%00000100 # set z
6C11 39               (  marchu_6809.asm):00102          rts
                      (  marchu_6809.asm):00103         
6C12                  (  marchu_6809.asm):00104         mem_error
6C12 1CFB             (  marchu_6809.asm):00105          andcc #%11111011 # clear z
6C14 39               (  marchu_6809.asm):00106          rts
                      (  marchu_6809.asm):00107         
6C15                  (  marchu_6809.asm):00108         test_table
6C15 80402010         (  marchu_6809.asm):00109          fcb $80,$40,$20,$10
6C19 08040201         (  marchu_6809.asm):00110          fcb $08,$04,$02,$01
6C1D 00FFA55A         (  marchu_6809.asm):00111          fcb $00,$FF,$A5,$5A 
     6C21             (  marchu_6809.asm):00112         test_table_end equ *
                      (  marchu_6809.asm):00113          
                      (        gmmut.asm):00918         
                      (        gmmut.asm):00919         # 
                      (        gmmut.asm):00920         #
                      (        gmmut.asm):00921         # subroutine
                      (        gmmut.asm):00922         # Store reg a into sam video offset register
                      (        gmmut.asm):00923         #
6C21                  (        gmmut.asm):00924         store_a_into_sam_offset
6C21 C607             (        gmmut.asm):00925          ldb #7
6C23 8EFFC6           (        gmmut.asm):00926          ldx #$ffc6
6C26                  (        gmmut.asm):00927         loop_store_a
6C26 46               (        gmmut.asm):00928          rora
6C27 10240007         (        gmmut.asm):00929          bcc set_clear
6C2B                  (        gmmut.asm):00930         set_set
6C2B 3001             (        gmmut.asm):00931          leax 1,x
6C2D A780             (        gmmut.asm):00932          sta ,x+
6C2F 160002           (        gmmut.asm):00933          bra set_done
6C32                  (        gmmut.asm):00934         set_clear
6C32 A781             (        gmmut.asm):00935          sta ,x++
6C34                  (        gmmut.asm):00936         set_done 
6C34 5A               (        gmmut.asm):00937          decb
6C35 26EF             (        gmmut.asm):00938          bne loop_store_a
6C37 39               (        gmmut.asm):00939          rts
                      (        gmmut.asm):00940         
                      (        gmmut.asm):00941         #
                      (        gmmut.asm):00942         # subroutine
                      (        gmmut.asm):00943         # turn off all interrupts
                      (        gmmut.asm):00944         #
6C38                  (        gmmut.asm):00945         turn_off_ints
6C38 1A50             (        gmmut.asm):00946          orcc #$50
6C3A 39               (        gmmut.asm):00947          rts
                      (        gmmut.asm):00948         
                      (        gmmut.asm):00949         #
                      (        gmmut.asm):00950         # subroutine
                      (        gmmut.asm):00951         # turn on all interrupts
                      (        gmmut.asm):00952         #
6C3B                  (        gmmut.asm):00953         turn_on_ints
6C3B 1CAF             (        gmmut.asm):00954          andcc #$af
6C3D 39               (        gmmut.asm):00955          rts
                      (        gmmut.asm):00956          
6C3E                  (        gmmut.asm):00957         saved_task rmb 8
                      (        gmmut.asm):00958          
6C46                  (        gmmut.asm):00959         restore_task_0
                      (        gmmut.asm):00960         #
                      (        gmmut.asm):00961         # subroutine
                      (        gmmut.asm):00962         # restore mmu regs at ffa0
                      (        gmmut.asm):00963         #
6C46 108E6C3E         (        gmmut.asm):00964          ldy #saved_task
6C4A 8EFFA0           (        gmmut.asm):00965          ldx #$ffa0
6C4D 160007           (        gmmut.asm):00966          bra copy_task
                      (        gmmut.asm):00967          
6C50                  (        gmmut.asm):00968         save_task_0
                      (        gmmut.asm):00969         #
                      (        gmmut.asm):00970         # subroutine
                      (        gmmut.asm):00971         # save mmu regs at ffa0
                      (        gmmut.asm):00972         #
6C50 108EFFA0         (        gmmut.asm):00973          ldy #$ffa0
6C54 8E6C3E           (        gmmut.asm):00974          ldx #saved_task
6C57                  (        gmmut.asm):00975         copy_task
6C57 ECA1             (        gmmut.asm):00976          ldd ,y++
6C59 ED81             (        gmmut.asm):00977          std ,x++
6C5B ECA1             (        gmmut.asm):00978          ldd ,y++
6C5D ED81             (        gmmut.asm):00979          std ,x++
6C5F ECA1             (        gmmut.asm):00980          ldd ,y++
6C61 ED81             (        gmmut.asm):00981          std ,x++
6C63 ECA1             (        gmmut.asm):00982          ldd ,y++
6C65 ED81             (        gmmut.asm):00983          std ,x++
6C67 39               (        gmmut.asm):00984          rts
                      (        gmmut.asm):00985         
6C68                  (        gmmut.asm):00986         clear_screen
                      (        gmmut.asm):00987         #
                      (        gmmut.asm):00988         # subroutine
                      (        gmmut.asm):00989         # clear the text screen
                      (        gmmut.asm):00990         #
6C68 8E0400           (        gmmut.asm):00991          ldx #$0400
6C6B CC6060           (        gmmut.asm):00992          ldd #$6060
6C6E                  (        gmmut.asm):00993         cs_loop
6C6E ED81             (        gmmut.asm):00994          std ,x++
6C70 8C0600           (        gmmut.asm):00995          cmpx #$600
6C73 26F9             (        gmmut.asm):00996          bne cs_loop
6C75 7F6006           (        gmmut.asm):00997          clr text_position
6C78 7F6007           (        gmmut.asm):00998          clr text_position+1
6C7B 39               (        gmmut.asm):00999          rts
                      (        gmmut.asm):01000          
6C7C                  (        gmmut.asm):01001         strout
                      (        gmmut.asm):01002         #
                      (        gmmut.asm):01003         # subroutine
                      (        gmmut.asm):01004         # Output string to screen
                      (        gmmut.asm):01005         #
6C7C 3540             (        gmmut.asm):01006          puls u
6C7E                  (        gmmut.asm):01007         so_loop
6C7E A6C0             (        gmmut.asm):01008          lda ,u+
6C80 10270005         (        gmmut.asm):01009          beq so_done
6C84 BD6CB6           (        gmmut.asm):01010          jsr chrout
6C87 20F5             (        gmmut.asm):01011          bra so_loop
6C89                  (        gmmut.asm):01012         so_done
6C89 1F35             (        gmmut.asm):01013          tfr u,pc
                      (        gmmut.asm):01014         
6C8B                  (        gmmut.asm):01015         charout_hex
6C8B 3432             (        gmmut.asm):01016          pshs a,y,x
6C8D 108E6CA6         (        gmmut.asm):01017          ldy #hex_ascii
6C91 44               (        gmmut.asm):01018          lsra
6C92 44               (        gmmut.asm):01019          lsra
6C93 44               (        gmmut.asm):01020          lsra
6C94 44               (        gmmut.asm):01021          lsra
6C95 A6A6             (        gmmut.asm):01022          lda a,y
6C97 BD6CB6           (        gmmut.asm):01023          jsr chrout
6C9A A6E4             (        gmmut.asm):01024          lda ,s
6C9C 840F             (        gmmut.asm):01025          anda #$0f
6C9E A6A6             (        gmmut.asm):01026          lda a,y
6CA0 BD6CB6           (        gmmut.asm):01027          jsr chrout
6CA3 3532             (        gmmut.asm):01028          puls a,y,x
6CA5 39               (        gmmut.asm):01029          rts
                      (        gmmut.asm):01030         
6CA6 3031323334353637 (        gmmut.asm):01031         hex_ascii fcc "0123456789ABCDEF"
     3839414243444546
                      (        gmmut.asm):01032         
6CB6                  (        gmmut.asm):01033         chrout
                      (        gmmut.asm):01034         #
                      (        gmmut.asm):01035         # subroutine
                      (        gmmut.asm):01036         # output to text screen
                      (        gmmut.asm):01037         #
6CB6 810D             (        gmmut.asm):01038          cmpa #$0d
6CB8 1027002D         (        gmmut.asm):01039          beq co_carrage_return
6CBC 8160             (        gmmut.asm):01040          cmpa #$60
6CBE 102C000B         (        gmmut.asm):01041          bge co_sub60
6CC2 8140             (        gmmut.asm):01042          cmpa #$40
6CC4 102C0007         (        gmmut.asm):01043          bge co_out
6CC8                  (        gmmut.asm):01044         co_add40
6CC8 8B40             (        gmmut.asm):01045          adda #$40
6CCA 160002           (        gmmut.asm):01046          bra co_out
6CCD                  (        gmmut.asm):01047         co_sub60
6CCD 8060             (        gmmut.asm):01048          suba #$60
6CCF                  (        gmmut.asm):01049         co_out
6CCF 3402             (        gmmut.asm):01050          pshs a
6CD1 BE6004           (        gmmut.asm):01051          ldx text_address
6CD4 FC6006           (        gmmut.asm):01052          ldd text_position
6CD7 308B             (        gmmut.asm):01053          leax d,x
6CD9 C30001           (        gmmut.asm):01054          addd #1
6CDC FD6006           (        gmmut.asm):01055          std text_position
6CDF 3502             (        gmmut.asm):01056          puls a
6CE1 A784             (        gmmut.asm):01057          sta ,x
6CE3 FC6006           (        gmmut.asm):01058          ldd text_position
6CE6 16000B           (        gmmut.asm):01059          bra co_check_scroll
6CE9                  (        gmmut.asm):01060         co_carrage_return
6CE9 FC6006           (        gmmut.asm):01061          ldd text_position
6CEC C30020           (        gmmut.asm):01062          addd #32
6CEF C4E0             (        gmmut.asm):01063          andb #%11100000
6CF1 FD6006           (        gmmut.asm):01064          std text_position
6CF4                  (        gmmut.asm):01065         co_check_scroll
6CF4 10830200         (        gmmut.asm):01066          cmpd #512
6CF8 10270001         (        gmmut.asm):01067          beq co_scroll
6CFC 39               (        gmmut.asm):01068          rts
6CFD                  (        gmmut.asm):01069         co_scroll
6CFD BE6004           (        gmmut.asm):01070          ldx text_address
6D00                  (        gmmut.asm):01071         co_scroll_loop
6D00 EC8820           (        gmmut.asm):01072          ldd 32,x
6D03 ED81             (        gmmut.asm):01073          std ,x++
6D05 8C05E0           (        gmmut.asm):01074          cmpx #$0600-32
6D08 26F6             (        gmmut.asm):01075          bne co_scroll_loop
6D0A CC6060           (        gmmut.asm):01076          ldd #$6060
6D0D                  (        gmmut.asm):01077         co_clear_last_line_loop
6D0D ED81             (        gmmut.asm):01078          std ,x++
6D0F 8C0600           (        gmmut.asm):01079          cmpx #$0600
6D12 26F9             (        gmmut.asm):01080          bne co_clear_last_line_loop
6D14 FC6006           (        gmmut.asm):01081          ldd text_position
6D17 830020           (        gmmut.asm):01082          subd #32
6D1A FD6006           (        gmmut.asm):01083          std text_position
6D1D 39               (        gmmut.asm):01084          rts
                      (        gmmut.asm):01085         
6D1E                  (        gmmut.asm):01086         wait
                      (        gmmut.asm):01087         #
                      (        gmmut.asm):01088         # subroutine
                      (        gmmut.asm):01089         #
6D1E                  (        gmmut.asm):01090         wait_loop
6D1E BD6D2F           (        gmmut.asm):01091          jsr keyin
6D21 8100             (        gmmut.asm):01092          cmpa #0
6D23 27F9             (        gmmut.asm):01093          beq wait_loop
6D25 39               (        gmmut.asm):01094          rts
                      (        gmmut.asm):01095          
     FF00             (        gmmut.asm):01096         pia0 equ $ff00
6D26                  (        gmmut.asm):01097         keybuf rmb 8 keyboard memory buffer
6D2E                  (        gmmut.asm):01098         casflg rmb 1 upper case/lower case flag: $ff=upper, 0=lower
                      (        gmmut.asm):01099         
                      (        gmmut.asm):01100         # la1c1 clr pia0+2 clear column strobe
                      (        gmmut.asm):01101         #  lda pia0 read key rows
                      (        gmmut.asm):01102         #  coma complement row data
                      (        gmmut.asm):01103         #  asla shift off joystick data
                      (        gmmut.asm):01104         #  beq la244 return if no keys or fire buttons down
                      (        gmmut.asm):01105         #
                      (        gmmut.asm):01106         # subroutine
                      (        gmmut.asm):01107         # this routine gets a keystroke from the keyboard if a key
                      (        gmmut.asm):01108         # is down. it returns zero true if there was no key down.
                      (        gmmut.asm):01109         #
6D2F 3454             (        gmmut.asm):01110         keyin pshs u,x,b save registers
6D31 CEFF00           (        gmmut.asm):01111          ldu #pia0 point u to pia0
6D34 8E6D26           (        gmmut.asm):01112          ldx #keybuf point x to keyboard memory buffer
6D37 4F               (        gmmut.asm):01113          clra * clear carry flag, set column counter (acca)
6D38 4A               (        gmmut.asm):01114          deca * to $ff
6D39 3412             (        gmmut.asm):01115          pshs x,a save column ctr & 2 blank (x reg) on stack
6D3B A742             (        gmmut.asm):01116          sta 2,u initialize column strobe to $ff
6D3D 6942             (        gmmut.asm):01117         la1d9 rol 2,u * rotate column strobe data left 1 bit, carry
6D3F 10240050         (        gmmut.asm):01118          bcc la220 * into bit 0 - branch if 8 shifts done
6D43 6CE4             (        gmmut.asm):01119          inc ,s increment column counter
6D45 170069           (        gmmut.asm):01120          bsr la23a read keyboard row data
6D48 A761             (        gmmut.asm):01121          sta 1,s temp store key data
6D4A A884             (        gmmut.asm):01122          eora ,x set any bit where a key has moved
6D4C A484             (        gmmut.asm):01123          anda ,x acca=0 if no new key down, <70 if key was released
6D4E E661             (        gmmut.asm):01124          ldb 1,s get new key data
6D50 E780             (        gmmut.asm):01125          stb ,x+ store it in key memory
6D52 4D               (        gmmut.asm):01126          tsta was a new key down?
6D53 27E8             (        gmmut.asm):01127          beq la1d9 no-check another column
6D55 E642             (        gmmut.asm):01128          ldb 2,u * get column strobe data and
6D57 E762             (        gmmut.asm):01129          stb 2,s * temp store it on the stack
                      (        gmmut.asm):01130         * this routine converts the key depression into a number
                      (        gmmut.asm):01131         * from 0-50 in accb corresponding to the key that was down
6D59 C6F8             (        gmmut.asm):01132          ldb #$f8 to make sure accb=0 after first addb #8
6D5B CB08             (        gmmut.asm):01133         la1f4 addb #$08 add 8 for each row of keyboard
6D5D 44               (        gmmut.asm):01134          lsra acca has the row number of this key - add 8 for each row
6D5E 24FB             (        gmmut.asm):01135          bcc la1f4 go on until a zero appears in the carry flag
6D60 EBE4             (        gmmut.asm):01136          addb ,s add in the column number
                      (        gmmut.asm):01137         * now convert the value in accb into ascii
6D62 10270058         (        gmmut.asm):01138          beq la245
6D66 C11A             (        gmmut.asm):01139          cmpb #26 the ‘at sign’ key was down was it a letter?
6D68 10220054         (        gmmut.asm):01140          bhi la247 no
6D6C CA40             (        gmmut.asm):01141          orb #$40 yes, convert to upper case ascii
6D6E 170034           (        gmmut.asm):01142          bsr la22e check for the shift key
6D71 BA6D2E           (        gmmut.asm):01143          ora casflg * ‘or’ in the case flag & branch if in upper
6D74 10260002         (        gmmut.asm):01144          bne la20c * case mode or shift key down
6D78 CA20             (        gmmut.asm):01145          orb #$20 convert to lower case
6D7A E7E4             (        gmmut.asm):01146         la20c stb ,s temp store ascii value
6D7C 8E045E           (        gmmut.asm):01147          ldx #$45e get keyboard debounce
6D7F 17006D           (        gmmut.asm):01148          bsr la1ae
6D82 C6FF             (        gmmut.asm):01149          ldb #$ff set column strobe to all ones (no
6D84 170028           (        gmmut.asm):01150          bsr la238 strobe) and read keyboard
6D87 4C               (        gmmut.asm):01151          inca = incr row data, acca now 0 if no joystick
6D88 10260007         (        gmmut.asm):01152          bne la220 = button down. branch if joystick button down
6D8C E662             (        gmmut.asm):01153         la21a ldb 2,s get column strobe data
6D8E 17001E           (        gmmut.asm):01154          bsr la238 read a key
6D91 A161             (        gmmut.asm):01155          cmpa 1,s is it the same key as before debounce?
6D93 3512             (        gmmut.asm):01156         la220 puls a,x remove temp slots from the stack and recover
                      (        gmmut.asm):01157         * the ascii value of the key
6D95 10260009         (        gmmut.asm):01158          bne la22b not the same key or joystick button
6D99 8112             (        gmmut.asm):01159          cmpa #$12 is shift zero down?
6D9B 10260004         (        gmmut.asm):01160          bne la22c no
6D9F 736D2E           (        gmmut.asm):01161          com casflg yes, toggle upper case/lower case flag
6DA2 4F               (        gmmut.asm):01162         la22b clra set zero flag to indicate no new key down
6DA3 35D4             (        gmmut.asm):01163         la22c puls b,x,u,pc restore registers
                      (        gmmut.asm):01164         
                      (        gmmut.asm):01165         * test for the shift key
6DA5 867F             (        gmmut.asm):01166         la22e lda #$7f column strobe
6DA7 A742             (        gmmut.asm):01167          sta 2,u store to pla
6DA9 A6C4             (        gmmut.asm):01168          lda ,u read key data
6DAB 43               (        gmmut.asm):01169          coma *
6DAC 8440             (        gmmut.asm):01170          anda #$40 * set bit 6 if shift key down
6DAE 39               (        gmmut.asm):01171          rts return
                      (        gmmut.asm):01172         
                      (        gmmut.asm):01173         * read the keyboard
6DAF E742             (        gmmut.asm):01174         la238 stb 2,u save new column strobe value
6DB1 A6C4             (        gmmut.asm):01175         la23a lda ,u read pia0, port a to see if key is down
                      (        gmmut.asm):01176         * a bit will be zero if one is
6DB3 8A80             (        gmmut.asm):01177          ora #$80 mask off the joystick comparator input
6DB5 6D42             (        gmmut.asm):01178          tst $02,u are we strobing column 7?
6DB7 102B0002         (        gmmut.asm):01179          bmi la244 no
6DBB 8AC0             (        gmmut.asm):01180          ora #$c0 yes, force row 6 to be high - this will cause
                      (        gmmut.asm):01181         * the shift key to be ignored
6DBD 39               (        gmmut.asm):01182         la244 rts return
                      (        gmmut.asm):01183         
6DBE C633             (        gmmut.asm):01184         la245 ldb #51 code for ‘at sign’
6DC0 8E6DC1           (        gmmut.asm):01185         la247 ldx #contab-$36 point x to control code table
6DC3 C121             (        gmmut.asm):01186          cmpb #33 key number <33?
6DC5 1025001A         (        gmmut.asm):01187          blo la264 yes (arrow keys, space bar, zero)
6DC9 8E6DA3           (        gmmut.asm):01188          ldx #contab-$54 point x to middle of control table
6DCC C130             (        gmmut.asm):01189          cmpb #48 key number >48?
6DCE 10240011         (        gmmut.asm):01190          bhs la264 yes (enter,clear,break,at sign)
6DD2 8DD1             (        gmmut.asm):01191          bsr la22e check shift key (acca will contain status)
6DD4 C12B             (        gmmut.asm):01192          cmpb #43 is key a number, colon or semicolon?
6DD6 10230002         (        gmmut.asm):01193          bls la25d yes
6DDA 8840             (        gmmut.asm):01194          eora #$40 toggle bit 6 of acca which contains the shift data
                      (        gmmut.asm):01195         * only for slash,hyphen,period,comma
6DDC 4D               (        gmmut.asm):01196         la25d tsta shift key down?
6DDD 269B             (        gmmut.asm):01197          bne la20c yes
6DDF CB10             (        gmmut.asm):01198          addb #$10 no, add in ascii offset correction
6DE1 2097             (        gmmut.asm):01199          bra la20c go check for debounce
6DE3 58               (        gmmut.asm):01200         la264 aslb mult accb by 2 - there are 2 entries in control
                      (        gmmut.asm):01201         * table for each key - one shifted, one not
6DE4 8DBF             (        gmmut.asm):01202          bsr la22e check shift key
6DE6 10270001         (        gmmut.asm):01203          beq la26a not down
6DEA 5C               (        gmmut.asm):01204          incb add one to get the shifted value
6DEB E685             (        gmmut.asm):01205         la26a ldb b,x get ascii code from control table
6DED 208B             (        gmmut.asm):01206          bra la20c go check debounce
6DEF 7E6DF2           (        gmmut.asm):01207         la1ae jmp la7d3 delay while x decrements to zero
                      (        gmmut.asm):01208         * delay while decrementing x to zero
6DF2 301F             (        gmmut.asm):01209         la7d3 leax -1,x decrement x
6DF4 26FC             (        gmmut.asm):01210          bne la7d3 branch if not zero
6DF6 39               (        gmmut.asm):01211          rts
                      (        gmmut.asm):01212         *
                      (        gmmut.asm):01213         *
                      (        gmmut.asm):01214         * control table unshifted, shifted values
6DF7 5E5F             (        gmmut.asm):01215         contab fcb $5e,$5f up arrow
6DF9 0A5B             (        gmmut.asm):01216          fcb $0a,$5b down arrow
6DFB 0815             (        gmmut.asm):01217          fcb $08,$15 right arrow
6DFD 095D             (        gmmut.asm):01218          fcb $09,$5d left arrow
6DFF 2020             (        gmmut.asm):01219          fcb $20,$20 space bar
6E01 3012             (        gmmut.asm):01220          fcb $30,$12 zero
6E03 0D0D             (        gmmut.asm):01221          fcb $0d,$0d enter
6E05 0C5C             (        gmmut.asm):01222          fcb $0c,$5c clear
6E07 0303             (        gmmut.asm):01223          fcb $03,$03 break
6E09 4013             (        gmmut.asm):01224          fcb $40,$13 at sign
                      (        gmmut.asm):01225         
                      (        gmmut.asm):01226         
                      (        gmmut.asm):01227         
                      (        gmmut.asm):01228         
6E0B                  (        gmmut.asm):01229         buffer rmb 256
6F0B                  (        gmmut.asm):01230         buffer2 rmb 256
700B                  (        gmmut.asm):01231         bitmap_font
700B FFFFFFFFFFFFFFFF (        gmmut.asm):01232          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ( )
7013 E7C3C3E7E7FFE7FF (        gmmut.asm):01233          fcb $e7,$c3,$c3,$e7,$e7,$ff,$e7,$ff (!)
701B 9393FFFFFFFFFFFF (        gmmut.asm):01234          fcb $93,$93,$ff,$ff,$ff,$ff,$ff,$ff (")
7023 93930193019393FF (        gmmut.asm):01235          fcb $93,$93,$01,$93,$01,$93,$93,$ff (#)
702B CF833F87F307CFFF (        gmmut.asm):01236          fcb $cf,$83,$3f,$87,$f3,$07,$cf,$ff ($)
7033 FF3933E7CF9939FF (        gmmut.asm):01237          fcb $ff,$39,$33,$e7,$cf,$99,$39,$ff (%)
703B C793C789233389FF (        gmmut.asm):01238          fcb $c7,$93,$c7,$89,$23,$33,$89,$ff (&)
7043 9F9F3FFFFFFFFFFF (        gmmut.asm):01239          fcb $9f,$9f,$3f,$ff,$ff,$ff,$ff,$ff (')
704B E7CF9F9F9FCFE7FF (        gmmut.asm):01240          fcb $e7,$cf,$9f,$9f,$9f,$cf,$e7,$ff (()
7053 9FCFE7E7E7CF9FFF (        gmmut.asm):01241          fcb $9f,$cf,$e7,$e7,$e7,$cf,$9f,$ff ())
705B FF99C300C399FFFF (        gmmut.asm):01242          fcb $ff,$99,$c3,$00,$c3,$99,$ff,$ff (*)
7063 FFCFCF03CFCFFFFF (        gmmut.asm):01243          fcb $ff,$cf,$cf,$03,$cf,$cf,$ff,$ff (+)
706B FFFFFFFFFFCFCF9F (        gmmut.asm):01244          fcb $ff,$ff,$ff,$ff,$ff,$cf,$cf,$9f (,)
7073 FFFFFF03FFFFFFFF (        gmmut.asm):01245          fcb $ff,$ff,$ff,$03,$ff,$ff,$ff,$ff (-)
707B FFFFFFFFFFCFCFFF (        gmmut.asm):01246          fcb $ff,$ff,$ff,$ff,$ff,$cf,$cf,$ff (.)
7083 F9F3E7CF9F3F7FFF (        gmmut.asm):01247          fcb $f9,$f3,$e7,$cf,$9f,$3f,$7f,$ff (/)
708B 83393121091983FF (        gmmut.asm):01248          fcb $83,$39,$31,$21,$09,$19,$83,$ff (0)
7093 CF8FCFCFCFCF03FF (        gmmut.asm):01249          fcb $cf,$8f,$cf,$cf,$cf,$cf,$03,$ff (1)
709B 8733F3C79F3303FF (        gmmut.asm):01250          fcb $87,$33,$f3,$c7,$9f,$33,$03,$ff (2)
70A3 8733F3C7F33387FF (        gmmut.asm):01251          fcb $87,$33,$f3,$c7,$f3,$33,$87,$ff (3)
70AB E3C3933301F3E1FF (        gmmut.asm):01252          fcb $e3,$c3,$93,$33,$01,$f3,$e1,$ff (4)
70B3 033F07F3F33387FF (        gmmut.asm):01253          fcb $03,$3f,$07,$f3,$f3,$33,$87,$ff (5)
70BB C79F3F07333387FF (        gmmut.asm):01254          fcb $c7,$9f,$3f,$07,$33,$33,$87,$ff (6)
70C3 0333F3E7CFCFCFFF (        gmmut.asm):01255          fcb $03,$33,$f3,$e7,$cf,$cf,$cf,$ff (7)
70CB 87333387333387FF (        gmmut.asm):01256          fcb $87,$33,$33,$87,$33,$33,$87,$ff (8)
70D3 87333383F3E78FFF (        gmmut.asm):01257          fcb $87,$33,$33,$83,$f3,$e7,$8f,$ff (9)
70DB FFCFCFFFFFCFCFFF (        gmmut.asm):01258          fcb $ff,$cf,$cf,$ff,$ff,$cf,$cf,$ff (:)
70E3 FFCFCFFFFFCFCF9F (        gmmut.asm):01259          fcb $ff,$cf,$cf,$ff,$ff,$cf,$cf,$9f (;)
70EB E7CF9F3F9FCFE7FF (        gmmut.asm):01260          fcb $e7,$cf,$9f,$3f,$9f,$cf,$e7,$ff (<)
70F3 FFFF03FFFF03FFFF (        gmmut.asm):01261          fcb $ff,$ff,$03,$ff,$ff,$03,$ff,$ff (=)
70FB 9FCFE7F3E7CF9FFF (        gmmut.asm):01262          fcb $9f,$cf,$e7,$f3,$e7,$cf,$9f,$ff (>)
7103 8733F3E7CFFFCFFF (        gmmut.asm):01263          fcb $87,$33,$f3,$e7,$cf,$ff,$cf,$ff (?)
710B 83392121213F87FF (        gmmut.asm):01264          fcb $83,$39,$21,$21,$21,$3f,$87,$ff (@)
7113 CF873333033333FF (        gmmut.asm):01265          fcb $cf,$87,$33,$33,$03,$33,$33,$ff (A)
711B 03999983999903FF (        gmmut.asm):01266          fcb $03,$99,$99,$83,$99,$99,$03,$ff (B)
7123 C3993F3F3F99C3FF (        gmmut.asm):01267          fcb $c3,$99,$3f,$3f,$3f,$99,$c3,$ff (C)
712B 07939999999307FF (        gmmut.asm):01268          fcb $07,$93,$99,$99,$99,$93,$07,$ff (D)
7133 019D9787979D01FF (        gmmut.asm):01269          fcb $01,$9d,$97,$87,$97,$9d,$01,$ff (E)
713B 019D9787979F0FFF (        gmmut.asm):01270          fcb $01,$9d,$97,$87,$97,$9f,$0f,$ff (F)
7143 C3993F3F3199C1FF (        gmmut.asm):01271          fcb $c3,$99,$3f,$3f,$31,$99,$c1,$ff (G)
714B 33333303333333FF (        gmmut.asm):01272          fcb $33,$33,$33,$03,$33,$33,$33,$ff (H)
7153 87CFCFCFCFCF87FF (        gmmut.asm):01273          fcb $87,$cf,$cf,$cf,$cf,$cf,$87,$ff (I)
715B E1F3F3F3333387FF (        gmmut.asm):01274          fcb $e1,$f3,$f3,$f3,$33,$33,$87,$ff (J)
7163 19999387939919FF (        gmmut.asm):01275          fcb $19,$99,$93,$87,$93,$99,$19,$ff (K)
716B 0F9F9F9F9D9901FF (        gmmut.asm):01276          fcb $0f,$9f,$9f,$9f,$9d,$99,$01,$ff (L)
7173 39110101293939FF (        gmmut.asm):01277          fcb $39,$11,$01,$01,$29,$39,$39,$ff (M)
717B 39190921313939FF (        gmmut.asm):01278          fcb $39,$19,$09,$21,$31,$39,$39,$ff (N)
7183 C79339393993C7FF (        gmmut.asm):01279          fcb $c7,$93,$39,$39,$39,$93,$c7,$ff (O)
718B 039999839F9F0FFF (        gmmut.asm):01280          fcb $03,$99,$99,$83,$9f,$9f,$0f,$ff (P)
7193 873333332387E3FF (        gmmut.asm):01281          fcb $87,$33,$33,$33,$23,$87,$e3,$ff (Q)
719B 03999983939919FF (        gmmut.asm):01282          fcb $03,$99,$99,$83,$93,$99,$19,$ff (R)
71A3 87331F8FE33387FF (        gmmut.asm):01283          fcb $87,$33,$1f,$8f,$e3,$33,$87,$ff (S)
71AB 034BCFCFCFCF87FF (        gmmut.asm):01284          fcb $03,$4b,$cf,$cf,$cf,$cf,$87,$ff (T)
71B3 33333333333303FF (        gmmut.asm):01285          fcb $33,$33,$33,$33,$33,$33,$03,$ff (U)
71BB 333333333387CFFF (        gmmut.asm):01286          fcb $33,$33,$33,$33,$33,$87,$cf,$ff (V)
71C3 39393929011139FF (        gmmut.asm):01287          fcb $39,$39,$39,$29,$01,$11,$39,$ff (W)
71CB 393993C7C79339FF (        gmmut.asm):01288          fcb $39,$39,$93,$c7,$c7,$93,$39,$ff (X)
71D3 33333387CFCF87FF (        gmmut.asm):01289          fcb $33,$33,$33,$87,$cf,$cf,$87,$ff (Y)
71DB 013973E7CD9901FF (        gmmut.asm):01290          fcb $01,$39,$73,$e7,$cd,$99,$01,$ff (Z)
71E3 879F9F9F9F9F87FF (        gmmut.asm):01291          fcb $87,$9f,$9f,$9f,$9f,$9f,$87,$ff ([)
71EB 3F9FCFE7F3F9FDFF (        gmmut.asm):01292          fcb $3f,$9f,$cf,$e7,$f3,$f9,$fd,$ff (\)
71F3 87E7E7E7E7E787FF (        gmmut.asm):01293          fcb $87,$e7,$e7,$e7,$e7,$e7,$87,$ff (])
71FB EFC79339FFFFFFFF (        gmmut.asm):01294          fcb $ef,$c7,$93,$39,$ff,$ff,$ff,$ff (^)
7203 FFFFFFFFFFFFFF00 (        gmmut.asm):01295          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00 (_)
720B CFCFE7FFFFFFFFFF (        gmmut.asm):01296          fcb $cf,$cf,$e7,$ff,$ff,$ff,$ff,$ff (`)
7213 FFFF87F3833389FF (        gmmut.asm):01297          fcb $ff,$ff,$87,$f3,$83,$33,$89,$ff (a)
721B 1F9F9F83999923FF (        gmmut.asm):01298          fcb $1f,$9f,$9f,$83,$99,$99,$23,$ff (b)
7223 FFFF87333F3387FF (        gmmut.asm):01299          fcb $ff,$ff,$87,$33,$3f,$33,$87,$ff (c)
722B E3F3F383333389FF (        gmmut.asm):01300          fcb $e3,$f3,$f3,$83,$33,$33,$89,$ff (d)
7233 FFFF8733033F87FF (        gmmut.asm):01301          fcb $ff,$ff,$87,$33,$03,$3f,$87,$ff (e)
723B C7939F0F9F9F0FFF (        gmmut.asm):01302          fcb $c7,$93,$9f,$0f,$9f,$9f,$0f,$ff (f)
7243 FFFF89333383F307 (        gmmut.asm):01303          fcb $ff,$ff,$89,$33,$33,$83,$f3,$07 (g)
724B 1F9F9389999919FF (        gmmut.asm):01304          fcb $1f,$9f,$93,$89,$99,$99,$19,$ff (h)
7253 CFFF8FCFCFCF87FF (        gmmut.asm):01305          fcb $cf,$ff,$8f,$cf,$cf,$cf,$87,$ff (i)
725B F3FFF3F3F3333387 (        gmmut.asm):01306          fcb $f3,$ff,$f3,$f3,$f3,$33,$33,$87 (j)
7263 1F9F9993879319FF (        gmmut.asm):01307          fcb $1f,$9f,$99,$93,$87,$93,$19,$ff (k)
726B 8FCFCFCFCFCF87FF (        gmmut.asm):01308          fcb $8f,$cf,$cf,$cf,$cf,$cf,$87,$ff (l)
7273 FFFF3301012939FF (        gmmut.asm):01309          fcb $ff,$ff,$33,$01,$01,$29,$39,$ff (m)
727B FFFF0733333333FF (        gmmut.asm):01310          fcb $ff,$ff,$07,$33,$33,$33,$33,$ff (n)
7283 FFFF8733333387FF (        gmmut.asm):01311          fcb $ff,$ff,$87,$33,$33,$33,$87,$ff (o)
728B FFFF239999839F0F (        gmmut.asm):01312          fcb $ff,$ff,$23,$99,$99,$83,$9f,$0f (p)
7293 FFFF89333383F3E1 (        gmmut.asm):01313          fcb $ff,$ff,$89,$33,$33,$83,$f3,$e1 (q)
729B FFFF2389999F0FFF (        gmmut.asm):01314          fcb $ff,$ff,$23,$89,$99,$9f,$0f,$ff (r)
72A3 FFFF833F87F307FF (        gmmut.asm):01315          fcb $ff,$ff,$83,$3f,$87,$f3,$07,$ff (s)
72AB EFCF83CFCFCBE7FF (        gmmut.asm):01316          fcb $ef,$cf,$83,$cf,$cf,$cb,$e7,$ff (t)
72B3 FFFF3333333389FF (        gmmut.asm):01317          fcb $ff,$ff,$33,$33,$33,$33,$89,$ff (u)
72BB FFFF33333387CFFF (        gmmut.asm):01318          fcb $ff,$ff,$33,$33,$33,$87,$cf,$ff (v)
72C3 FFFF3929010193FF (        gmmut.asm):01319          fcb $ff,$ff,$39,$29,$01,$01,$93,$ff (w)
72CB FFFF3993C79339FF (        gmmut.asm):01320          fcb $ff,$ff,$39,$93,$c7,$93,$39,$ff (x)
72D3 FFFF33333383F307 (        gmmut.asm):01321          fcb $ff,$ff,$33,$33,$33,$83,$f3,$07 (y)
72DB FFFF0367CF9B03FF (        gmmut.asm):01322          fcb $ff,$ff,$03,$67,$cf,$9b,$03,$ff (z)
72E3 E3CFCF1FCFCFE3FF (        gmmut.asm):01323          fcb $e3,$cf,$cf,$1f,$cf,$cf,$e3,$ff ({)
72EB E7E7E7FFE7E7E7FF (        gmmut.asm):01324          fcb $e7,$e7,$e7,$ff,$e7,$e7,$e7,$ff (|)
72F3 1FCFCFE3CFCF1FFF (        gmmut.asm):01325          fcb $1f,$cf,$cf,$e3,$cf,$cf,$1f,$ff (})
72FB 8923FFFFFFFFFFFF (        gmmut.asm):01326          fcb $89,$23,$ff,$ff,$ff,$ff,$ff,$ff (~)
7303 FFFFFFFFFFFFFFFF (        gmmut.asm):01327          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ( )
                      (        gmmut.asm):01328          
                      (        gmmut.asm):01329          IFGT *-$7fff
                      (        gmmut.asm):01330          ERROR "Program to large"
                      (        gmmut.asm):01331          ENDC
                      (        gmmut.asm):01332         
                      (        gmmut.asm):01333          end start
