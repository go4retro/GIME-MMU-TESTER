                      (        gmmut.asm):00001          PRAGMA autobranchlength
                      (        gmmut.asm):00002          PRAGMA cescapes
                      (        gmmut.asm):00003          org $6001
6001                  (        gmmut.asm):00004         out_param rmb 1
6002                  (        gmmut.asm):00005         gime_flag rmb 1 # boolean; true if gime, false if jr
6003                  (        gmmut.asm):00006         text_block rmb 1 # mmu block of text screen
6004                  (        gmmut.asm):00007         text_address rmb 2 # address of text screen
6006                  (        gmmut.asm):00008         text_position rmb 2 # cursor offset
6008                  (        gmmut.asm):00009         gime_0 rmb 1 shadow register
6009                  (        gmmut.asm):00010         gime_1 rmb 1 shadow register
                      (        gmmut.asm):00011         
600A                  (        gmmut.asm):00012         start
600A                  (        gmmut.asm):00013         init_tests
                      (        gmmut.asm):00014         # Test for coco3
                      (        gmmut.asm):00015         # CoCo 3 will have $38, Jr. will have $00
                      (        gmmut.asm):00016         # Mooh is currently unknown
600A B6FFA0           (        gmmut.asm):00017          lda $ffa0
600D 843F             (        gmmut.asm):00018          anda #%00111111
600F 8138             (        gmmut.asm):00019          cmpa #$38
6011 10270025         (        gmmut.asm):00020          beq init_gime
6015 8100             (        gmmut.asm):00021          cmpa #$0
6017 10270034         (        gmmut.asm):00022          beq init_jr
                      (        gmmut.asm):00023         # unknown MMU
601B 8E602B           (        gmmut.asm):00024          ldx #unknown_message
601E                  (        gmmut.asm):00025         error_loop
601E A680             (        gmmut.asm):00026          lda ,x+
6020 10270006         (        gmmut.asm):00027          beq error_done
6024 AD9FA002         (        gmmut.asm):00028          jsr [$a002] ; Color BASIC ROM CHROUT
6028 20F4             (        gmmut.asm):00029          bra error_loop
602A                  (        gmmut.asm):00030         error_done
602A 39               (        gmmut.asm):00031          rts ; Go Back to BASIC
602B                  (        gmmut.asm):00032         unknown_message
602B 0D554E4B4E4F574E (        gmmut.asm):00033          fcn "\rUNKNOWN MMU.\r"
     204D4D552E0D00
                      (        gmmut.asm):00034         
603A                  (        gmmut.asm):00035         init_gime
603A 0F71             (        gmmut.asm):00036          clr $71 # force cold start on reset
603C 86FF             (        gmmut.asm):00037          lda #$ff
603E B76002           (        gmmut.asm):00038          sta gime_flag
6041 8638             (        gmmut.asm):00039          lda #$38
6043 B76003           (        gmmut.asm):00040          sta text_block
6046 CC0400           (        gmmut.asm):00041          ldd #$0400
6049 FD6004           (        gmmut.asm):00042          std text_address
                      (        gmmut.asm):00043         # gime mmu slots are initialized by Color BASIC
604C 16003A           (        gmmut.asm):00044          bra init_common
                      (        gmmut.asm):00045         
604F                  (        gmmut.asm):00046         init_jr
604F 0F71             (        gmmut.asm):00047          clr $71 # force cold start on reset
                      (        gmmut.asm):00048         # flag Jr
6051 8600             (        gmmut.asm):00049          lda #$0
6053 B76002           (        gmmut.asm):00050          sta gime_flag
6056 8638             (        gmmut.asm):00051          lda #$38 # lowest banks start at $38
                      (        gmmut.asm):00052         # load default mmu
6058 8EFFA0           (        gmmut.asm):00053          ldx #$ffa0
605B 108EFFA8         (        gmmut.asm):00054          ldy #$ffa8
605F C608             (        gmmut.asm):00055          ldb #8
6061                  (        gmmut.asm):00056         init_jr_loop
6061 A780             (        gmmut.asm):00057          sta ,x+
6063 A7A0             (        gmmut.asm):00058          sta ,y+
6065 4C               (        gmmut.asm):00059          inca
6066 5A               (        gmmut.asm):00060          decb
6067 26F8             (        gmmut.asm):00061          bne init_jr_loop
                      (        gmmut.asm):00062         # initialize internal variables
6069 8600             (        gmmut.asm):00063          lda #$0
606B B76003           (        gmmut.asm):00064          sta text_block
606E CC0400           (        gmmut.asm):00065          ldd #$0400
6071 FD6004           (        gmmut.asm):00066          std text_address
                      (        gmmut.asm):00067         # change to all ram mode
6074 8E8000           (        gmmut.asm):00068          ldx #$8000
6077 1705E3           (        gmmut.asm):00069          bsr turn_off_ints   # need to turn off interrupts before swapping in RAM
607A                  (        gmmut.asm):00070         ram_loop
607A B7FFDE           (        gmmut.asm):00071          sta $ffde
607D EC84             (        gmmut.asm):00072          ldd ,x
607F B7FFDF           (        gmmut.asm):00073          sta $ffdf
6082 ED81             (        gmmut.asm):00074          std ,x++
6084 8CFF00           (        gmmut.asm):00075          cmpx #$ff00
6087 26F1             (        gmmut.asm):00076          bne ram_loop
                      (        gmmut.asm):00077         
6089                  (        gmmut.asm):00078         init_common
6089 1705D1           (        gmmut.asm):00079          bsr turn_off_ints
                      (        gmmut.asm):00080         # turn on mmu, task 0, no const ram (for both gime and jr)
608C 86C4             (        gmmut.asm):00081          lda #$c4
608E B76008           (        gmmut.asm):00082          sta gime_0
6091 B7FF90           (        gmmut.asm):00083          sta $ff90
6094 8600             (        gmmut.asm):00084          lda #$0
6096 B76009           (        gmmut.asm):00085          sta gime_1
6099 B7FF91           (        gmmut.asm):00086          sta $ff91
                      (        gmmut.asm):00087         
609C                  (        gmmut.asm):00088         main_menu
609C 1705EE           (        gmmut.asm):00089          bsr clear_screen
609F 1705FF           (        gmmut.asm):00090          bsr strout
60A2 47494D45204D4D55 (        gmmut.asm):00091          fcc "GIME MMU TESTER\r"
     205445535445520D
60B2 324D422041574152 (        gmmut.asm):00092          fcc "2MB AWARE\r"
     450D
60BC 312920434F554E54 (        gmmut.asm):00093          fcc "1) COUNT AVAILABLE MMU BANKS\r"
     20415641494C4142
     4C45204D4D552042
     414E4B530D
60D9 2D29204D4D552053 (        gmmut.asm):00094          fcc "-) MMU SLOT REGISTER WIDTH\r"
     4C4F542052454749
     5354455220574944
     54480D
60F4 2D29205445535420 (        gmmut.asm):00095          fcc "-) TEST TASK SWITCHING\r"
     5441534B20535749
     544348494E470D
610B 2D29205445535420 (        gmmut.asm):00096          fcc "-) TEST CONSTANT RAM\r"
     434F4E5354414E54
     2052414D0D
6120 35292053484F5720 (        gmmut.asm):00097          fcc "5) SHOW VDG WRAP AROUND\r"
     5644472057524150
     2041524F554E440D
6138 3629204641535420 (        gmmut.asm):00098          fcn "6) FAST TIMER TEST\r"
     54494D4552205445
     53540D00
614C                  (        gmmut.asm):00099         init_loop
614C 5A               (        gmmut.asm):00100          decb
614D 1026000E         (        gmmut.asm):00101          bne mm_skip
6151 3404             (        gmmut.asm):00102          pshs b
6153 BE6004           (        gmmut.asm):00103          ldx text_address
6156 FC6006           (        gmmut.asm):00104          ldd text_position
6159 308B             (        gmmut.asm):00105          leax d,x
615B 6384             (        gmmut.asm):00106          com ,x
615D 3504             (        gmmut.asm):00107          puls b
615F                  (        gmmut.asm):00108         mm_skip
615F 1705F2           (        gmmut.asm):00109          bsr keyin
6162 8100             (        gmmut.asm):00110          cmpa #0
6164 27E6             (        gmmut.asm):00111          beq init_loop
6166 3402             (        gmmut.asm):00112          pshs a
6168 170570           (        gmmut.asm):00113          bsr chrout
616B 860D             (        gmmut.asm):00114          lda #$0d
616D 17056B           (        gmmut.asm):00115          bsr chrout
6170 E6E4             (        gmmut.asm):00116          ldb ,s
6172 C031             (        gmmut.asm):00117          subb #'1
6174 C105             (        gmmut.asm):00118          cmpb #5
6176 10220016         (        gmmut.asm):00119          bhi mm_done
617A 58               (        gmmut.asm):00120          lslb
617B 8E61B6           (        gmmut.asm):00121          ldx #jump_table
617E AD95             (        gmmut.asm):00122          jsr [b,x]
6180                  (        gmmut.asm):00123         done_after
6180 E6E4             (        gmmut.asm):00124          ldb ,s
6182 C031             (        gmmut.asm):00125          subb #'1
6184 C105             (        gmmut.asm):00126          cmpb #5
6186 10220006         (        gmmut.asm):00127          bhi mm_done
618A 58               (        gmmut.asm):00128          lslb
618B 8E61C2           (        gmmut.asm):00129          ldx #post_jump_table
618E AD95             (        gmmut.asm):00130          jsr [b,x]
6190                  (        gmmut.asm):00131         mm_done
6190 17050E           (        gmmut.asm):00132          bsr strout
6193 505245535320414E (        gmmut.asm):00133          fcn "PRESS ANY KEY TO CONTINUE\r"
     59204B455920544F
     20434F4E54494E55
     450D00
61AE 170592           (        gmmut.asm):00134          bsr wait
61B1 3504             (        gmmut.asm):00135          puls b
61B3 7E609C           (        gmmut.asm):00136          jmp main_menu
                      (        gmmut.asm):00137         
61B6                  (        gmmut.asm):00138         jump_table
61B6 61CF             (        gmmut.asm):00139          fdb count_mmu_blocks
61B8 61CE             (        gmmut.asm):00140          fdb return
61BA 61CE             (        gmmut.asm):00141          fdb return
61BC 61CE             (        gmmut.asm):00142          fdb return
61BE 62E8             (        gmmut.asm):00143          fdb vdg_wrap
61C0 64F2             (        gmmut.asm):00144          fdb timer_test
                      (        gmmut.asm):00145         
61C2                  (        gmmut.asm):00146         post_jump_table
61C2 620C             (        gmmut.asm):00147          fdb report_count_mmu
61C4 61CE             (        gmmut.asm):00148          fdb return
61C6 61CE             (        gmmut.asm):00149          fdb return
61C8 61CE             (        gmmut.asm):00150          fdb return
61CA 61CE             (        gmmut.asm):00151          fdb return
61CC 61CE             (        gmmut.asm):00152          fdb return
                      (        gmmut.asm):00153         
61CE                  (        gmmut.asm):00154         return
61CE 39               (        gmmut.asm):00155          rts
                      (        gmmut.asm):00156                 
61CF                  (        gmmut.asm):00157         count_mmu_blocks
61CF 1704A3           (        gmmut.asm):00158          bsr save_task_0
                      (        gmmut.asm):00159         # Put mmu block number in first byte of each block
                      (        gmmut.asm):00160         # and save value
61D2 5F               (        gmmut.asm):00161          clrb
61D3 8E6930           (        gmmut.asm):00162          ldx #buffer2
61D6                  (        gmmut.asm):00163         count_bocks_loop
61D6 F7FFA1           (        gmmut.asm):00164          stb $ffa1
61D9 B62000           (        gmmut.asm):00165          lda $2000
61DC A780             (        gmmut.asm):00166          sta ,x+
61DE F72000           (        gmmut.asm):00167          stb $2000
61E1 5C               (        gmmut.asm):00168          incb
61E2 26F2             (        gmmut.asm):00169          bne count_bocks_loop
                      (        gmmut.asm):00170         # fill buffer with what is
                      (        gmmut.asm):00171         # left in the first byte of each block
61E4 5F               (        gmmut.asm):00172          clrb
61E5 8E6830           (        gmmut.asm):00173          ldx #buffer
61E8                  (        gmmut.asm):00174         count_loop
61E8 F7FFA1           (        gmmut.asm):00175          stb $ffa1
61EB B62000           (        gmmut.asm):00176          lda $2000
61EE A780             (        gmmut.asm):00177          sta ,x+
61F0 5C               (        gmmut.asm):00178          incb
61F1 26F5             (        gmmut.asm):00179          bne count_loop
                      (        gmmut.asm):00180         # report first byte of buffer
61F3 B66830           (        gmmut.asm):00181          lda buffer
61F6 B76001           (        gmmut.asm):00182          sta out_param
                      (        gmmut.asm):00183         # fix up overwritten bytes
61F9 5F               (        gmmut.asm):00184          clrb
61FA 8E6930           (        gmmut.asm):00185          ldx #buffer2
61FD                  (        gmmut.asm):00186         restore_loop
61FD F7FFA1           (        gmmut.asm):00187          stb $ffa1
6200 A680             (        gmmut.asm):00188          lda ,x+
6202 B72000           (        gmmut.asm):00189          sta $2000
6205 5C               (        gmmut.asm):00190          incb
6206 26F5             (        gmmut.asm):00191          bne restore_loop
6208 170460           (        gmmut.asm):00192          bsr restore_task_0
620B 39               (        gmmut.asm):00193          rts 
                      (        gmmut.asm):00194         
620C                  (        gmmut.asm):00195         report_count_mmu
620C B66001           (        gmmut.asm):00196          lda out_param
620F 81F0             (        gmmut.asm):00197          cmpa #$f0
6211 10270032         (        gmmut.asm):00198          beq rc_128k
6215 81E0             (        gmmut.asm):00199          cmpa #$e0
6217 10270045         (        gmmut.asm):00200          beq rc_256k
621B 81C0             (        gmmut.asm):00201          cmpa #$c0
621D 10270058         (        gmmut.asm):00202          beq rc_512k
6221 8180             (        gmmut.asm):00203          cmpa #$80
6223 1027006B         (        gmmut.asm):00204          beq rc_1024k
6227 8100             (        gmmut.asm):00205          cmpa #$00
6229 1027007F         (        gmmut.asm):00206          beq rc_2048k
622D 170471           (        gmmut.asm):00207          bsr strout
6230 554E4B4E4F574E20 (        gmmut.asm):00208          fcn "UNKNOWN RAM AMOUNT\r"
     52414D20414D4F55
     4E540D00
6244 16007C           (        gmmut.asm):00209          bra rc_printTable
6247                  (        gmmut.asm):00210         rc_128k
6247 170457           (        gmmut.asm):00211          bsr strout
624A 3132384B202D2024 (        gmmut.asm):00212          fcn "128K - $30 TO $3F\r"
     333020544F202433
     460D00
625D 160063           (        gmmut.asm):00213          bra rc_printTable
6260                  (        gmmut.asm):00214         rc_256k
6260 17043E           (        gmmut.asm):00215          bsr strout
6263 3235364B202D2024 (        gmmut.asm):00216          fcn "256K - $20 TO $3F\r"
     323020544F202433
     460D00
6276 16004A           (        gmmut.asm):00217          bra rc_printTable
6279                  (        gmmut.asm):00218         rc_512k
6279 170425           (        gmmut.asm):00219          bsr strout
627C 3531324B202D2024 (        gmmut.asm):00220          fcn "512K - $00 TO $3F\r"
     303020544F202433
     460D00
628F 160031           (        gmmut.asm):00221          bra rc_printTable
6292                  (        gmmut.asm):00222         rc_1024k
6292 17040C           (        gmmut.asm):00223          bsr strout
6295 313032344B202D20 (        gmmut.asm):00224          fcn "1024K - $00 TO $7F\r"
     24303020544F2024
     37460D00
62A9 160017           (        gmmut.asm):00225          bra rc_printTable
62AC                  (        gmmut.asm):00226         rc_2048k
62AC 1703F2           (        gmmut.asm):00227          bsr strout
62AF 323034384B202D20 (        gmmut.asm):00228          fcn "2048K - $00 TO $FF\r"
     24303020544F2024
     46460D00
62C3                  (        gmmut.asm):00229         rc_printTable
62C3 1703DB           (        gmmut.asm):00230          bsr strout
62C6 4649525354204259 (        gmmut.asm):00231          fcn "FIRST BYTE OF TABLE: "
     5445204F46205441
     424C453A2000
62DC B66830           (        gmmut.asm):00232          lda buffer
62DF BD66B0           (        gmmut.asm):00233          jsr charout_hex
62E2 1703BC           (        gmmut.asm):00234          bsr strout
62E5 0D00             (        gmmut.asm):00235          fcn "\r"
62E7 39               (        gmmut.asm):00236          rts
                      (        gmmut.asm):00237          
62E8                  (        gmmut.asm):00238         vdg_wrap
62E8 17038A           (        gmmut.asm):00239          bsr save_task_0
                      (        gmmut.asm):00240         # explain what is going to happen
62EB 1703B3           (        gmmut.asm):00241          bsr strout
62EE 0D544845204E4558 (        gmmut.asm):00242          fcc "\rTHE NEXT SCREEN WILL BE A PMODE 4 "
     542053435245454E
     2057494C4C204245
     204120504D4F4445
     203420
6311 4752415048494353 (        gmmut.asm):00243          fcc "GRAPHICS SCREEN WITH THE START ADDRESS "
     2053435245454E20
     5749544820544845
     2053544152542041
     44445245535320
6338 53455420544F2024 (        gmmut.asm):00244          fcc "SET TO $FE00.\r"
     464530302E0D
6346 5448452057524150 (        gmmut.asm):00245          fcc "THE WRAP AROUND MMU PAGE WILL BE IDENTIFIED."
     2041524F554E4420
     4D4D552050414745
     2057494C4C204245
     204944454E544946
     4945442E
6372 0D50524553532041 (        gmmut.asm):00246          fcn "\rPRESS ANY KEY TO CONTINUE\r\r"
     4E59204B45592054
     4F20434F4E54494E
     55450D0D00
                      (        gmmut.asm):00247         
638F                  (        gmmut.asm):00248         vw_wait
638F 1703B1           (        gmmut.asm):00249          bsr wait
                      (        gmmut.asm):00250         
                      (        gmmut.asm):00251         # Set Sam to PMODE 4
6392 86F0             (        gmmut.asm):00252          lda #%11110000
6394 B7FFC5           (        gmmut.asm):00253          sta $ffc5
6397 B7FFC3           (        gmmut.asm):00254          sta $ffc3
639A B7FFC0           (        gmmut.asm):00255          sta $ffc0
639D B7FF22           (        gmmut.asm):00256          sta $ff22
                      (        gmmut.asm):00257         # set SAM to highest base address ($FE00)
                      (        gmmut.asm):00258         # for video
63A0 867F             (        gmmut.asm):00259          lda #%01111111
63A2 1702A1           (        gmmut.asm):00260          bsr store_a_into_sam_offset
                      (        gmmut.asm):00261         
63A5 863F             (        gmmut.asm):00262          lda #$3f
63A7 B7FFA1           (        gmmut.asm):00263          sta $ffa1
63AA 170118           (        gmmut.asm):00264          bsr write_string
63AD 2000             (        gmmut.asm):00265          fdb $2000
63AF 506167653A203366 (        gmmut.asm):00266          fcn "Page: 3f, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
63C7 1700FB           (        gmmut.asm):00267          bsr write_string
63CA 3E00             (        gmmut.asm):00268          fdb $3e00
63CC 506167653A203366 (        gmmut.asm):00269          fcn "Page: 3f, Offset: 1e00 "
     2C204F6666736574
     3A20316530302000
                      (        gmmut.asm):00270          
63E4 8607             (        gmmut.asm):00271          lda #$7
63E6 B7FFA1           (        gmmut.asm):00272          sta $ffa1
63E9 1700D9           (        gmmut.asm):00273          bsr write_string
63EC 2000             (        gmmut.asm):00274          fdb $2000
63EE 506167653A203037 (        gmmut.asm):00275          fcn "Page: 07, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
6406 1700BC           (        gmmut.asm):00276          bsr write_string
6409 3E00             (        gmmut.asm):00277          fdb $3e00
640B 506167653A203037 (        gmmut.asm):00278          fcn "Page: 07, Offset: 1e00 "
     2C204F6666736574
     3A20316530302000
                      (        gmmut.asm):00279         
6423 8638             (        gmmut.asm):00280          lda #$38
6425 B7FFA1           (        gmmut.asm):00281          sta $ffa1
6428 17009A           (        gmmut.asm):00282          bsr write_string
642B 2000             (        gmmut.asm):00283          fdb $2000
642D 506167653A203338 (        gmmut.asm):00284          fcn "Page: 38, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00285         
6445 8640             (        gmmut.asm):00286          lda #$40
6447 B7FFA1           (        gmmut.asm):00287          sta $ffa1
644A 170078           (        gmmut.asm):00288          bsr write_string
644D 2000             (        gmmut.asm):00289          fdb $2000
644F 506167653A203430 (        gmmut.asm):00290          fcn "Page: 40, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00291         
6467 8600             (        gmmut.asm):00292          lda #$00
6469 B7FFA1           (        gmmut.asm):00293          sta $ffa1
646C 170056           (        gmmut.asm):00294          bsr write_string
646F 2000             (        gmmut.asm):00295          fdb $2000
6471 506167653A203030 (        gmmut.asm):00296          fcn "Page: 00, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00297          
6489 8608             (        gmmut.asm):00298          lda #$8
648B B7FFA1           (        gmmut.asm):00299          sta $ffa1
648E 170034           (        gmmut.asm):00300          bsr write_string
6491 2000             (        gmmut.asm):00301          fdb $2000
6493 506167653A203038 (        gmmut.asm):00302          fcn "Page: 08, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00303         
64AB 170295           (        gmmut.asm):00304          bsr wait
                      (        gmmut.asm):00305         
64AE 1701BA           (        gmmut.asm):00306          bsr restore_task_0
                      (        gmmut.asm):00307         # Set Sam to text mode
64B1 8600             (        gmmut.asm):00308          lda #$00
64B3 B7FFC0           (        gmmut.asm):00309          sta $ffc0
64B6 B7FFC2           (        gmmut.asm):00310          sta $ffc2
64B9 B7FFC4           (        gmmut.asm):00311          sta $ffc4
64BC B7FF22           (        gmmut.asm):00312          sta $ff22
                      (        gmmut.asm):00313         # set SAM to text screen base address ($0400)
                      (        gmmut.asm):00314         # for video
64BF 8602             (        gmmut.asm):00315          lda #%00000010
64C1 170182           (        gmmut.asm):00316          bsr store_a_into_sam_offset
64C4 39               (        gmmut.asm):00317          rts
                      (        gmmut.asm):00318         
64C5                  (        gmmut.asm):00319         write_string
64C5 3540             (        gmmut.asm):00320          puls u
64C7 10AEC1           (        gmmut.asm):00321          ldy ,u++
64CA                  (        gmmut.asm):00322         write_string_loop
64CA A6C0             (        gmmut.asm):00323          lda ,u+
64CC 1027000B         (        gmmut.asm):00324          beq write_string_done
64D0 8020             (        gmmut.asm):00325          suba #32
64D2 170008           (        gmmut.asm):00326          bsr write_character
64D5 31A9FF01         (        gmmut.asm):00327          leay (-8*32)+1,y
64D9 20EF             (        gmmut.asm):00328          bra write_string_loop
64DB                  (        gmmut.asm):00329         write_string_done
64DB 1F35             (        gmmut.asm):00330          tfr u,pc
                      (        gmmut.asm):00331         
64DD                  (        gmmut.asm):00332         write_character
64DD 8E6A30           (        gmmut.asm):00333          ldx #bitmap_font
64E0 C608             (        gmmut.asm):00334          ldb #8
64E2 3D               (        gmmut.asm):00335          mul
64E3 308B             (        gmmut.asm):00336          leax d,x
64E5 C608             (        gmmut.asm):00337          ldb #8
64E7                  (        gmmut.asm):00338         write_character_loop
64E7 A680             (        gmmut.asm):00339          lda ,x+
64E9 A7A4             (        gmmut.asm):00340          sta ,y
64EB 31A820           (        gmmut.asm):00341          leay 32,y
64EE 5A               (        gmmut.asm):00342          decb
64EF 26F6             (        gmmut.asm):00343          bne write_character_loop
64F1 39               (        gmmut.asm):00344          rts
                      (        gmmut.asm):00345         
64F2                  (        gmmut.asm):00346         timer_test
                      (        gmmut.asm):00347         # save palette
64F2 B6FFBD           (        gmmut.asm):00348          lda $ffbd
64F5 843F             (        gmmut.asm):00349          anda #%00111111
64F7 B765F3           (        gmmut.asm):00350          sta save_palette
                      (        gmmut.asm):00351          
                      (        gmmut.asm):00352         # turn off all pia interrupts
64FA B6FF01           (        gmmut.asm):00353          lda $ff01
64FD B765F1           (        gmmut.asm):00354          sta save_pia0a
6500 843E             (        gmmut.asm):00355          anda #%00111110
6502 B7FF01           (        gmmut.asm):00356          sta $ff01
6505 B6FF00           (        gmmut.asm):00357          lda $ff00
                      (        gmmut.asm):00358          
6508 B6FF03           (        gmmut.asm):00359          lda $ff03
650B B765F2           (        gmmut.asm):00360          sta save_pia0b
650E 843E             (        gmmut.asm):00361          anda #%00111110
6510 B7FF03           (        gmmut.asm):00362          sta $ff03
6513 B6FF02           (        gmmut.asm):00363          lda $ff02
                      (        gmmut.asm):00364          
                      (        gmmut.asm):00365         # install both isr
6516 867E             (        gmmut.asm):00366          lda #$7e # JMP instruction extended
6518 B7FEF4           (        gmmut.asm):00367          sta $fef4
651B B7FEF7           (        gmmut.asm):00368          sta $fef7
651E CC661C           (        gmmut.asm):00369          ldd #tt_isr_firq
6521 FDFEF5           (        gmmut.asm):00370          std $fef5
6524 CC6631           (        gmmut.asm):00371          ldd #tt_isr_irq
6527 FDFEF8           (        gmmut.asm):00372          std $fef8
                      (        gmmut.asm):00373         
                      (        gmmut.asm):00374         # setup timer
652A 8600             (        gmmut.asm):00375          lda #0 # lsb of timer
652C B7FF95           (        gmmut.asm):00376          sta $ff95
652F 8600             (        gmmut.asm):00377          lda #0 # msb of timer
6531 B7FF94           (        gmmut.asm):00378          sta $ff94
6534 8620             (        gmmut.asm):00379          lda #%00100000 # firq for timer
6536 B7FF93           (        gmmut.asm):00380          sta $ff93
6539 8608             (        gmmut.asm):00381          lda #%00001000 # irq for vertical border
653B B7FF92           (        gmmut.asm):00382          sta $ff92
653E B6FF92           (        gmmut.asm):00383          lda $ff92
6541 B6FF93           (        gmmut.asm):00384          lda $ff93
                      (        gmmut.asm):00385         
                      (        gmmut.asm):00386         # set timer source
6544 B66009           (        gmmut.asm):00387          lda gime_1
6547 8A00             (        gmmut.asm):00388          ora #%00000000 # slow - 15khz
6549 B76009           (        gmmut.asm):00389          sta gime_1
654C B7FF91           (        gmmut.asm):00390          sta $ff91
                      (        gmmut.asm):00391          
                      (        gmmut.asm):00392         # turn on gime interrupts
654F B66008           (        gmmut.asm):00393          lda gime_0
6552 8A30             (        gmmut.asm):00394          ora #%00110000
6554 B76008           (        gmmut.asm):00395          sta gime_0
6557 B7FF90           (        gmmut.asm):00396          sta $ff90
                      (        gmmut.asm):00397         
655A 170130           (        gmmut.asm):00398          bsr clear_screen
655D CCE6E6           (        gmmut.asm):00399          ldd #$e6e6
6560 8E041F           (        gmmut.asm):00400          ldx #$400+31
6563                  (        gmmut.asm):00401         checker_loop
6563 ED84             (        gmmut.asm):00402          std ,x
6565 308820           (        gmmut.asm):00403          leax 32,x
6568 8C061F           (        gmmut.asm):00404          cmpx #$400+31+(32*16)
656B 26F6             (        gmmut.asm):00405          bne checker_loop
                      (        gmmut.asm):00406          
656D 8E65E1           (        gmmut.asm):00407          ldx #hex
                      (        gmmut.asm):00408         
6570 1700ED           (        gmmut.asm):00409          bsr turn_on_ints
                      (        gmmut.asm):00410         
6573                  (        gmmut.asm):00411         tt_loop
6573 108E0400         (        gmmut.asm):00412          ldy #$400
6577 FC662F           (        gmmut.asm):00413          ldd timer_value
657A 840F             (        gmmut.asm):00414          anda #$0f
657C A686             (        gmmut.asm):00415          lda a,x
657E A7A0             (        gmmut.asm):00416          sta ,y+
6580 1F98             (        gmmut.asm):00417          tfr b,a
6582 44               (        gmmut.asm):00418          lsra
6583 44               (        gmmut.asm):00419          lsra
6584 44               (        gmmut.asm):00420          lsra
6585 44               (        gmmut.asm):00421          lsra
6586 A686             (        gmmut.asm):00422          lda a,x
6588 A7A0             (        gmmut.asm):00423          sta ,y+
658A 1F98             (        gmmut.asm):00424          tfr b,a
658C 840F             (        gmmut.asm):00425          anda #$0f
658E A686             (        gmmut.asm):00426          lda a,x
6590 A7A1             (        gmmut.asm):00427          sta ,y++
                      (        gmmut.asm):00428          
6592 1701BF           (        gmmut.asm):00429          bsr keyin
6595 8153             (        gmmut.asm):00430          cmpa #'S
6597 1027001A         (        gmmut.asm):00431          beq tt_inc10
659B 8141             (        gmmut.asm):00432          cmpa #'A
659D 1027001F         (        gmmut.asm):00433          beq tt_dec10
65A1 8158             (        gmmut.asm):00434          cmpa #'X
65A3 10270024         (        gmmut.asm):00435          beq tt_inc1
65A7 815A             (        gmmut.asm):00436          cmpa #'Z
65A9 10270029         (        gmmut.asm):00437          beq tt_dec1
65AD 8151             (        gmmut.asm):00438          cmpa #'Q
65AF 10270041         (        gmmut.asm):00439          beq tt_cleanup
65B3 20BE             (        gmmut.asm):00440          bra tt_loop
65B5                  (        gmmut.asm):00441         tt_inc10
65B5 FC662F           (        gmmut.asm):00442          ldd timer_value
65B8 C3000A           (        gmmut.asm):00443          addd #10
65BB FD662F           (        gmmut.asm):00444          std timer_value
65BE 20B3             (        gmmut.asm):00445          bra tt_loop
65C0                  (        gmmut.asm):00446         tt_dec10
65C0 FC662F           (        gmmut.asm):00447          ldd timer_value
65C3 83000A           (        gmmut.asm):00448          subd #10
65C6 FD662F           (        gmmut.asm):00449          std timer_value
65C9 20A8             (        gmmut.asm):00450          bra tt_loop
65CB                  (        gmmut.asm):00451         tt_inc1
65CB FC662F           (        gmmut.asm):00452          ldd timer_value
65CE C30001           (        gmmut.asm):00453          addd #1
65D1 FD662F           (        gmmut.asm):00454          std timer_value
65D4 209D             (        gmmut.asm):00455          bra tt_loop
65D6                  (        gmmut.asm):00456         tt_dec1
65D6 FC662F           (        gmmut.asm):00457          ldd timer_value
65D9 830001           (        gmmut.asm):00458          subd #1
65DC FD662F           (        gmmut.asm):00459          std timer_value
65DF 2092             (        gmmut.asm):00460          bra tt_loop
65E1 3031323334353636 (        gmmut.asm):00461         hex fcb 48,49,50,51,52,53,54,54,56,57,1,2,3,4,5,6
     3839010203040506
65F1                  (        gmmut.asm):00462         save_pia0a rmb 1
65F2                  (        gmmut.asm):00463         save_pia0b rmb 1
65F3                  (        gmmut.asm):00464         save_palette rmb 1
65F4                  (        gmmut.asm):00465         tt_cleanup
65F4 170066           (        gmmut.asm):00466          bsr turn_off_ints
                      (        gmmut.asm):00467         # turn off gime interrupts
65F7 B66008           (        gmmut.asm):00468          lda gime_0
65FA 84CF             (        gmmut.asm):00469          anda #%11001111
65FC B76008           (        gmmut.asm):00470          sta gime_0
65FF B7FF90           (        gmmut.asm):00471          sta $ff90
                      (        gmmut.asm):00472         # turn off interrupt flags
6602 4F               (        gmmut.asm):00473          clra
6603 B7FF93           (        gmmut.asm):00474          sta $ff93
6606 B7FF92           (        gmmut.asm):00475          sta $ff92
                      (        gmmut.asm):00476         # restore PIA
6609 B665F1           (        gmmut.asm):00477          lda save_pia0a
660C B7FF01           (        gmmut.asm):00478          sta $ff01
660F B665F2           (        gmmut.asm):00479          lda save_pia0b
6612 B7FF03           (        gmmut.asm):00480          sta $ff03
                      (        gmmut.asm):00481         # restore palette
6615 B665F3           (        gmmut.asm):00482          lda save_palette
6618 B7FFBD           (        gmmut.asm):00483          sta $ffbd
661B 39               (        gmmut.asm):00484          rts
                      (        gmmut.asm):00485          
661C                  (        gmmut.asm):00486         tt_isr_firq
661C 3402             (        gmmut.asm):00487          pshs a
661E 8600             (        gmmut.asm):00488          lda #0 
6620 B7FFBD           (        gmmut.asm):00489          sta $ffbd
6623 B7FF95           (        gmmut.asm):00490          sta $ff95 # zero timer count down
6626 B7FF94           (        gmmut.asm):00491          sta $ff94
6629 B6FF93           (        gmmut.asm):00492          lda $ff93
662C 3502             (        gmmut.asm):00493          puls a
                      (        gmmut.asm):00494         #  inc $401
662E 3B               (        gmmut.asm):00495          rti
                      (        gmmut.asm):00496         
662F 0080             (        gmmut.asm):00497         timer_value fdb $0080
6631                  (        gmmut.asm):00498         tt_isr_irq
6631 86FF             (        gmmut.asm):00499          lda #$ff
6633 B7FFBD           (        gmmut.asm):00500          sta $ffbd
6636 FC662F           (        gmmut.asm):00501          ldd timer_value # reset timer count down
6639 F7FF95           (        gmmut.asm):00502          stb $ff95
663C B7FF94           (        gmmut.asm):00503          sta $ff94
                      (        gmmut.asm):00504         #  inc $402
663F B6FF92           (        gmmut.asm):00505          lda $ff92 # clear the irq interrupt
6642 B6FF93           (        gmmut.asm):00506          lda $ff93 # Also clear the firq interrupt
6645 3B               (        gmmut.asm):00507          rti
                      (        gmmut.asm):00508          
                      (        gmmut.asm):00509         #
                      (        gmmut.asm):00510         # subroutine
                      (        gmmut.asm):00511         # Store reg a into sam video offset register
                      (        gmmut.asm):00512         #
6646                  (        gmmut.asm):00513         store_a_into_sam_offset
6646 C607             (        gmmut.asm):00514          ldb #7
6648 8EFFC6           (        gmmut.asm):00515          ldx #$ffc6
664B                  (        gmmut.asm):00516         loop_store_a
664B 46               (        gmmut.asm):00517          rora
664C 10240007         (        gmmut.asm):00518          bcc set_clear
6650                  (        gmmut.asm):00519         set_set
6650 3001             (        gmmut.asm):00520          leax 1,x
6652 A780             (        gmmut.asm):00521          sta ,x+
6654 160002           (        gmmut.asm):00522          bra set_done
6657                  (        gmmut.asm):00523         set_clear
6657 A781             (        gmmut.asm):00524          sta ,x++
6659                  (        gmmut.asm):00525         set_done 
6659 5A               (        gmmut.asm):00526          decb
665A 26EF             (        gmmut.asm):00527          bne loop_store_a
665C 39               (        gmmut.asm):00528          rts
                      (        gmmut.asm):00529         
                      (        gmmut.asm):00530         #
                      (        gmmut.asm):00531         # subroutine
                      (        gmmut.asm):00532         # turn off all interrupts
                      (        gmmut.asm):00533         #
665D                  (        gmmut.asm):00534         turn_off_ints
665D 1A50             (        gmmut.asm):00535          orcc #$50
665F 39               (        gmmut.asm):00536          rts
                      (        gmmut.asm):00537         
                      (        gmmut.asm):00538         #
                      (        gmmut.asm):00539         # subroutine
                      (        gmmut.asm):00540         # turn on all interrupts
                      (        gmmut.asm):00541         #
6660                  (        gmmut.asm):00542         turn_on_ints
6660 1CAF             (        gmmut.asm):00543          andcc #$af
6662 39               (        gmmut.asm):00544          rts
                      (        gmmut.asm):00545          
6663                  (        gmmut.asm):00546         saved_task rmb 8
                      (        gmmut.asm):00547          
666B                  (        gmmut.asm):00548         restore_task_0
                      (        gmmut.asm):00549         #
                      (        gmmut.asm):00550         # subroutine
                      (        gmmut.asm):00551         # restore mmu regs at ffa0
                      (        gmmut.asm):00552         #
666B 108E6663         (        gmmut.asm):00553          ldy #saved_task
666F 8EFFA0           (        gmmut.asm):00554          ldx #$ffa0
6672 160007           (        gmmut.asm):00555          bra copy_task
                      (        gmmut.asm):00556          
6675                  (        gmmut.asm):00557         save_task_0
                      (        gmmut.asm):00558         #
                      (        gmmut.asm):00559         # subroutine
                      (        gmmut.asm):00560         # save mmu regs at ffa0
                      (        gmmut.asm):00561         #
6675 108EFFA0         (        gmmut.asm):00562          ldy #$ffa0
6679 8E6663           (        gmmut.asm):00563          ldx #saved_task
667C                  (        gmmut.asm):00564         copy_task
667C ECA1             (        gmmut.asm):00565          ldd ,y++
667E ED81             (        gmmut.asm):00566          std ,x++
6680 ECA1             (        gmmut.asm):00567          ldd ,y++
6682 ED81             (        gmmut.asm):00568          std ,x++
6684 ECA1             (        gmmut.asm):00569          ldd ,y++
6686 ED81             (        gmmut.asm):00570          std ,x++
6688 ECA1             (        gmmut.asm):00571          ldd ,y++
668A ED81             (        gmmut.asm):00572          std ,x++
668C 39               (        gmmut.asm):00573          rts
                      (        gmmut.asm):00574         
668D                  (        gmmut.asm):00575         clear_screen
                      (        gmmut.asm):00576         #
                      (        gmmut.asm):00577         # subroutine
                      (        gmmut.asm):00578         # clear the text screen
                      (        gmmut.asm):00579         #
668D 8E0400           (        gmmut.asm):00580          ldx #$0400
6690 CC6060           (        gmmut.asm):00581          ldd #$6060
6693                  (        gmmut.asm):00582         cs_loop
6693 ED81             (        gmmut.asm):00583          std ,x++
6695 8C0600           (        gmmut.asm):00584          cmpx #$600
6698 26F9             (        gmmut.asm):00585          bne cs_loop
669A 7F6006           (        gmmut.asm):00586          clr text_position
669D 7F6007           (        gmmut.asm):00587          clr text_position+1
66A0 39               (        gmmut.asm):00588          rts
                      (        gmmut.asm):00589          
66A1                  (        gmmut.asm):00590         strout
                      (        gmmut.asm):00591         #
                      (        gmmut.asm):00592         # subroutine
                      (        gmmut.asm):00593         # Output string to screen
                      (        gmmut.asm):00594         #
66A1 3540             (        gmmut.asm):00595          puls u
66A3                  (        gmmut.asm):00596         so_loop
66A3 A6C0             (        gmmut.asm):00597          lda ,u+
66A5 10270005         (        gmmut.asm):00598          beq so_done
66A9 BD66DB           (        gmmut.asm):00599          jsr chrout
66AC 20F5             (        gmmut.asm):00600          bra so_loop
66AE                  (        gmmut.asm):00601         so_done
66AE 1F35             (        gmmut.asm):00602          tfr u,pc
                      (        gmmut.asm):00603         
66B0                  (        gmmut.asm):00604         charout_hex
66B0 3432             (        gmmut.asm):00605          pshs a,y,x
66B2 108E66CB         (        gmmut.asm):00606          ldy #hex_ascii
66B6 44               (        gmmut.asm):00607          lsra
66B7 44               (        gmmut.asm):00608          lsra
66B8 44               (        gmmut.asm):00609          lsra
66B9 44               (        gmmut.asm):00610          lsra
66BA A6A6             (        gmmut.asm):00611          lda a,y
66BC BD66DB           (        gmmut.asm):00612          jsr chrout
66BF A6E4             (        gmmut.asm):00613          lda ,s
66C1 840F             (        gmmut.asm):00614          anda #$0f
66C3 A6A6             (        gmmut.asm):00615          lda a,y
66C5 BD66DB           (        gmmut.asm):00616          jsr chrout
66C8 3532             (        gmmut.asm):00617          puls a,y,x
66CA 39               (        gmmut.asm):00618          rts
                      (        gmmut.asm):00619         
66CB 3031323334353637 (        gmmut.asm):00620         hex_ascii fcc "0123456789ABCDEF"
     3839414243444546
                      (        gmmut.asm):00621         
66DB                  (        gmmut.asm):00622         chrout
                      (        gmmut.asm):00623         #
                      (        gmmut.asm):00624         # subroutine
                      (        gmmut.asm):00625         # output to text screen
                      (        gmmut.asm):00626         #
66DB 810D             (        gmmut.asm):00627          cmpa #$0d
66DD 1027002D         (        gmmut.asm):00628          beq co_carrage_return
66E1 8160             (        gmmut.asm):00629          cmpa #$60
66E3 102C000B         (        gmmut.asm):00630          bge co_sub60
66E7 8140             (        gmmut.asm):00631          cmpa #$40
66E9 102C0007         (        gmmut.asm):00632          bge co_out
66ED                  (        gmmut.asm):00633         co_add40
66ED 8B40             (        gmmut.asm):00634          adda #$40
66EF 160002           (        gmmut.asm):00635          bra co_out
66F2                  (        gmmut.asm):00636         co_sub60
66F2 8060             (        gmmut.asm):00637          suba #$60
66F4                  (        gmmut.asm):00638         co_out
66F4 3402             (        gmmut.asm):00639          pshs a
66F6 BE6004           (        gmmut.asm):00640          ldx text_address
66F9 FC6006           (        gmmut.asm):00641          ldd text_position
66FC 308B             (        gmmut.asm):00642          leax d,x
66FE C30001           (        gmmut.asm):00643          addd #1
6701 FD6006           (        gmmut.asm):00644          std text_position
6704 3502             (        gmmut.asm):00645          puls a
6706 A784             (        gmmut.asm):00646          sta ,x
6708 FC6006           (        gmmut.asm):00647          ldd text_position
670B 16000B           (        gmmut.asm):00648          bra co_check_scroll
670E                  (        gmmut.asm):00649         co_carrage_return
670E FC6006           (        gmmut.asm):00650          ldd text_position
6711 C30020           (        gmmut.asm):00651          addd #32
6714 C4E0             (        gmmut.asm):00652          andb #%11100000
6716 FD6006           (        gmmut.asm):00653          std text_position
6719                  (        gmmut.asm):00654         co_check_scroll
6719 10830200         (        gmmut.asm):00655          cmpd #512
671D 10270001         (        gmmut.asm):00656          beq co_scroll
6721 39               (        gmmut.asm):00657          rts
6722                  (        gmmut.asm):00658         co_scroll
6722 BE6004           (        gmmut.asm):00659          ldx text_address
6725                  (        gmmut.asm):00660         co_scroll_loop
6725 EC8820           (        gmmut.asm):00661          ldd 32,x
6728 ED81             (        gmmut.asm):00662          std ,x++
672A 8C05E0           (        gmmut.asm):00663          cmpx #$0600-32
672D 26F6             (        gmmut.asm):00664          bne co_scroll_loop
672F CC6060           (        gmmut.asm):00665          ldd #$6060
6732                  (        gmmut.asm):00666         co_clear_last_line_loop
6732 ED81             (        gmmut.asm):00667          std ,x++
6734 8C0600           (        gmmut.asm):00668          cmpx #$0600
6737 26F9             (        gmmut.asm):00669          bne co_clear_last_line_loop
6739 FC6006           (        gmmut.asm):00670          ldd text_position
673C 830020           (        gmmut.asm):00671          subd #32
673F FD6006           (        gmmut.asm):00672          std text_position
6742 39               (        gmmut.asm):00673          rts
                      (        gmmut.asm):00674         
6743                  (        gmmut.asm):00675         wait
                      (        gmmut.asm):00676         #
                      (        gmmut.asm):00677         # subroutine
                      (        gmmut.asm):00678         #
6743                  (        gmmut.asm):00679         wait_loop
6743 BD6754           (        gmmut.asm):00680          jsr keyin
6746 8100             (        gmmut.asm):00681          cmpa #0
6748 27F9             (        gmmut.asm):00682          beq wait_loop
674A 39               (        gmmut.asm):00683          rts
                      (        gmmut.asm):00684          
     FF00             (        gmmut.asm):00685         pia0 equ $ff00
674B                  (        gmmut.asm):00686         keybuf rmb 8 keyboard memory buffer
6753                  (        gmmut.asm):00687         casflg rmb 1 upper case/lower case flag: $ff=upper, 0=lower
                      (        gmmut.asm):00688         
                      (        gmmut.asm):00689         # la1c1 clr pia0+2 clear column strobe
                      (        gmmut.asm):00690         #  lda pia0 read key rows
                      (        gmmut.asm):00691         #  coma complement row data
                      (        gmmut.asm):00692         #  asla shift off joystick data
                      (        gmmut.asm):00693         #  beq la244 return if no keys or fire buttons down
                      (        gmmut.asm):00694         #
                      (        gmmut.asm):00695         # subroutine
                      (        gmmut.asm):00696         # this routine gets a keystroke from the keyboard if a key
                      (        gmmut.asm):00697         # is down. it returns zero true if there was no key down.
                      (        gmmut.asm):00698         #
6754 3454             (        gmmut.asm):00699         keyin pshs u,x,b save registers
6756 CEFF00           (        gmmut.asm):00700          ldu #pia0 point u to pia0
6759 8E674B           (        gmmut.asm):00701          ldx #keybuf point x to keyboard memory buffer
675C 4F               (        gmmut.asm):00702          clra * clear carry flag, set column counter (acca)
675D 4A               (        gmmut.asm):00703          deca * to $ff
675E 3412             (        gmmut.asm):00704          pshs x,a save column ctr & 2 blank (x reg) on stack
6760 A742             (        gmmut.asm):00705          sta 2,u initialize column strobe to $ff
6762 6942             (        gmmut.asm):00706         la1d9 rol 2,u * rotate column strobe data left 1 bit, carry
6764 10240050         (        gmmut.asm):00707          bcc la220 * into bit 0 - branch if 8 shifts done
6768 6CE4             (        gmmut.asm):00708          inc ,s increment column counter
676A 170069           (        gmmut.asm):00709          bsr la23a read keyboard row data
676D A761             (        gmmut.asm):00710          sta 1,s temp store key data
676F A884             (        gmmut.asm):00711          eora ,x set any bit where a key has moved
6771 A484             (        gmmut.asm):00712          anda ,x acca=0 if no new key down, <70 if key was released
6773 E661             (        gmmut.asm):00713          ldb 1,s get new key data
6775 E780             (        gmmut.asm):00714          stb ,x+ store it in key memory
6777 4D               (        gmmut.asm):00715          tsta was a new key down?
6778 27E8             (        gmmut.asm):00716          beq la1d9 no-check another column
677A E642             (        gmmut.asm):00717          ldb 2,u * get column strobe data and
677C E762             (        gmmut.asm):00718          stb 2,s * temp store it on the stack
                      (        gmmut.asm):00719         * this routine converts the key depression into a number
                      (        gmmut.asm):00720         * from 0-50 in accb corresponding to the key that was down
677E C6F8             (        gmmut.asm):00721          ldb #$f8 to make sure accb=0 after first addb #8
6780 CB08             (        gmmut.asm):00722         la1f4 addb #$08 add 8 for each row of keyboard
6782 44               (        gmmut.asm):00723          lsra acca has the row number of this key - add 8 for each row
6783 24FB             (        gmmut.asm):00724          bcc la1f4 go on until a zero appears in the carry flag
6785 EBE4             (        gmmut.asm):00725          addb ,s add in the column number
                      (        gmmut.asm):00726         * now convert the value in accb into ascii
6787 10270058         (        gmmut.asm):00727          beq la245
678B C11A             (        gmmut.asm):00728          cmpb #26 the ‘at sign’ key was down was it a letter?
678D 10220054         (        gmmut.asm):00729          bhi la247 no
6791 CA40             (        gmmut.asm):00730          orb #$40 yes, convert to upper case ascii
6793 170034           (        gmmut.asm):00731          bsr la22e check for the shift key
6796 BA6753           (        gmmut.asm):00732          ora casflg * ‘or’ in the case flag & branch if in upper
6799 10260002         (        gmmut.asm):00733          bne la20c * case mode or shift key down
679D CA20             (        gmmut.asm):00734          orb #$20 convert to lower case
679F E7E4             (        gmmut.asm):00735         la20c stb ,s temp store ascii value
67A1 8E045E           (        gmmut.asm):00736          ldx #$45e get keyboard debounce
67A4 17006D           (        gmmut.asm):00737          bsr la1ae
67A7 C6FF             (        gmmut.asm):00738          ldb #$ff set column strobe to all ones (no
67A9 170028           (        gmmut.asm):00739          bsr la238 strobe) and read keyboard
67AC 4C               (        gmmut.asm):00740          inca = incr row data, acca now 0 if no joystick
67AD 10260007         (        gmmut.asm):00741          bne la220 = button down. branch if joystick button down
67B1 E662             (        gmmut.asm):00742         la21a ldb 2,s get column strobe data
67B3 17001E           (        gmmut.asm):00743          bsr la238 read a key
67B6 A161             (        gmmut.asm):00744          cmpa 1,s is it the same key as before debounce?
67B8 3512             (        gmmut.asm):00745         la220 puls a,x remove temp slots from the stack and recover
                      (        gmmut.asm):00746         * the ascii value of the key
67BA 10260009         (        gmmut.asm):00747          bne la22b not the same key or joystick button
67BE 8112             (        gmmut.asm):00748          cmpa #$12 is shift zero down?
67C0 10260004         (        gmmut.asm):00749          bne la22c no
67C4 736753           (        gmmut.asm):00750          com casflg yes, toggle upper case/lower case flag
67C7 4F               (        gmmut.asm):00751         la22b clra set zero flag to indicate no new key down
67C8 35D4             (        gmmut.asm):00752         la22c puls b,x,u,pc restore registers
                      (        gmmut.asm):00753         
                      (        gmmut.asm):00754         * test for the shift key
67CA 867F             (        gmmut.asm):00755         la22e lda #$7f column strobe
67CC A742             (        gmmut.asm):00756          sta 2,u store to pla
67CE A6C4             (        gmmut.asm):00757          lda ,u read key data
67D0 43               (        gmmut.asm):00758          coma *
67D1 8440             (        gmmut.asm):00759          anda #$40 * set bit 6 if shift key down
67D3 39               (        gmmut.asm):00760          rts return
                      (        gmmut.asm):00761         
                      (        gmmut.asm):00762         * read the keyboard
67D4 E742             (        gmmut.asm):00763         la238 stb 2,u save new column strobe value
67D6 A6C4             (        gmmut.asm):00764         la23a lda ,u read pia0, port a to see if key is down
                      (        gmmut.asm):00765         * a bit will be zero if one is
67D8 8A80             (        gmmut.asm):00766          ora #$80 mask off the joystick comparator input
67DA 6D42             (        gmmut.asm):00767          tst $02,u are we strobing column 7?
67DC 102B0002         (        gmmut.asm):00768          bmi la244 no
67E0 8AC0             (        gmmut.asm):00769          ora #$c0 yes, force row 6 to be high - this will cause
                      (        gmmut.asm):00770         * the shift key to be ignored
67E2 39               (        gmmut.asm):00771         la244 rts return
                      (        gmmut.asm):00772         
67E3 C633             (        gmmut.asm):00773         la245 ldb #51 code for ‘at sign’
67E5 8E67E6           (        gmmut.asm):00774         la247 ldx #contab-$36 point x to control code table
67E8 C121             (        gmmut.asm):00775          cmpb #33 key number <33?
67EA 1025001A         (        gmmut.asm):00776          blo la264 yes (arrow keys, space bar, zero)
67EE 8E67C8           (        gmmut.asm):00777          ldx #contab-$54 point x to middle of control table
67F1 C130             (        gmmut.asm):00778          cmpb #48 key number >48?
67F3 10240011         (        gmmut.asm):00779          bhs la264 yes (enter,clear,break,at sign)
67F7 8DD1             (        gmmut.asm):00780          bsr la22e check shift key (acca will contain status)
67F9 C12B             (        gmmut.asm):00781          cmpb #43 is key a number, colon or semicolon?
67FB 10230002         (        gmmut.asm):00782          bls la25d yes
67FF 8840             (        gmmut.asm):00783          eora #$40 toggle bit 6 of acca which contains the shift data
                      (        gmmut.asm):00784         * only for slash,hyphen,period,comma
6801 4D               (        gmmut.asm):00785         la25d tsta shift key down?
6802 269B             (        gmmut.asm):00786          bne la20c yes
6804 CB10             (        gmmut.asm):00787          addb #$10 no, add in ascii offset correction
6806 2097             (        gmmut.asm):00788          bra la20c go check for debounce
6808 58               (        gmmut.asm):00789         la264 aslb mult accb by 2 - there are 2 entries in control
                      (        gmmut.asm):00790         * table for each key - one shifted, one not
6809 8DBF             (        gmmut.asm):00791          bsr la22e check shift key
680B 10270001         (        gmmut.asm):00792          beq la26a not down
680F 5C               (        gmmut.asm):00793          incb add one to get the shifted value
6810 E685             (        gmmut.asm):00794         la26a ldb b,x get ascii code from control table
6812 208B             (        gmmut.asm):00795          bra la20c go check debounce
6814 7E6817           (        gmmut.asm):00796         la1ae jmp la7d3 delay while x decrements to zero
                      (        gmmut.asm):00797         * delay while decrementing x to zero
6817 301F             (        gmmut.asm):00798         la7d3 leax -1,x decrement x
6819 26FC             (        gmmut.asm):00799          bne la7d3 branch if not zero
681B 39               (        gmmut.asm):00800          rts
                      (        gmmut.asm):00801         *
                      (        gmmut.asm):00802         *
                      (        gmmut.asm):00803         * control table unshifted, shifted values
681C 5E5F             (        gmmut.asm):00804         contab fcb $5e,$5f up arrow
681E 0A5B             (        gmmut.asm):00805          fcb $0a,$5b down arrow
6820 0815             (        gmmut.asm):00806          fcb $08,$15 right arrow
6822 095D             (        gmmut.asm):00807          fcb $09,$5d left arrow
6824 2020             (        gmmut.asm):00808          fcb $20,$20 space bar
6826 3012             (        gmmut.asm):00809          fcb $30,$12 zero
6828 0D0D             (        gmmut.asm):00810          fcb $0d,$0d enter
682A 0C5C             (        gmmut.asm):00811          fcb $0c,$5c clear
682C 0303             (        gmmut.asm):00812          fcb $03,$03 break
682E 4013             (        gmmut.asm):00813          fcb $40,$13 at sign
                      (        gmmut.asm):00814         
                      (        gmmut.asm):00815         
                      (        gmmut.asm):00816         
                      (        gmmut.asm):00817         
6830                  (        gmmut.asm):00818         buffer rmb 256
6930                  (        gmmut.asm):00819         buffer2 rmb 256
6A30                  (        gmmut.asm):00820         bitmap_font
6A30 FFFFFFFFFFFFFFFF (        gmmut.asm):00821          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ( )
6A38 E7C3C3E7E7FFE7FF (        gmmut.asm):00822          fcb $e7,$c3,$c3,$e7,$e7,$ff,$e7,$ff (!)
6A40 9393FFFFFFFFFFFF (        gmmut.asm):00823          fcb $93,$93,$ff,$ff,$ff,$ff,$ff,$ff (")
6A48 93930193019393FF (        gmmut.asm):00824          fcb $93,$93,$01,$93,$01,$93,$93,$ff (#)
6A50 CF833F87F307CFFF (        gmmut.asm):00825          fcb $cf,$83,$3f,$87,$f3,$07,$cf,$ff ($)
6A58 FF3933E7CF9939FF (        gmmut.asm):00826          fcb $ff,$39,$33,$e7,$cf,$99,$39,$ff (%)
6A60 C793C789233389FF (        gmmut.asm):00827          fcb $c7,$93,$c7,$89,$23,$33,$89,$ff (&)
6A68 9F9F3FFFFFFFFFFF (        gmmut.asm):00828          fcb $9f,$9f,$3f,$ff,$ff,$ff,$ff,$ff (')
6A70 E7CF9F9F9FCFE7FF (        gmmut.asm):00829          fcb $e7,$cf,$9f,$9f,$9f,$cf,$e7,$ff (()
6A78 9FCFE7E7E7CF9FFF (        gmmut.asm):00830          fcb $9f,$cf,$e7,$e7,$e7,$cf,$9f,$ff ())
6A80 FF99C300C399FFFF (        gmmut.asm):00831          fcb $ff,$99,$c3,$00,$c3,$99,$ff,$ff (*)
6A88 FFCFCF03CFCFFFFF (        gmmut.asm):00832          fcb $ff,$cf,$cf,$03,$cf,$cf,$ff,$ff (+)
6A90 FFFFFFFFFFCFCF9F (        gmmut.asm):00833          fcb $ff,$ff,$ff,$ff,$ff,$cf,$cf,$9f (,)
6A98 FFFFFF03FFFFFFFF (        gmmut.asm):00834          fcb $ff,$ff,$ff,$03,$ff,$ff,$ff,$ff (-)
6AA0 FFFFFFFFFFCFCFFF (        gmmut.asm):00835          fcb $ff,$ff,$ff,$ff,$ff,$cf,$cf,$ff (.)
6AA8 F9F3E7CF9F3F7FFF (        gmmut.asm):00836          fcb $f9,$f3,$e7,$cf,$9f,$3f,$7f,$ff (/)
6AB0 83393121091983FF (        gmmut.asm):00837          fcb $83,$39,$31,$21,$09,$19,$83,$ff (0)
6AB8 CF8FCFCFCFCF03FF (        gmmut.asm):00838          fcb $cf,$8f,$cf,$cf,$cf,$cf,$03,$ff (1)
6AC0 8733F3C79F3303FF (        gmmut.asm):00839          fcb $87,$33,$f3,$c7,$9f,$33,$03,$ff (2)
6AC8 8733F3C7F33387FF (        gmmut.asm):00840          fcb $87,$33,$f3,$c7,$f3,$33,$87,$ff (3)
6AD0 E3C3933301F3E1FF (        gmmut.asm):00841          fcb $e3,$c3,$93,$33,$01,$f3,$e1,$ff (4)
6AD8 033F07F3F33387FF (        gmmut.asm):00842          fcb $03,$3f,$07,$f3,$f3,$33,$87,$ff (5)
6AE0 C79F3F07333387FF (        gmmut.asm):00843          fcb $c7,$9f,$3f,$07,$33,$33,$87,$ff (6)
6AE8 0333F3E7CFCFCFFF (        gmmut.asm):00844          fcb $03,$33,$f3,$e7,$cf,$cf,$cf,$ff (7)
6AF0 87333387333387FF (        gmmut.asm):00845          fcb $87,$33,$33,$87,$33,$33,$87,$ff (8)
6AF8 87333383F3E78FFF (        gmmut.asm):00846          fcb $87,$33,$33,$83,$f3,$e7,$8f,$ff (9)
6B00 FFCFCFFFFFCFCFFF (        gmmut.asm):00847          fcb $ff,$cf,$cf,$ff,$ff,$cf,$cf,$ff (:)
6B08 FFCFCFFFFFCFCF9F (        gmmut.asm):00848          fcb $ff,$cf,$cf,$ff,$ff,$cf,$cf,$9f (;)
6B10 E7CF9F3F9FCFE7FF (        gmmut.asm):00849          fcb $e7,$cf,$9f,$3f,$9f,$cf,$e7,$ff (<)
6B18 FFFF03FFFF03FFFF (        gmmut.asm):00850          fcb $ff,$ff,$03,$ff,$ff,$03,$ff,$ff (=)
6B20 9FCFE7F3E7CF9FFF (        gmmut.asm):00851          fcb $9f,$cf,$e7,$f3,$e7,$cf,$9f,$ff (>)
6B28 8733F3E7CFFFCFFF (        gmmut.asm):00852          fcb $87,$33,$f3,$e7,$cf,$ff,$cf,$ff (?)
6B30 83392121213F87FF (        gmmut.asm):00853          fcb $83,$39,$21,$21,$21,$3f,$87,$ff (@)
6B38 CF873333033333FF (        gmmut.asm):00854          fcb $cf,$87,$33,$33,$03,$33,$33,$ff (A)
6B40 03999983999903FF (        gmmut.asm):00855          fcb $03,$99,$99,$83,$99,$99,$03,$ff (B)
6B48 C3993F3F3F99C3FF (        gmmut.asm):00856          fcb $c3,$99,$3f,$3f,$3f,$99,$c3,$ff (C)
6B50 07939999999307FF (        gmmut.asm):00857          fcb $07,$93,$99,$99,$99,$93,$07,$ff (D)
6B58 019D9787979D01FF (        gmmut.asm):00858          fcb $01,$9d,$97,$87,$97,$9d,$01,$ff (E)
6B60 019D9787979F0FFF (        gmmut.asm):00859          fcb $01,$9d,$97,$87,$97,$9f,$0f,$ff (F)
6B68 C3993F3F3199C1FF (        gmmut.asm):00860          fcb $c3,$99,$3f,$3f,$31,$99,$c1,$ff (G)
6B70 33333303333333FF (        gmmut.asm):00861          fcb $33,$33,$33,$03,$33,$33,$33,$ff (H)
6B78 87CFCFCFCFCF87FF (        gmmut.asm):00862          fcb $87,$cf,$cf,$cf,$cf,$cf,$87,$ff (I)
6B80 E1F3F3F3333387FF (        gmmut.asm):00863          fcb $e1,$f3,$f3,$f3,$33,$33,$87,$ff (J)
6B88 19999387939919FF (        gmmut.asm):00864          fcb $19,$99,$93,$87,$93,$99,$19,$ff (K)
6B90 0F9F9F9F9D9901FF (        gmmut.asm):00865          fcb $0f,$9f,$9f,$9f,$9d,$99,$01,$ff (L)
6B98 39110101293939FF (        gmmut.asm):00866          fcb $39,$11,$01,$01,$29,$39,$39,$ff (M)
6BA0 39190921313939FF (        gmmut.asm):00867          fcb $39,$19,$09,$21,$31,$39,$39,$ff (N)
6BA8 C79339393993C7FF (        gmmut.asm):00868          fcb $c7,$93,$39,$39,$39,$93,$c7,$ff (O)
6BB0 039999839F9F0FFF (        gmmut.asm):00869          fcb $03,$99,$99,$83,$9f,$9f,$0f,$ff (P)
6BB8 873333332387E3FF (        gmmut.asm):00870          fcb $87,$33,$33,$33,$23,$87,$e3,$ff (Q)
6BC0 03999983939919FF (        gmmut.asm):00871          fcb $03,$99,$99,$83,$93,$99,$19,$ff (R)
6BC8 87331F8FE33387FF (        gmmut.asm):00872          fcb $87,$33,$1f,$8f,$e3,$33,$87,$ff (S)
6BD0 034BCFCFCFCF87FF (        gmmut.asm):00873          fcb $03,$4b,$cf,$cf,$cf,$cf,$87,$ff (T)
6BD8 33333333333303FF (        gmmut.asm):00874          fcb $33,$33,$33,$33,$33,$33,$03,$ff (U)
6BE0 333333333387CFFF (        gmmut.asm):00875          fcb $33,$33,$33,$33,$33,$87,$cf,$ff (V)
6BE8 39393929011139FF (        gmmut.asm):00876          fcb $39,$39,$39,$29,$01,$11,$39,$ff (W)
6BF0 393993C7C79339FF (        gmmut.asm):00877          fcb $39,$39,$93,$c7,$c7,$93,$39,$ff (X)
6BF8 33333387CFCF87FF (        gmmut.asm):00878          fcb $33,$33,$33,$87,$cf,$cf,$87,$ff (Y)
6C00 013973E7CD9901FF (        gmmut.asm):00879          fcb $01,$39,$73,$e7,$cd,$99,$01,$ff (Z)
6C08 879F9F9F9F9F87FF (        gmmut.asm):00880          fcb $87,$9f,$9f,$9f,$9f,$9f,$87,$ff ([)
6C10 3F9FCFE7F3F9FDFF (        gmmut.asm):00881          fcb $3f,$9f,$cf,$e7,$f3,$f9,$fd,$ff (\)
6C18 87E7E7E7E7E787FF (        gmmut.asm):00882          fcb $87,$e7,$e7,$e7,$e7,$e7,$87,$ff (])
6C20 EFC79339FFFFFFFF (        gmmut.asm):00883          fcb $ef,$c7,$93,$39,$ff,$ff,$ff,$ff (^)
6C28 FFFFFFFFFFFFFF00 (        gmmut.asm):00884          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00 (_)
6C30 CFCFE7FFFFFFFFFF (        gmmut.asm):00885          fcb $cf,$cf,$e7,$ff,$ff,$ff,$ff,$ff (`)
6C38 FFFF87F3833389FF (        gmmut.asm):00886          fcb $ff,$ff,$87,$f3,$83,$33,$89,$ff (a)
6C40 1F9F9F83999923FF (        gmmut.asm):00887          fcb $1f,$9f,$9f,$83,$99,$99,$23,$ff (b)
6C48 FFFF87333F3387FF (        gmmut.asm):00888          fcb $ff,$ff,$87,$33,$3f,$33,$87,$ff (c)
6C50 E3F3F383333389FF (        gmmut.asm):00889          fcb $e3,$f3,$f3,$83,$33,$33,$89,$ff (d)
6C58 FFFF8733033F87FF (        gmmut.asm):00890          fcb $ff,$ff,$87,$33,$03,$3f,$87,$ff (e)
6C60 C7939F0F9F9F0FFF (        gmmut.asm):00891          fcb $c7,$93,$9f,$0f,$9f,$9f,$0f,$ff (f)
6C68 FFFF89333383F307 (        gmmut.asm):00892          fcb $ff,$ff,$89,$33,$33,$83,$f3,$07 (g)
6C70 1F9F9389999919FF (        gmmut.asm):00893          fcb $1f,$9f,$93,$89,$99,$99,$19,$ff (h)
6C78 CFFF8FCFCFCF87FF (        gmmut.asm):00894          fcb $cf,$ff,$8f,$cf,$cf,$cf,$87,$ff (i)
6C80 F3FFF3F3F3333387 (        gmmut.asm):00895          fcb $f3,$ff,$f3,$f3,$f3,$33,$33,$87 (j)
6C88 1F9F9993879319FF (        gmmut.asm):00896          fcb $1f,$9f,$99,$93,$87,$93,$19,$ff (k)
6C90 8FCFCFCFCFCF87FF (        gmmut.asm):00897          fcb $8f,$cf,$cf,$cf,$cf,$cf,$87,$ff (l)
6C98 FFFF3301012939FF (        gmmut.asm):00898          fcb $ff,$ff,$33,$01,$01,$29,$39,$ff (m)
6CA0 FFFF0733333333FF (        gmmut.asm):00899          fcb $ff,$ff,$07,$33,$33,$33,$33,$ff (n)
6CA8 FFFF8733333387FF (        gmmut.asm):00900          fcb $ff,$ff,$87,$33,$33,$33,$87,$ff (o)
6CB0 FFFF239999839F0F (        gmmut.asm):00901          fcb $ff,$ff,$23,$99,$99,$83,$9f,$0f (p)
6CB8 FFFF89333383F3E1 (        gmmut.asm):00902          fcb $ff,$ff,$89,$33,$33,$83,$f3,$e1 (q)
6CC0 FFFF2389999F0FFF (        gmmut.asm):00903          fcb $ff,$ff,$23,$89,$99,$9f,$0f,$ff (r)
6CC8 FFFF833F87F307FF (        gmmut.asm):00904          fcb $ff,$ff,$83,$3f,$87,$f3,$07,$ff (s)
6CD0 EFCF83CFCFCBE7FF (        gmmut.asm):00905          fcb $ef,$cf,$83,$cf,$cf,$cb,$e7,$ff (t)
6CD8 FFFF3333333389FF (        gmmut.asm):00906          fcb $ff,$ff,$33,$33,$33,$33,$89,$ff (u)
6CE0 FFFF33333387CFFF (        gmmut.asm):00907          fcb $ff,$ff,$33,$33,$33,$87,$cf,$ff (v)
6CE8 FFFF3929010193FF (        gmmut.asm):00908          fcb $ff,$ff,$39,$29,$01,$01,$93,$ff (w)
6CF0 FFFF3993C79339FF (        gmmut.asm):00909          fcb $ff,$ff,$39,$93,$c7,$93,$39,$ff (x)
6CF8 FFFF33333383F307 (        gmmut.asm):00910          fcb $ff,$ff,$33,$33,$33,$83,$f3,$07 (y)
6D00 FFFF0367CF9B03FF (        gmmut.asm):00911          fcb $ff,$ff,$03,$67,$cf,$9b,$03,$ff (z)
6D08 E3CFCF1FCFCFE3FF (        gmmut.asm):00912          fcb $e3,$cf,$cf,$1f,$cf,$cf,$e3,$ff ({)
6D10 E7E7E7FFE7E7E7FF (        gmmut.asm):00913          fcb $e7,$e7,$e7,$ff,$e7,$e7,$e7,$ff (|)
6D18 1FCFCFE3CFCF1FFF (        gmmut.asm):00914          fcb $1f,$cf,$cf,$e3,$cf,$cf,$1f,$ff (})
6D20 8923FFFFFFFFFFFF (        gmmut.asm):00915          fcb $89,$23,$ff,$ff,$ff,$ff,$ff,$ff (~)
6D28 FFFFFFFFFFFFFFFF (        gmmut.asm):00916          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ( )
                      (        gmmut.asm):00917          
                      (        gmmut.asm):00918          IFGT *-$7fff
                      (        gmmut.asm):00919          ERROR "Program to large"
                      (        gmmut.asm):00920          ENDC
                      (        gmmut.asm):00921         
                      (        gmmut.asm):00922          end start
