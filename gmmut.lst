                      (        gmmut.asm):00001          PRAGMA autobranchlength
                      (        gmmut.asm):00002          PRAGMA cescapes
                      (        gmmut.asm):00003          org $6001
6001                  (        gmmut.asm):00004         out_param rmb 1
6002                  (        gmmut.asm):00005         gime_flag rmb 1 # boolean; true if gime, false if jr
6003                  (        gmmut.asm):00006         text_block rmb 1 # mmu block of text screen
6004                  (        gmmut.asm):00007         text_address rmb 2 # address of text screen
6006                  (        gmmut.asm):00008         text_position rmb 2 # cursor offset
6008                  (        gmmut.asm):00009         gime_0 rmb 1 shadow register
6009                  (        gmmut.asm):00010         gime_1 rmb 1 shadow register
                      (        gmmut.asm):00011         
600A                  (        gmmut.asm):00012         start
600A                  (        gmmut.asm):00013         init_tests
                      (        gmmut.asm):00014         # Test for coco3
                      (        gmmut.asm):00015         # CoCo 3 will have $38, Jr. will have $00
                      (        gmmut.asm):00016         # Mooh is currently unknown
600A B6FFA0           (        gmmut.asm):00017          lda $ffa0
600D 843F             (        gmmut.asm):00018          anda #%00111111
600F 8138             (        gmmut.asm):00019          cmpa #$38
6011 10270025         (        gmmut.asm):00020          beq init_gime
6015 8100             (        gmmut.asm):00021          cmpa #$0
6017 10270032         (        gmmut.asm):00022          beq init_jr
                      (        gmmut.asm):00023         # unknown MMU
601B 8E602B           (        gmmut.asm):00024          ldx #unknown_message
601E                  (        gmmut.asm):00025         error_loop
601E A680             (        gmmut.asm):00026          lda ,x+
6020 10270006         (        gmmut.asm):00027          beq error_done
6024 AD9FA002         (        gmmut.asm):00028          jsr [$a002] ; Color BASIC ROM CHROUT
6028 20F4             (        gmmut.asm):00029          bra error_loop
602A                  (        gmmut.asm):00030         error_done
602A 39               (        gmmut.asm):00031          rts ; Go Back to BASIC
602B                  (        gmmut.asm):00032         unknown_message
602B 0D554E4B4E4F574E (        gmmut.asm):00033          fcn "\rUNKNOWN MMU.\r"
     204D4D552E0D00
                      (        gmmut.asm):00034         
603A                  (        gmmut.asm):00035         init_gime
603A 86FF             (        gmmut.asm):00036          lda #$ff
603C B76002           (        gmmut.asm):00037          sta gime_flag
603F 8638             (        gmmut.asm):00038          lda #$38
6041 B76003           (        gmmut.asm):00039          sta text_block
6044 CC0400           (        gmmut.asm):00040          ldd #$0400
6047 FD6004           (        gmmut.asm):00041          std text_address
                      (        gmmut.asm):00042         # gime mmu slots are initialized by Color BASIC
604A 160038           (        gmmut.asm):00043          bra init_common
                      (        gmmut.asm):00044         
604D                  (        gmmut.asm):00045         init_jr
                      (        gmmut.asm):00046         # flag Jr
604D 8600             (        gmmut.asm):00047          lda #$0
604F B76002           (        gmmut.asm):00048          sta gime_flag
6052 8638             (        gmmut.asm):00049          lda #$38 # lowest banks start at $38
                      (        gmmut.asm):00050         # load default mmu
6054 8EFFA0           (        gmmut.asm):00051          ldx #$ffa0
6057 108EFFA8         (        gmmut.asm):00052          ldy #$ffa8
605B C608             (        gmmut.asm):00053          ldb #8
605D                  (        gmmut.asm):00054         init_jr_loop
605D A780             (        gmmut.asm):00055          sta ,x+
605F A7A0             (        gmmut.asm):00056          sta ,y+
6061 4C               (        gmmut.asm):00057          inca
6062 5A               (        gmmut.asm):00058          decb
6063 26F8             (        gmmut.asm):00059          bne init_jr_loop
                      (        gmmut.asm):00060         # initialize internal variables
6065 8600             (        gmmut.asm):00061          lda #$0
6067 B76003           (        gmmut.asm):00062          sta text_block
606A CC0400           (        gmmut.asm):00063          ldd #$0400
606D FD6004           (        gmmut.asm):00064          std text_address
                      (        gmmut.asm):00065         # change to all ram mode
6070 8E8000           (        gmmut.asm):00066          ldx #$8000
6073 170B65           (        gmmut.asm):00067          bsr turn_off_ints   # need to turn off interrupts before swapping in RAM
6076                  (        gmmut.asm):00068         ram_loop
6076 B7FFDE           (        gmmut.asm):00069          sta $ffde
6079 EC84             (        gmmut.asm):00070          ldd ,x
607B B7FFDF           (        gmmut.asm):00071          sta $ffdf
607E ED81             (        gmmut.asm):00072          std ,x++
6080 8CFF00           (        gmmut.asm):00073          cmpx #$ff00
6083 26F1             (        gmmut.asm):00074          bne ram_loop
                      (        gmmut.asm):00075         
6085                  (        gmmut.asm):00076         init_common
6085 0F71             (        gmmut.asm):00077          clr $71 # force cold start on reset
6087 170B51           (        gmmut.asm):00078          bsr turn_off_ints
                      (        gmmut.asm):00079         # turn on mmu, task 0, no const ram (for both gime and jr)
608A 86C4             (        gmmut.asm):00080          lda #$c4
608C B76008           (        gmmut.asm):00081          sta gime_0
608F B7FF90           (        gmmut.asm):00082          sta $ff90
6092 8600             (        gmmut.asm):00083          lda #$0
6094 B76009           (        gmmut.asm):00084          sta gime_1
6097 B7FF91           (        gmmut.asm):00085          sta $ff91
                      (        gmmut.asm):00086         # init casflg
609A 86FF             (        gmmut.asm):00087          lda #$ff
609C B76CD1           (        gmmut.asm):00088          sta casflg
                      (        gmmut.asm):00089          
609F                  (        gmmut.asm):00090         main_menu
609F 170B69           (        gmmut.asm):00091          bsr clear_screen
60A2 170B7A           (        gmmut.asm):00092          bsr strout
60A5 47494D45204D4D55 (        gmmut.asm):00093          fcc "GIME MMU TESTER\r"
     205445535445520D
60B5 324D422041574152 (        gmmut.asm):00094          fcc "2MB AWARE\r"
     450D
60BF 312920434F554E54 (        gmmut.asm):00095          fcc "1) COUNT AVAILABLE MMU BANKS\r"
     20415641494C4142
     4C45204D4D552042
     414E4B530D
60DC 2D29204D4D552053 (        gmmut.asm):00096          fcc "-) MMU SLOT REGISTER WIDTH\r"
     4C4F542052454749
     5354455220574944
     54480D
60F7 3329205445535420 (        gmmut.asm):00097          fcc "3) TEST TASK SWITCHING\r"
     5441534B20535749
     544348494E470D
610E 3429205445535420 (        gmmut.asm):00098          fcc "4) TEST CONSTANT RAM\r"
     434F4E5354414E54
     2052414D0D
6123 3529205445535420 (        gmmut.asm):00099          fcc "5) TEST RAM\r"
     52414D0D
612F 36292053484F5720 (        gmmut.asm):00100          fcc "6) SHOW VDG WRAP AROUND\r"
     5644472057524150
     2041524F554E440D
6147 372920534C4F5720 (        gmmut.asm):00101          fcn "7) SLOW TIMER TEST\r"
     54494D4552205445
     53540D00
615B                  (        gmmut.asm):00102         init_loop
615B 5A               (        gmmut.asm):00103          decb
615C 1026000E         (        gmmut.asm):00104          bne mm_skip
6160 3404             (        gmmut.asm):00105          pshs b
6162 BE6004           (        gmmut.asm):00106          ldx text_address
6165 FC6006           (        gmmut.asm):00107          ldd text_position
6168 308B             (        gmmut.asm):00108          leax d,x
616A 6384             (        gmmut.asm):00109          com ,x
616C 3504             (        gmmut.asm):00110          puls b
616E                  (        gmmut.asm):00111         mm_skip
616E 170B61           (        gmmut.asm):00112          bsr keyin
6171 8100             (        gmmut.asm):00113          cmpa #0
6173 27E6             (        gmmut.asm):00114          beq init_loop
6175 3402             (        gmmut.asm):00115          pshs a
6177 170ADF           (        gmmut.asm):00116          bsr chrout
617A 860D             (        gmmut.asm):00117          lda #$0d
617C 170ADA           (        gmmut.asm):00118          bsr chrout
617F E6E4             (        gmmut.asm):00119          ldb ,s
6181 C031             (        gmmut.asm):00120          subb #'1
6183 C106             (        gmmut.asm):00121          cmpb #6
6185 10220016         (        gmmut.asm):00122          bhi mm_done
6189 58               (        gmmut.asm):00123          lslb
618A 8E61C5           (        gmmut.asm):00124          ldx #jump_table
618D AD95             (        gmmut.asm):00125          jsr [b,x]
618F                  (        gmmut.asm):00126         done_after
618F E6E4             (        gmmut.asm):00127          ldb ,s
6191 C031             (        gmmut.asm):00128          subb #'1
6193 C106             (        gmmut.asm):00129          cmpb #6
6195 10220006         (        gmmut.asm):00130          bhi mm_done
6199 58               (        gmmut.asm):00131          lslb
619A 8E61D3           (        gmmut.asm):00132          ldx #post_jump_table
619D AD95             (        gmmut.asm):00133          jsr [b,x]
619F                  (        gmmut.asm):00134         mm_done
619F 170A7D           (        gmmut.asm):00135          bsr strout
61A2 505245535320414E (        gmmut.asm):00136          fcn "PRESS ANY KEY TO CONTINUE\r"
     59204B455920544F
     20434F4E54494E55
     450D00
61BD 170B01           (        gmmut.asm):00137          bsr wait
61C0 3504             (        gmmut.asm):00138          puls b
61C2 7E609F           (        gmmut.asm):00139          jmp main_menu
                      (        gmmut.asm):00140         
61C5                  (        gmmut.asm):00141         jump_table
61C5 61E2             (        gmmut.asm):00142          fdb count_mmu_blocks
61C7 61E1             (        gmmut.asm):00143          fdb return
61C9 66DD             (        gmmut.asm):00144          fdb test_task_switching
61CB 6846             (        gmmut.asm):00145          fdb test_constant_ram
61CD 6A73             (        gmmut.asm):00146          fdb test_ram
61CF 637F             (        gmmut.asm):00147          fdb vdg_wrap
61D1 6589             (        gmmut.asm):00148          fdb timer_test
                      (        gmmut.asm):00149         
61D3                  (        gmmut.asm):00150         post_jump_table
61D3 6221             (        gmmut.asm):00151          fdb report_count_mmu
61D5 61E1             (        gmmut.asm):00152          fdb return
61D7 61E1             (        gmmut.asm):00153          fdb return
61D9 61E1             (        gmmut.asm):00154          fdb return
61DB 61E1             (        gmmut.asm):00155          fdb return
61DD 61E1             (        gmmut.asm):00156          fdb return
61DF 61E1             (        gmmut.asm):00157          fdb return
                      (        gmmut.asm):00158         
61E1                  (        gmmut.asm):00159         return
61E1 39               (        gmmut.asm):00160          rts
                      (        gmmut.asm):00161                 
61E2                  (        gmmut.asm):00162         count_mmu_blocks
61E2 170840           (        gmmut.asm):00163          bsr switch_to_task_0
61E5 170866           (        gmmut.asm):00164          bsr turn_on_mmu
                      (        gmmut.asm):00165         #  bsr save_task_0
                      (        gmmut.asm):00166         # Put mmu block number in first byte of each block
                      (        gmmut.asm):00167         # and save previous value
61E8 5F               (        gmmut.asm):00168          clrb
61E9 8E6DAE           (        gmmut.asm):00169          ldx #buffer
61EC                  (        gmmut.asm):00170         cb_loop1
61EC F7FFA4           (        gmmut.asm):00171          stb $ffa4
61EF B68000           (        gmmut.asm):00172          lda $8000
61F2 A780             (        gmmut.asm):00173          sta ,x+
61F4 F78000           (        gmmut.asm):00174          stb $8000
61F7 5C               (        gmmut.asm):00175          incb
61F8 26F2             (        gmmut.asm):00176          bne cb_loop1
                      (        gmmut.asm):00177         
                      (        gmmut.asm):00178         # fill buffer with what is
                      (        gmmut.asm):00179         # left in the first byte of each block
                      (        gmmut.asm):00180         # and restore value
61FA 8E6DAE           (        gmmut.asm):00181          ldx #buffer
61FD 5F               (        gmmut.asm):00182          clrb
61FE 108E0000         (        gmmut.asm):00183          ldy #0
6202                  (        gmmut.asm):00184         cb_loop2
6202 F7FFA4           (        gmmut.asm):00185          stb $ffa4
6205 B68000           (        gmmut.asm):00186          lda $8000
6208 E684             (        gmmut.asm):00187          ldb ,x
620A A780             (        gmmut.asm):00188          sta ,x+
620C F78000           (        gmmut.asm):00189          stb $8000
620F 3121             (        gmmut.asm):00190          leay 1,y
6211 1F20             (        gmmut.asm):00191          tfr y,d
6213 C100             (        gmmut.asm):00192          cmpb #0
6215 26EB             (        gmmut.asm):00193          bne cb_loop2
                      (        gmmut.asm):00194         # report first byte of buffer
6217 B66DAE           (        gmmut.asm):00195          lda buffer
621A B76001           (        gmmut.asm):00196          sta out_param
621D 170AA1           (        gmmut.asm):00197          bsr wait
6220 39               (        gmmut.asm):00198          rts 
                      (        gmmut.asm):00199         
6221                  (        gmmut.asm):00200         report_count_mmu
6221 B66001           (        gmmut.asm):00201          lda out_param
6224 81F0             (        gmmut.asm):00202          cmpa #$f0
6226 10270032         (        gmmut.asm):00203          beq rc_128k
622A 81E0             (        gmmut.asm):00204          cmpa #$e0
622C 10270045         (        gmmut.asm):00205          beq rc_256k
6230 81C0             (        gmmut.asm):00206          cmpa #$c0
6232 10270058         (        gmmut.asm):00207          beq rc_512k
6236 8180             (        gmmut.asm):00208          cmpa #$80
6238 1027006B         (        gmmut.asm):00209          beq rc_1024k
623C 8100             (        gmmut.asm):00210          cmpa #$00
623E 1027007F         (        gmmut.asm):00211          beq rc_2048k
6242 1709DA           (        gmmut.asm):00212          bsr strout
6245 554E4B4E4F574E20 (        gmmut.asm):00213          fcn "UNKNOWN RAM AMOUNT\r"
     52414D20414D4F55
     4E540D00
6259 16007C           (        gmmut.asm):00214          bra rc_printTable
625C                  (        gmmut.asm):00215         rc_128k
625C 1709C0           (        gmmut.asm):00216          bsr strout
625F 3132384B202D2024 (        gmmut.asm):00217          fcn "128K - $30 TO $3F\r"
     333020544F202433
     460D00
6272 160063           (        gmmut.asm):00218          bra rc_printTable
6275                  (        gmmut.asm):00219         rc_256k
6275 1709A7           (        gmmut.asm):00220          bsr strout
6278 3235364B202D2024 (        gmmut.asm):00221          fcn "256K - $20 TO $3F\r"
     323020544F202433
     460D00
628B 16004A           (        gmmut.asm):00222          bra rc_printTable
628E                  (        gmmut.asm):00223         rc_512k
628E 17098E           (        gmmut.asm):00224          bsr strout
6291 3531324B202D2024 (        gmmut.asm):00225          fcn "512K - $00 TO $3F\r"
     303020544F202433
     460D00
62A4 160031           (        gmmut.asm):00226          bra rc_printTable
62A7                  (        gmmut.asm):00227         rc_1024k
62A7 170975           (        gmmut.asm):00228          bsr strout
62AA 313032344B202D20 (        gmmut.asm):00229          fcn "1024K - $00 TO $7F\r"
     24303020544F2024
     37460D00
62BE 160017           (        gmmut.asm):00230          bra rc_printTable
62C1                  (        gmmut.asm):00231         rc_2048k
62C1 17095B           (        gmmut.asm):00232          bsr strout
62C4 323034384B202D20 (        gmmut.asm):00233          fcn "2048K - $00 TO $FF\r"
     24303020544F2024
     46460D00
62D8                  (        gmmut.asm):00234         rc_printTable
62D8 170944           (        gmmut.asm):00235          bsr strout
62DB 4649525354204259 (        gmmut.asm):00236          fcn "FIRST BYTE OF TABLE: "
     5445204F46205441
     424C453A2000
62F1 B66DAE           (        gmmut.asm):00237          lda buffer
62F4 BD6C2E           (        gmmut.asm):00238          jsr charout_hex
62F7 170925           (        gmmut.asm):00239          bsr strout
62FA 0D00             (        gmmut.asm):00240          fcn "\r"
                      (        gmmut.asm):00241         # look for anomaly in table
62FC B66001           (        gmmut.asm):00242          lda out_param
62FF 8E6DAE           (        gmmut.asm):00243          ldx #buffer
6302                  (        gmmut.asm):00244         rc_loop
6302 A180             (        gmmut.asm):00245          cmpa ,x+
6304 10260012         (        gmmut.asm):00246          bne rs_fail
6308 8C6EAE           (        gmmut.asm):00247          cmpx #buffer+256
630B 1027000A         (        gmmut.asm):00248          beq rc_done
630F 4C               (        gmmut.asm):00249          inca
6310 8100             (        gmmut.asm):00250          cmpa #0
6312 26EE             (        gmmut.asm):00251          bne rc_loop
6314 B66001           (        gmmut.asm):00252          lda out_param
                      (        gmmut.asm):00253         
6317 20E9             (        gmmut.asm):00254          bra rc_loop
6319                  (        gmmut.asm):00255         rc_done
6319 39               (        gmmut.asm):00256          rts
                      (        gmmut.asm):00257         
631A                  (        gmmut.asm):00258         rs_fail
631A 301F             (        gmmut.asm):00259          leax -1,x
631C 3402             (        gmmut.asm):00260          pshs a
631E E684             (        gmmut.asm):00261          ldb ,x
6320 3404             (        gmmut.asm):00262          pshs b
6322 CC6DAE           (        gmmut.asm):00263          ldd #buffer
6325 3406             (        gmmut.asm):00264          pshs d
6327 3410             (        gmmut.asm):00265          pshs x
6329 1708F3           (        gmmut.asm):00266          bsr strout
632C 414E4F4D414C5920 (        gmmut.asm):00267          fcn "ANOMALY IN TABLE POSITION: $"
     494E205441424C45
     20504F534954494F
     4E3A202400
6349 3506             (        gmmut.asm):00268          puls d
634B A3E1             (        gmmut.asm):00269          subd ,s++
634D 1F98             (        gmmut.asm):00270          tfr b,a
634F BD6C2E           (        gmmut.asm):00271          jsr charout_hex
6352 1708CA           (        gmmut.asm):00272          bsr strout
6355 0D464F554E443A20 (        gmmut.asm):00273          fcn "\rFOUND: $"
     2400
635F 3502             (        gmmut.asm):00274          puls a
6361 BD6C2E           (        gmmut.asm):00275          jsr charout_hex
6364 1708B8           (        gmmut.asm):00276          bsr strout
6367 0D45585045435445 (        gmmut.asm):00277          fcn "\rEXPECTED: $"
     443A202400
6374 3502             (        gmmut.asm):00278          puls a
6376 BD6C2E           (        gmmut.asm):00279          jsr charout_hex
6379 1708A3           (        gmmut.asm):00280          bsr strout
637C 0D00             (        gmmut.asm):00281          fcn "\r"
637E 39               (        gmmut.asm):00282          rts
                      (        gmmut.asm):00283         
                      (        gmmut.asm):00284          
637F                  (        gmmut.asm):00285         vdg_wrap
637F 170871           (        gmmut.asm):00286          bsr save_task_0
                      (        gmmut.asm):00287         # explain what is going to happen
6382 17089A           (        gmmut.asm):00288          bsr strout
6385 0D544845204E4558 (        gmmut.asm):00289          fcc "\rTHE NEXT SCREEN WILL BE A PMODE 4 "
     542053435245454E
     2057494C4C204245
     204120504D4F4445
     203420
63A8 4752415048494353 (        gmmut.asm):00290          fcc "GRAPHICS SCREEN WITH THE START ADDRESS "
     2053435245454E20
     5749544820544845
     2053544152542041
     44445245535320
63CF 53455420544F2024 (        gmmut.asm):00291          fcc "SET TO $FE00.\r"
     464530302E0D
63DD 5448452057524150 (        gmmut.asm):00292          fcc "THE WRAP AROUND MMU PAGE WILL BE IDENTIFIED."
     2041524F554E4420
     4D4D552050414745
     2057494C4C204245
     204944454E544946
     4945442E
6409 0D50524553532041 (        gmmut.asm):00293          fcn "\rPRESS ANY KEY TO CONTINUE\r\r"
     4E59204B45592054
     4F20434F4E54494E
     55450D0D00
6426 170898           (        gmmut.asm):00294          bsr wait
                      (        gmmut.asm):00295         
                      (        gmmut.asm):00296         # Set Sam to PMODE 4
6429 86F0             (        gmmut.asm):00297          lda #%11110000
642B B7FFC5           (        gmmut.asm):00298          sta $ffc5
642E B7FFC3           (        gmmut.asm):00299          sta $ffc3
6431 B7FFC0           (        gmmut.asm):00300          sta $ffc0
6434 B7FF22           (        gmmut.asm):00301          sta $ff22
                      (        gmmut.asm):00302         # set SAM to highest base address ($FE00)
                      (        gmmut.asm):00303         # for video
6437 867F             (        gmmut.asm):00304          lda #%01111111
6439 170788           (        gmmut.asm):00305          bsr store_a_into_sam_offset
                      (        gmmut.asm):00306         
643C 863F             (        gmmut.asm):00307          lda #$3f
643E B7FFA1           (        gmmut.asm):00308          sta $ffa1
6441 170118           (        gmmut.asm):00309          bsr write_string
6444 2000             (        gmmut.asm):00310          fdb $2000
6446 506167653A203366 (        gmmut.asm):00311          fcn "Page: 3f, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
645E 1700FB           (        gmmut.asm):00312          bsr write_string
6461 3E00             (        gmmut.asm):00313          fdb $3e00
6463 506167653A203366 (        gmmut.asm):00314          fcn "Page: 3f, Offset: 1e00 "
     2C204F6666736574
     3A20316530302000
                      (        gmmut.asm):00315          
647B 8607             (        gmmut.asm):00316          lda #$7
647D B7FFA1           (        gmmut.asm):00317          sta $ffa1
6480 1700D9           (        gmmut.asm):00318          bsr write_string
6483 2000             (        gmmut.asm):00319          fdb $2000
6485 506167653A203037 (        gmmut.asm):00320          fcn "Page: 07, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
649D 1700BC           (        gmmut.asm):00321          bsr write_string
64A0 3E00             (        gmmut.asm):00322          fdb $3e00
64A2 506167653A203037 (        gmmut.asm):00323          fcn "Page: 07, Offset: 1e00 "
     2C204F6666736574
     3A20316530302000
                      (        gmmut.asm):00324         
64BA 8638             (        gmmut.asm):00325          lda #$38
64BC B7FFA1           (        gmmut.asm):00326          sta $ffa1
64BF 17009A           (        gmmut.asm):00327          bsr write_string
64C2 2000             (        gmmut.asm):00328          fdb $2000
64C4 506167653A203338 (        gmmut.asm):00329          fcn "Page: 38, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00330         
64DC 8640             (        gmmut.asm):00331          lda #$40
64DE B7FFA1           (        gmmut.asm):00332          sta $ffa1
64E1 170078           (        gmmut.asm):00333          bsr write_string
64E4 2000             (        gmmut.asm):00334          fdb $2000
64E6 506167653A203430 (        gmmut.asm):00335          fcn "Page: 40, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00336         
64FE 8600             (        gmmut.asm):00337          lda #$00
6500 B7FFA1           (        gmmut.asm):00338          sta $ffa1
6503 170056           (        gmmut.asm):00339          bsr write_string
6506 2000             (        gmmut.asm):00340          fdb $2000
6508 506167653A203030 (        gmmut.asm):00341          fcn "Page: 00, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00342          
6520 8608             (        gmmut.asm):00343          lda #$8
6522 B7FFA1           (        gmmut.asm):00344          sta $ffa1
6525 170034           (        gmmut.asm):00345          bsr write_string
6528 2000             (        gmmut.asm):00346          fdb $2000
652A 506167653A203038 (        gmmut.asm):00347          fcn "Page: 08, Offset: 0000 "
     2C204F6666736574
     3A20303030302000
                      (        gmmut.asm):00348         
6542 17077C           (        gmmut.asm):00349          bsr wait
                      (        gmmut.asm):00350         
6545 1706A1           (        gmmut.asm):00351          bsr restore_task_0
                      (        gmmut.asm):00352         # Set Sam to text mode
6548 8600             (        gmmut.asm):00353          lda #$00
654A B7FFC0           (        gmmut.asm):00354          sta $ffc0
654D B7FFC2           (        gmmut.asm):00355          sta $ffc2
6550 B7FFC4           (        gmmut.asm):00356          sta $ffc4
6553 B7FF22           (        gmmut.asm):00357          sta $ff22
                      (        gmmut.asm):00358         # set SAM to text screen base address ($0400)
                      (        gmmut.asm):00359         # for video
6556 8602             (        gmmut.asm):00360          lda #%00000010
6558 170669           (        gmmut.asm):00361          bsr store_a_into_sam_offset
655B 39               (        gmmut.asm):00362          rts
                      (        gmmut.asm):00363         
655C                  (        gmmut.asm):00364         write_string
655C 3540             (        gmmut.asm):00365          puls u
655E 10AEC1           (        gmmut.asm):00366          ldy ,u++
6561                  (        gmmut.asm):00367         write_string_loop
6561 A6C0             (        gmmut.asm):00368          lda ,u+
6563 1027000B         (        gmmut.asm):00369          beq write_string_done
6567 8020             (        gmmut.asm):00370          suba #32
6569 170008           (        gmmut.asm):00371          bsr write_character
656C 31A9FF01         (        gmmut.asm):00372          leay (-8*32)+1,y
6570 20EF             (        gmmut.asm):00373          bra write_string_loop
6572                  (        gmmut.asm):00374         write_string_done
6572 1F35             (        gmmut.asm):00375          tfr u,pc
                      (        gmmut.asm):00376         
6574                  (        gmmut.asm):00377         write_character
6574 8E6EAE           (        gmmut.asm):00378          ldx #bitmap_font
6577 C608             (        gmmut.asm):00379          ldb #8
6579 3D               (        gmmut.asm):00380          mul
657A 308B             (        gmmut.asm):00381          leax d,x
657C C608             (        gmmut.asm):00382          ldb #8
657E                  (        gmmut.asm):00383         write_character_loop
657E A680             (        gmmut.asm):00384          lda ,x+
6580 A7A4             (        gmmut.asm):00385          sta ,y
6582 31A820           (        gmmut.asm):00386          leay 32,y
6585 5A               (        gmmut.asm):00387          decb
6586 26F6             (        gmmut.asm):00388          bne write_character_loop
6588 39               (        gmmut.asm):00389          rts
                      (        gmmut.asm):00390         
6589                  (        gmmut.asm):00391         timer_test
                      (        gmmut.asm):00392         # save palette
6589 B6FFBD           (        gmmut.asm):00393          lda $ffbd
658C 843F             (        gmmut.asm):00394          anda #%00111111
658E B7668A           (        gmmut.asm):00395          sta save_palette
                      (        gmmut.asm):00396          
                      (        gmmut.asm):00397         # turn off all pia interrupts
6591 B6FF01           (        gmmut.asm):00398          lda $ff01
6594 B76688           (        gmmut.asm):00399          sta save_pia0a
6597 843E             (        gmmut.asm):00400          anda #%00111110
6599 B7FF01           (        gmmut.asm):00401          sta $ff01
659C B6FF00           (        gmmut.asm):00402          lda $ff00
                      (        gmmut.asm):00403          
659F B6FF03           (        gmmut.asm):00404          lda $ff03
65A2 B76689           (        gmmut.asm):00405          sta save_pia0b
65A5 843E             (        gmmut.asm):00406          anda #%00111110
65A7 B7FF03           (        gmmut.asm):00407          sta $ff03
65AA B6FF02           (        gmmut.asm):00408          lda $ff02
                      (        gmmut.asm):00409          
                      (        gmmut.asm):00410         # install both isr
65AD 867E             (        gmmut.asm):00411          lda #$7e # JMP instruction extended
65AF B7FEF4           (        gmmut.asm):00412          sta $fef4
65B2 B7FEF7           (        gmmut.asm):00413          sta $fef7
65B5 CC66B3           (        gmmut.asm):00414          ldd #tt_isr_firq
65B8 FDFEF5           (        gmmut.asm):00415          std $fef5
65BB CC66C8           (        gmmut.asm):00416          ldd #tt_isr_irq
65BE FDFEF8           (        gmmut.asm):00417          std $fef8
                      (        gmmut.asm):00418         
                      (        gmmut.asm):00419         # setup timer
65C1 8600             (        gmmut.asm):00420          lda #0 # lsb of timer
65C3 B7FF95           (        gmmut.asm):00421          sta $ff95
65C6 8600             (        gmmut.asm):00422          lda #0 # msb of timer
65C8 B7FF94           (        gmmut.asm):00423          sta $ff94
65CB 8620             (        gmmut.asm):00424          lda #%00100000 # firq for timer
65CD B7FF93           (        gmmut.asm):00425          sta $ff93
65D0 8608             (        gmmut.asm):00426          lda #%00001000 # irq for vertical border
65D2 B7FF92           (        gmmut.asm):00427          sta $ff92
65D5 B6FF92           (        gmmut.asm):00428          lda $ff92
65D8 B6FF93           (        gmmut.asm):00429          lda $ff93
                      (        gmmut.asm):00430         
                      (        gmmut.asm):00431         # set timer source
65DB B66009           (        gmmut.asm):00432          lda gime_1
65DE 8A00             (        gmmut.asm):00433          ora #%00000000 # slow - 15khz
65E0 B76009           (        gmmut.asm):00434          sta gime_1
65E3 B7FF91           (        gmmut.asm):00435          sta $ff91
                      (        gmmut.asm):00436          
                      (        gmmut.asm):00437         # turn on gime interrupts
65E6 B66008           (        gmmut.asm):00438          lda gime_0
65E9 8A30             (        gmmut.asm):00439          ora #%00110000
65EB B76008           (        gmmut.asm):00440          sta gime_0
65EE B7FF90           (        gmmut.asm):00441          sta $ff90
                      (        gmmut.asm):00442         
65F1 170617           (        gmmut.asm):00443          bsr clear_screen
65F4 CCE6E6           (        gmmut.asm):00444          ldd #$e6e6
65F7 8E041F           (        gmmut.asm):00445          ldx #$400+31
65FA                  (        gmmut.asm):00446         checker_loop
65FA ED84             (        gmmut.asm):00447          std ,x
65FC 308820           (        gmmut.asm):00448          leax 32,x
65FF 8C061F           (        gmmut.asm):00449          cmpx #$400+31+(32*16)
6602 26F6             (        gmmut.asm):00450          bne checker_loop
                      (        gmmut.asm):00451          
6604 8E6678           (        gmmut.asm):00452          ldx #hex
                      (        gmmut.asm):00453         
6607 1705D4           (        gmmut.asm):00454          bsr turn_on_ints
                      (        gmmut.asm):00455         
660A                  (        gmmut.asm):00456         tt_loop
660A 108E0400         (        gmmut.asm):00457          ldy #$400
660E FC66C6           (        gmmut.asm):00458          ldd timer_value
6611 840F             (        gmmut.asm):00459          anda #$0f
6613 A686             (        gmmut.asm):00460          lda a,x
6615 A7A0             (        gmmut.asm):00461          sta ,y+
6617 1F98             (        gmmut.asm):00462          tfr b,a
6619 44               (        gmmut.asm):00463          lsra
661A 44               (        gmmut.asm):00464          lsra
661B 44               (        gmmut.asm):00465          lsra
661C 44               (        gmmut.asm):00466          lsra
661D A686             (        gmmut.asm):00467          lda a,x
661F A7A0             (        gmmut.asm):00468          sta ,y+
6621 1F98             (        gmmut.asm):00469          tfr b,a
6623 840F             (        gmmut.asm):00470          anda #$0f
6625 A686             (        gmmut.asm):00471          lda a,x
6627 A7A1             (        gmmut.asm):00472          sta ,y++
                      (        gmmut.asm):00473          
6629 1706A6           (        gmmut.asm):00474          bsr keyin
662C 8153             (        gmmut.asm):00475          cmpa #'S
662E 1027001A         (        gmmut.asm):00476          beq tt_inc10
6632 8141             (        gmmut.asm):00477          cmpa #'A
6634 1027001F         (        gmmut.asm):00478          beq tt_dec10
6638 8158             (        gmmut.asm):00479          cmpa #'X
663A 10270024         (        gmmut.asm):00480          beq tt_inc1
663E 815A             (        gmmut.asm):00481          cmpa #'Z
6640 10270029         (        gmmut.asm):00482          beq tt_dec1
6644 8151             (        gmmut.asm):00483          cmpa #'Q
6646 10270041         (        gmmut.asm):00484          beq tt_cleanup
664A 20BE             (        gmmut.asm):00485          bra tt_loop
664C                  (        gmmut.asm):00486         tt_inc10
664C FC66C6           (        gmmut.asm):00487          ldd timer_value
664F C3000A           (        gmmut.asm):00488          addd #10
6652 FD66C6           (        gmmut.asm):00489          std timer_value
6655 20B3             (        gmmut.asm):00490          bra tt_loop
6657                  (        gmmut.asm):00491         tt_dec10
6657 FC66C6           (        gmmut.asm):00492          ldd timer_value
665A 83000A           (        gmmut.asm):00493          subd #10
665D FD66C6           (        gmmut.asm):00494          std timer_value
6660 20A8             (        gmmut.asm):00495          bra tt_loop
6662                  (        gmmut.asm):00496         tt_inc1
6662 FC66C6           (        gmmut.asm):00497          ldd timer_value
6665 C30001           (        gmmut.asm):00498          addd #1
6668 FD66C6           (        gmmut.asm):00499          std timer_value
666B 209D             (        gmmut.asm):00500          bra tt_loop
666D                  (        gmmut.asm):00501         tt_dec1
666D FC66C6           (        gmmut.asm):00502          ldd timer_value
6670 830001           (        gmmut.asm):00503          subd #1
6673 FD66C6           (        gmmut.asm):00504          std timer_value
6676 2092             (        gmmut.asm):00505          bra tt_loop
6678 3031323334353637 (        gmmut.asm):00506         hex fcb 48,49,50,51,52,53,54,55,56,57,1,2,3,4,5,6
     3839010203040506
6688                  (        gmmut.asm):00507         save_pia0a rmb 1
6689                  (        gmmut.asm):00508         save_pia0b rmb 1
668A                  (        gmmut.asm):00509         save_palette rmb 1
668B                  (        gmmut.asm):00510         tt_cleanup
668B 17054D           (        gmmut.asm):00511          bsr turn_off_ints
                      (        gmmut.asm):00512         # turn off gime interrupts
668E B66008           (        gmmut.asm):00513          lda gime_0
6691 84CF             (        gmmut.asm):00514          anda #%11001111
6693 B76008           (        gmmut.asm):00515          sta gime_0
6696 B7FF90           (        gmmut.asm):00516          sta $ff90
                      (        gmmut.asm):00517         # turn off interrupt flags
6699 4F               (        gmmut.asm):00518          clra
669A B7FF93           (        gmmut.asm):00519          sta $ff93
669D B7FF92           (        gmmut.asm):00520          sta $ff92
                      (        gmmut.asm):00521         # restore PIA
66A0 B66688           (        gmmut.asm):00522          lda save_pia0a
66A3 B7FF01           (        gmmut.asm):00523          sta $ff01
66A6 B66689           (        gmmut.asm):00524          lda save_pia0b
66A9 B7FF03           (        gmmut.asm):00525          sta $ff03
                      (        gmmut.asm):00526         # restore palette
66AC B6668A           (        gmmut.asm):00527          lda save_palette
66AF B7FFBD           (        gmmut.asm):00528          sta $ffbd
66B2 39               (        gmmut.asm):00529          rts
                      (        gmmut.asm):00530          
66B3                  (        gmmut.asm):00531         tt_isr_firq
66B3 3402             (        gmmut.asm):00532          pshs a
66B5 8600             (        gmmut.asm):00533          lda #0 
66B7 B7FFBD           (        gmmut.asm):00534          sta $ffbd
66BA B7FF95           (        gmmut.asm):00535          sta $ff95 # zero timer count down
66BD B7FF94           (        gmmut.asm):00536          sta $ff94
66C0 B6FF93           (        gmmut.asm):00537          lda $ff93
66C3 3502             (        gmmut.asm):00538          puls a
                      (        gmmut.asm):00539         #  inc $401
66C5 3B               (        gmmut.asm):00540          rti
                      (        gmmut.asm):00541         
66C6 0080             (        gmmut.asm):00542         timer_value fdb $0080
66C8                  (        gmmut.asm):00543         tt_isr_irq
66C8 86FF             (        gmmut.asm):00544          lda #$ff
66CA B7FFBD           (        gmmut.asm):00545          sta $ffbd
66CD FC66C6           (        gmmut.asm):00546          ldd timer_value # reset timer count down
66D0 F7FF95           (        gmmut.asm):00547          stb $ff95
66D3 B7FF94           (        gmmut.asm):00548          sta $ff94
                      (        gmmut.asm):00549         #  inc $402
66D6 B6FF92           (        gmmut.asm):00550          lda $ff92 # clear the irq interrupt
66D9 B6FF93           (        gmmut.asm):00551          lda $ff93 # Also clear the firq interrupt
66DC 3B               (        gmmut.asm):00552          rti
                      (        gmmut.asm):00553         
66DD                  (        gmmut.asm):00554         test_task_switching
                      (        gmmut.asm):00555         # Copy current slot 2 and 3 to task 1
66DD 17053F           (        gmmut.asm):00556          bsr strout
66E0 434F505920435552 (        gmmut.asm):00557          fcn "COPY CURRENT SLOT 2 AND 3 TO TASK 1\r"
     52454E5420534C4F
     54203220414E4420
     3320544F20544153
     4B20310D00
6705 B6FFA2           (        gmmut.asm):00558          lda $ffa2
6708 B7FFAA           (        gmmut.asm):00559          sta $ffaa
670B B6FFA3           (        gmmut.asm):00560          lda $ffa3
670E B7FFAB           (        gmmut.asm):00561          sta $ffab
                      (        gmmut.asm):00562         
                      (        gmmut.asm):00563         # Switch to task 1
6711 1702F4           (        gmmut.asm):00564          bsr switch_to_task_1
                      (        gmmut.asm):00565         
                      (        gmmut.asm):00566         # set task 0 slot 4,5 to 3e and 3f
                      (        gmmut.asm):00567         # set task 1 slot 4,5 to 3f and 3e
6714 170508           (        gmmut.asm):00568          bsr strout
6717 534554205441534B (        gmmut.asm):00569          fcc "SET TASK 0 SLOT 4,5 TO 3E AND 3F"
     203020534C4F5420
     342C3520544F2033
     4520414E44203346
6737 534554205441534B (        gmmut.asm):00570          fcn "SET TASK 1 SLOT 4,5 TO 3F AND 3E"
     203120534C4F5420
     342C3520544F2033
     4620414E44203345
     00
6758 863E             (        gmmut.asm):00571          lda #$3e
675A B7FFA4           (        gmmut.asm):00572          sta $ffa4
675D B7FFAD           (        gmmut.asm):00573          sta $ffad
6760 863F             (        gmmut.asm):00574          lda #$3f
6762 B7FFA5           (        gmmut.asm):00575          sta $ffa5
6765 B7FFAC           (        gmmut.asm):00576          sta $ffac
                      (        gmmut.asm):00577          
                      (        gmmut.asm):00578         # write to $8000-$9fff
6768 1704B4           (        gmmut.asm):00579          bsr strout
676B 575249544520544F (        gmmut.asm):00580          fcn "WRITE TO $8000-$9FFF\r"
     2024383030302D24
     394646460D00
6781 8613             (        gmmut.asm):00581          lda #19 # random seed
6783 B76A72           (        gmmut.asm):00582          sta randomseed
6786 8E8000           (        gmmut.asm):00583          ldx #$8000
6789                  (        gmmut.asm):00584         tts_loop1
6789 1702CE           (        gmmut.asm):00585          bsr randomeor
678C A780             (        gmmut.asm):00586          sta ,x+
678E 8CA000           (        gmmut.asm):00587          cmpx #$a000
6791 26F6             (        gmmut.asm):00588          bne tts_loop1
                      (        gmmut.asm):00589          
                      (        gmmut.asm):00590         # switch to task 0
6793 17028F           (        gmmut.asm):00591          bsr switch_to_task_0
                      (        gmmut.asm):00592          
                      (        gmmut.asm):00593         # test $a000-$bfff, expect pass
6796 170486           (        gmmut.asm):00594          bsr strout
6799 5445535420244130 (        gmmut.asm):00595          fcn "TEST $A000-$BFFF\r"
     30302D2442464646
     0D00
67AB 8613             (        gmmut.asm):00596          lda #19 # random seed
67AD B76A72           (        gmmut.asm):00597          sta randomseed
67B0 8EA000           (        gmmut.asm):00598          ldx #$a000
67B3                  (        gmmut.asm):00599         tts_loop2
67B3 1702A4           (        gmmut.asm):00600          bsr randomeor
67B6 A180             (        gmmut.asm):00601          cmpa ,x+
67B8 1026007D         (        gmmut.asm):00602          bne tts_fail
67BC 8CC000           (        gmmut.asm):00603          cmpx #$c000
67BF 26F2             (        gmmut.asm):00604          bne tts_loop2
                      (        gmmut.asm):00605         
                      (        gmmut.asm):00606         # write to $8000-$9fff
67C1 17045B           (        gmmut.asm):00607          bsr strout
67C4 575249544520544F (        gmmut.asm):00608          fcn "WRITE TO $8000-$9FFF\r"
     2024383030302D24
     394646460D00
67DA 869A             (        gmmut.asm):00609          lda #154 # different random seed
67DC B76A72           (        gmmut.asm):00610          sta randomseed
67DF 8E8000           (        gmmut.asm):00611          ldx #$8000
67E2                  (        gmmut.asm):00612         tts_loop3
67E2 170275           (        gmmut.asm):00613          bsr randomeor
67E5 A780             (        gmmut.asm):00614          sta ,x+
67E7 8CA000           (        gmmut.asm):00615          cmpx #$a000
67EA 26F6             (        gmmut.asm):00616          bne tts_loop3
                      (        gmmut.asm):00617         
                      (        gmmut.asm):00618         # switch to task 1
67EC 170219           (        gmmut.asm):00619          bsr switch_to_task_1
                      (        gmmut.asm):00620         
                      (        gmmut.asm):00621         # test $8000-$9fff expect fail
67EF 17042D           (        gmmut.asm):00622          bsr strout
67F2 5445535420243830 (        gmmut.asm):00623          fcn "TEST $8000-$9FFF\r"
     30302D2439464646
     0D00
6804 86FF             (        gmmut.asm):00624          lda #$ff
6806 B7682C           (        gmmut.asm):00625          sta tts_pass_flag
6809 869A             (        gmmut.asm):00626          lda #154 # different random seed
680B B76A72           (        gmmut.asm):00627          sta randomseed
680E 8E8000           (        gmmut.asm):00628          ldx #$8000
6811                  (        gmmut.asm):00629         tts_loop4
6811 170246           (        gmmut.asm):00630          bsr randomeor
6814 A180             (        gmmut.asm):00631          cmpa ,x+
6816 10270003         (        gmmut.asm):00632          beq tts_skip
681A 7F682C           (        gmmut.asm):00633          clr tts_pass_flag
681D                  (        gmmut.asm):00634         tts_skip
681D 8CA000           (        gmmut.asm):00635          cmpx #$a000
6820 26EF             (        gmmut.asm):00636          bne tts_loop4
6822 B6682C           (        gmmut.asm):00637          lda tts_pass_flag
6825 10270004         (        gmmut.asm):00638          beq tts_pass
6829 16000D           (        gmmut.asm):00639          bra tts_fail
                      (        gmmut.asm):00640          
682C                  (        gmmut.asm):00641         tts_pass_flag rmb 1
                      (        gmmut.asm):00642         
                      (        gmmut.asm):00643         # pass
682D                  (        gmmut.asm):00644         tts_pass
682D 1703EF           (        gmmut.asm):00645          bsr strout
6830 504153530D00     (        gmmut.asm):00646          fcn "PASS\r"
6836 160009           (        gmmut.asm):00647          bra tts_done
                      (        gmmut.asm):00648         
6839                  (        gmmut.asm):00649         tts_fail
6839 1703E3           (        gmmut.asm):00650          bsr strout
683C 4641494C0D00     (        gmmut.asm):00651          fcn "FAIL\r"
                      (        gmmut.asm):00652          
                      (        gmmut.asm):00653         # switch to task 0
6842                  (        gmmut.asm):00654         tts_done
6842 1701E0           (        gmmut.asm):00655          bsr switch_to_task_0
6845 39               (        gmmut.asm):00656          rts
                      (        gmmut.asm):00657         
6846                  (        gmmut.asm):00658         test_constant_ram
                      (        gmmut.asm):00659         # switch to task 0
6846 BD6A25           (        gmmut.asm):00660          jsr switch_to_task_0
                      (        gmmut.asm):00661         
                      (        gmmut.asm):00662         # copy code to task 1
6849 B6FFA2           (        gmmut.asm):00663          lda $ffa2
684C B7FFAA           (        gmmut.asm):00664          sta $ffaa
684F B6FFA3           (        gmmut.asm):00665          lda $ffa3
6852 B7FFAB           (        gmmut.asm):00666          sta $ffab
                      (        gmmut.asm):00667          
6855 1703C7           (        gmmut.asm):00668          bsr strout
6858 5345545550204241 (        gmmut.asm):00669          fcn "SETUP BANKS (TASK 0)\r"
     4E4B532028544153
     4B2030290D00
686E 863F             (        gmmut.asm):00670          lda #$3f
6870 B7FFA4           (        gmmut.asm):00671          sta $ffa4
6873 863E             (        gmmut.asm):00672          lda #$3e
6875 B7FFA7           (        gmmut.asm):00673          sta $ffa7
                      (        gmmut.asm):00674          
6878 BD68DD           (        gmmut.asm):00675          jsr do_const_ram_test
687B 1027000D         (        gmmut.asm):00676          beq tcr_do_task_1
687F                  (        gmmut.asm):00677         tcr_fail
                      (        gmmut.asm):00678         # switch to task 0
687F BD6A25           (        gmmut.asm):00679          jsr switch_to_task_0
                      (        gmmut.asm):00680         # bail
6882 17039A           (        gmmut.asm):00681          bsr strout
6885 4641494C0D00     (        gmmut.asm):00682          fcn "FAIL\r"
688B 39               (        gmmut.asm):00683          rts
                      (        gmmut.asm):00684         
688C                  (        gmmut.asm):00685         tcr_do_task_1
688C 170390           (        gmmut.asm):00686          bsr strout
688F 504153530D00     (        gmmut.asm):00687          fcn "PASS\r"
                      (        gmmut.asm):00688         # switch to task 1
6895 BD6A08           (        gmmut.asm):00689          jsr switch_to_task_1
                      (        gmmut.asm):00690         
6898 170384           (        gmmut.asm):00691          bsr strout
689B 5345545550204241 (        gmmut.asm):00692          fcn "SETUP BANKS (TASK 1)\r"
     4E4B532028544153
     4B2031290D00
68B1 863F             (        gmmut.asm):00693          lda #$3f
68B3 B7FFAC           (        gmmut.asm):00694          sta $ffac
68B6 863E             (        gmmut.asm):00695          lda #$3e
68B8 B7FFAF           (        gmmut.asm):00696          sta $ffaf
                      (        gmmut.asm):00697         
                      (        gmmut.asm):00698         # clear out test buffers
68BB 8600             (        gmmut.asm):00699          lda #0
68BD 8EFE00           (        gmmut.asm):00700          ldx #$fe00
68C0 BD69D4           (        gmmut.asm):00701          jsr write_seed_256
68C3 8600             (        gmmut.asm):00702          lda #0
68C5 8E9E00           (        gmmut.asm):00703          ldx #$9e00
68C8 BD69D4           (        gmmut.asm):00704          jsr write_seed_256
                      (        gmmut.asm):00705         
68CB BD68DD           (        gmmut.asm):00706          jsr do_const_ram_test
68CE 26AF             (        gmmut.asm):00707          bne tcr_fail
68D0 170152           (        gmmut.asm):00708          bsr switch_to_task_0 
68D3 170349           (        gmmut.asm):00709          bsr strout
68D6 504153530D00     (        gmmut.asm):00710          fcn "PASS\r"
68DC 39               (        gmmut.asm):00711          rts
                      (        gmmut.asm):00712          
68DD                  (        gmmut.asm):00713         do_const_ram_test 
68DD 17033F           (        gmmut.asm):00714          bsr strout
68E0 5455524E204F4E20 (        gmmut.asm):00715          fcn "TURN ON CONST RAM\r"
     434F4E5354205241
     4D0D00
68F3 B66008           (        gmmut.asm):00716          lda gime_0
68F6 8A08             (        gmmut.asm):00717          ora #%00001000
68F8 B76008           (        gmmut.asm):00718          sta gime_0
68FB B7FF90           (        gmmut.asm):00719          sta $ff90
                      (        gmmut.asm):00720          
68FE 17031E           (        gmmut.asm):00721          bsr strout
6901 5752495445205345 (        gmmut.asm):00722          fcn "WRITE SEED #87 TO $FE00-$FEFF\r"
     4544202338372054
     4F2024464530302D
     24464546460D00
6920 8657             (        gmmut.asm):00723          lda #87
6922 8EFE00           (        gmmut.asm):00724          ldx #$fe00
6925 BD69D4           (        gmmut.asm):00725          jsr write_seed_256
                      (        gmmut.asm):00726          
6928 1702F4           (        gmmut.asm):00727          bsr strout
692B 5445535420534545 (        gmmut.asm):00728          fcn "TEST SEED #87 ON $9E00-$9EFF\r"
     4420233837204F4E
     2024394530302D24
     394546460D00
6949 8657             (        gmmut.asm):00729          lda #87
694B 8E9E00           (        gmmut.asm):00730          ldx #$9e00
694E BD69E9           (        gmmut.asm):00731          jsr test_seed_256
6951 1026007C         (        gmmut.asm):00732          bne do_tcr_fail
                      (        gmmut.asm):00733          
6955 1702C7           (        gmmut.asm):00734          bsr strout
6958 5455524E204F4646 (        gmmut.asm):00735          fcn "TURN OFF CONST RAM\r"
     20434F4E53542052
     414D0D00
696C B66008           (        gmmut.asm):00736          lda gime_0
696F 84F7             (        gmmut.asm):00737          anda #%11110111
6971 B76008           (        gmmut.asm):00738          sta gime_0
6974 B7FF90           (        gmmut.asm):00739          sta $ff90
                      (        gmmut.asm):00740         
6977 1702A5           (        gmmut.asm):00741          bsr strout
697A 5752495445205345 (        gmmut.asm):00742          fcn "WRITE SEED #92 TO $FE00-$FEFF\r"
     4544202339322054
     4F2024464530302D
     24464546460D00
6999 865C             (        gmmut.asm):00743          lda #92
699B 8EFE00           (        gmmut.asm):00744          ldx #$fe00
699E BD69D4           (        gmmut.asm):00745          jsr write_seed_256
                      (        gmmut.asm):00746         
69A1 17027B           (        gmmut.asm):00747          bsr strout
69A4 5445535420534545 (        gmmut.asm):00748          fcn "TEST SEED #87 ON $9E00-$9EFF\r"
     4420233837204F4E
     2024394530302D24
     394546460D00
69C2 8657             (        gmmut.asm):00749          lda #87
69C4 8E9E00           (        gmmut.asm):00750          ldx #$9e00
69C7 BD69E9           (        gmmut.asm):00751          jsr test_seed_256
69CA 10260003         (        gmmut.asm):00752          bne do_tcr_fail
                      (        gmmut.asm):00753         
69CE 1A04             (        gmmut.asm):00754          orcc #%00000100 # set z, pass
69D0 39               (        gmmut.asm):00755          rts
                      (        gmmut.asm):00756          
69D1                  (        gmmut.asm):00757         do_tcr_fail
69D1 1CFB             (        gmmut.asm):00758          andcc #%11111011 # clear z, fail
69D3 39               (        gmmut.asm):00759          rts
                      (        gmmut.asm):00760         
                      (        gmmut.asm):00761         # subroutine
69D4                  (        gmmut.asm):00762         write_seed_256
69D4 B76A72           (        gmmut.asm):00763          sta randomseed
69D7 1F10             (        gmmut.asm):00764          tfr x,d
69D9 C30100           (        gmmut.asm):00765          addd #$100
69DC 3406             (        gmmut.asm):00766          pshs d
69DE                  (        gmmut.asm):00767         ws256_loop
69DE BD6A5A           (        gmmut.asm):00768          jsr randomeor
69E1 A780             (        gmmut.asm):00769          sta ,x+
69E3 ACE4             (        gmmut.asm):00770          cmpx ,s
69E5 26F7             (        gmmut.asm):00771          bne ws256_loop
69E7 3590             (        gmmut.asm):00772          puls x,pc
                      (        gmmut.asm):00773          
                      (        gmmut.asm):00774         # subroutine
69E9                  (        gmmut.asm):00775         test_seed_256
69E9 B76A72           (        gmmut.asm):00776          sta randomseed
69EC 1F10             (        gmmut.asm):00777          tfr x,d
69EE C30100           (        gmmut.asm):00778          addd #$100
69F1 3406             (        gmmut.asm):00779          pshs d
69F3                  (        gmmut.asm):00780         ts256_loop
69F3 BD6A5A           (        gmmut.asm):00781          jsr randomeor
69F6 A180             (        gmmut.asm):00782          cmpa ,x+
69F8 10260008         (        gmmut.asm):00783          bne ts256_fail
69FC ACE4             (        gmmut.asm):00784          cmpx ,s
69FE 26F3             (        gmmut.asm):00785          bne ts256_loop
6A00                  (        gmmut.asm):00786         ts256_pass
6A00 1A04             (        gmmut.asm):00787          orcc #%00000100 # set z
6A02 3590             (        gmmut.asm):00788          puls x,pc
6A04                  (        gmmut.asm):00789         ts256_fail
6A04 1CFB             (        gmmut.asm):00790          andcc #%11111011 # clear z
6A06 3590             (        gmmut.asm):00791          puls x,pc
                      (        gmmut.asm):00792         
                      (        gmmut.asm):00793         # subroutine
6A08                  (        gmmut.asm):00794         switch_to_task_1
6A08 170214           (        gmmut.asm):00795          bsr strout
6A0B 5357495443482054 (        gmmut.asm):00796          fcn "SWITCH TO TASK 1\r"
     4F205441534B2031
     0D00
6A1D B66009           (        gmmut.asm):00797          lda gime_1
6A20 8A01             (        gmmut.asm):00798          ora #%00000001
6A22 16001A           (        gmmut.asm):00799          bra stt1_entry
                      (        gmmut.asm):00800         
                      (        gmmut.asm):00801         # subroutine
6A25                  (        gmmut.asm):00802         switch_to_task_0
6A25 1701F7           (        gmmut.asm):00803          bsr strout
6A28 5357495443482054 (        gmmut.asm):00804          fcn "SWITCH TO TASK 0\r"
     4F205441534B2030
     0D00
6A3A B66009           (        gmmut.asm):00805          lda gime_1
6A3D 84FE             (        gmmut.asm):00806          anda #%11111110
6A3F                  (        gmmut.asm):00807         stt1_entry
6A3F B76009           (        gmmut.asm):00808          sta gime_1
6A42 B7FF91           (        gmmut.asm):00809          sta $ff91
6A45 39               (        gmmut.asm):00810          rts
                      (        gmmut.asm):00811          
                      (        gmmut.asm):00812         #subroutine
6A46                  (        gmmut.asm):00813         turn_off_mmu
6A46 B66008           (        gmmut.asm):00814          lda gime_0
6A49 84BF             (        gmmut.asm):00815          anda #%10111111
6A4B 160005           (        gmmut.asm):00816          bra tom_entry
                      (        gmmut.asm):00817         #subroutine
6A4E                  (        gmmut.asm):00818         turn_on_mmu
6A4E B66008           (        gmmut.asm):00819          lda gime_0
6A51 8A40             (        gmmut.asm):00820          ora #%01000000
6A53                  (        gmmut.asm):00821         tom_entry
6A53 B76008           (        gmmut.asm):00822          sta gime_0
6A56 B7FF90           (        gmmut.asm):00823          sta $ff90
6A59 39               (        gmmut.asm):00824          rts
                      (        gmmut.asm):00825         
                      (        gmmut.asm):00826         
                      (        gmmut.asm):00827         
                      (        gmmut.asm):00828         # ---------------------------------------------------------------
                      (        gmmut.asm):00829         # RandomEor sub
                      (        gmmut.asm):00830         # Pick random number from 0 to 255
                      (        gmmut.asm):00831         # Entry: randomseed
                      (        gmmut.asm):00832         # Exit: A = number produced
                      (        gmmut.asm):00833         # Uses a,b
                      (        gmmut.asm):00834         # ---------------------------------------------------------------
6A5A                  (        gmmut.asm):00835         randomeor:
6A5A F66A72           (        gmmut.asm):00836          ldb randomseed # get last random number
6A5D 10270009         (        gmmut.asm):00837          beq doeor # handle input of zero
6A61 58               (        gmmut.asm):00838          aslb # shift it left, clear bit zero
6A62 10270006         (        gmmut.asm):00839          beq rndready # if the input was $80, skip the eor
6A66 10240002         (        gmmut.asm):00840          bcc rndready # if the carry is now clear skip the eor
6A6A                  (        gmmut.asm):00841         doeor:
6A6A C81D             (        gmmut.asm):00842          eorb #$1d # eor with magic number %00011101
6A6C                  (        gmmut.asm):00843         rndready:
6A6C F76A72           (        gmmut.asm):00844          stb randomseed # save the output as the new seed
6A6F 1F98             (        gmmut.asm):00845          tfr b,a
6A71 39               (        gmmut.asm):00846          rts          
                      (        gmmut.asm):00847         
6A72                  (        gmmut.asm):00848         randomseed rmb 1  
                      (        gmmut.asm):00849         
6A73                  (        gmmut.asm):00850         test_ram
6A73 863C             (        gmmut.asm):00851          lda #$3c
6A75 B7FFA4           (        gmmut.asm):00852          sta $ffa4
6A78 1701A4           (        gmmut.asm):00853          bsr strout
6A7B 54455354204F4E4C (        gmmut.asm):00854          fcn "TEST ONLY RAM PAGE $3C (BETA)\r"
     592052414D205041
     4745202433432028
     42455441290D00
                      (        gmmut.asm):00855         # Set Sam to PMODE 4
6A9A 86F0             (        gmmut.asm):00856          lda #%11110000
6A9C B7FFC5           (        gmmut.asm):00857          sta $ffc5
6A9F B7FFC3           (        gmmut.asm):00858          sta $ffc3
6AA2 B7FFC0           (        gmmut.asm):00859          sta $ffc0
6AA5 B7FF22           (        gmmut.asm):00860          sta $ff22
                      (        gmmut.asm):00861         # set SAM to base address ($8000)
                      (        gmmut.asm):00862         # for video
6AA8 8640             (        gmmut.asm):00863          lda #$40
6AAA 170117           (        gmmut.asm):00864          bsr store_a_into_sam_offset
                      (        gmmut.asm):00865         
6AAD 17006F           (        gmmut.asm):00866          bsr mu_start
6AB0 1026001D         (        gmmut.asm):00867          bne tr_fail
6AB4                  (        gmmut.asm):00868         tr_pass
                      (        gmmut.asm):00869         # Set Sam to text mode
6AB4 8600             (        gmmut.asm):00870          lda #$00
6AB6 B7FFC0           (        gmmut.asm):00871          sta $ffc0
6AB9 B7FFC2           (        gmmut.asm):00872          sta $ffc2
6ABC B7FFC4           (        gmmut.asm):00873          sta $ffc4
6ABF B7FF22           (        gmmut.asm):00874          sta $ff22
                      (        gmmut.asm):00875         # set SAM to text screen base address ($0400)
                      (        gmmut.asm):00876         # for video
6AC2 8602             (        gmmut.asm):00877          lda #%00000010
6AC4 1700FD           (        gmmut.asm):00878          bsr store_a_into_sam_offset
6AC7 170155           (        gmmut.asm):00879          bsr strout
6ACA 504153530D00     (        gmmut.asm):00880          fcn "PASS\r"
6AD0 39               (        gmmut.asm):00881          rts
6AD1                  (        gmmut.asm):00882         tr_fail
6AD1 3422             (        gmmut.asm):00883          pshs a,y
                      (        gmmut.asm):00884         # Set Sam to text mode
6AD3 8600             (        gmmut.asm):00885          lda #$00
6AD5 B7FFC0           (        gmmut.asm):00886          sta $ffc0
6AD8 B7FFC2           (        gmmut.asm):00887          sta $ffc2
6ADB B7FFC4           (        gmmut.asm):00888          sta $ffc4
6ADE B7FF22           (        gmmut.asm):00889          sta $ff22
                      (        gmmut.asm):00890         # set SAM to text screen base address ($0400)
                      (        gmmut.asm):00891         # for video
6AE1 8602             (        gmmut.asm):00892          lda #%00000010
6AE3 1700DE           (        gmmut.asm):00893          bsr store_a_into_sam_offset
6AE6 170136           (        gmmut.asm):00894          bsr strout
6AE9 4641494C20424954 (        gmmut.asm):00895          fcn "FAIL BITS: $"
     533A202400
6AF6 3502             (        gmmut.asm):00896          puls a
6AF8 170133           (        gmmut.asm):00897          bsr charout_hex
                      (        gmmut.asm):00898         
6AFB 170121           (        gmmut.asm):00899          bsr strout
6AFE 0D4641494C204144 (        gmmut.asm):00900          fcn "\rFAIL ADDRESS: $"
     44524553533A2024
     00
6B0F 3502             (        gmmut.asm):00901          puls a
6B11 17011A           (        gmmut.asm):00902          bsr charout_hex
6B14 3502             (        gmmut.asm):00903          puls a
6B16 170115           (        gmmut.asm):00904          bsr charout_hex
6B19 170103           (        gmmut.asm):00905          bsr strout
6B1C 0D00             (        gmmut.asm):00906          fcn "\r"
6B1E 39               (        gmmut.asm):00907          rts
                      (        gmmut.asm):00908          
                      (        gmmut.asm):00909          include "marchu_6809.asm"
                      (  marchu_6809.asm):00001         ; March U
                      (  marchu_6809.asm):00002         ; Inspired by
                      (  marchu_6809.asm):00003         ; https://github.com/misterblack1/appleII_deadtest
                      (  marchu_6809.asm):00004         
     8000             (  marchu_6809.asm):00005         start_memory equ $8000
     A000             (  marchu_6809.asm):00006         end_memory equ $a000
                      (  marchu_6809.asm):00007         
6B1F                  (  marchu_6809.asm):00008         mu_start
6B1F 108E6BB8         (  marchu_6809.asm):00009          ldy #test_table
                      (  marchu_6809.asm):00010          
6B23                  (  marchu_6809.asm):00011         marchU
6B23 A6A4             (  marchu_6809.asm):00012          lda ,y                 ; get the test value into a
6B25 1F89             (  marchu_6809.asm):00013          tfr a,b                ; save the test value into b
6B27 8E8000           (  marchu_6809.asm):00014          ldx #start_memory
                      (  marchu_6809.asm):00015         
6B2A                  (  marchu_6809.asm):00016         marchU0
6B2A A780             (  marchu_6809.asm):00017          sta ,x+                ; w0 - write the test value
6B2C 8CA000           (  marchu_6809.asm):00018          cmpx #end_memory
6B2F 26F9             (  marchu_6809.asm):00019          bne marchU0
                      (  marchu_6809.asm):00020          
6B31 8E8000           (  marchu_6809.asm):00021          ldx #start_memory
6B34                  (  marchu_6809.asm):00022         marchU1
6B34 A884             (  marchu_6809.asm):00023          eora ,x                ; r0 - read and compare with test value (by XOR'ing with accumulator)
6B36 10260032         (  marchu_6809.asm):00024          bne mem_bad    ; if bits differ, location is bad
6B3A 1F98             (  marchu_6809.asm):00025          tfr b,a                ; get the test value
6B3C 43               (  marchu_6809.asm):00026          coma                   ; invert
6B3D A784             (  marchu_6809.asm):00027          sta ,x                 ; w1 - write the inverted test value
6B3F A884             (  marchu_6809.asm):00028          eora ,x                ; r1 - read the same value back and compare using XOR
6B41 10260027         (  marchu_6809.asm):00029          bne mem_bad    ; if bits differ, location is bad
6B45 1F98             (  marchu_6809.asm):00030          tfr b,a                ; get the test value
6B47 A780             (  marchu_6809.asm):00031          sta ,x+                ; w0 - write the test value to the memory location
6B49 8CA000           (  marchu_6809.asm):00032          cmpx #end_memory
6B4C 26E6             (  marchu_6809.asm):00033          bne marchU1
                      (  marchu_6809.asm):00034          
6B4E                  (  marchu_6809.asm):00035         marchU1delay
6B4E 17001E           (  marchu_6809.asm):00036          bsr delay100ms
                      (  marchu_6809.asm):00037                 
6B51 8E8000           (  marchu_6809.asm):00038          ldx #start_memory
                      (  marchu_6809.asm):00039         #step 2; up - r0,w1
6B54                  (  marchu_6809.asm):00040         marchU2
6B54 1F98             (  marchu_6809.asm):00041          tfr b,a                ; recover test value
6B56 A884             (  marchu_6809.asm):00042          eora ,x                ; r0 - read and compare with test value (by XOR'ing with accumulator)
6B58 10260010         (  marchu_6809.asm):00043          bne mem_bad    ; if bits differ, location is bad
6B5C 1F98             (  marchu_6809.asm):00044          tfr b,a                ; get the test value
6B5E 43               (  marchu_6809.asm):00045          coma                   ; invert
6B5F A780             (  marchu_6809.asm):00046          sta ,x+                ; w1 - write the inverted test value
6B61 8CA000           (  marchu_6809.asm):00047          cmpx #end_memory
6B64 26EE             (  marchu_6809.asm):00048          bne marchU2
                      (  marchu_6809.asm):00049          
6B66                  (  marchu_6809.asm):00050         marchU2delay
6B66 170006           (  marchu_6809.asm):00051          bsr delay100ms
6B69 16000B           (  marchu_6809.asm):00052          bra continue
                      (  marchu_6809.asm):00053          
6B6C                  (  marchu_6809.asm):00054         mem_bad
6B6C 7E6BB5           (  marchu_6809.asm):00055          jmp mem_error
                      (  marchu_6809.asm):00056         
6B6F                  (  marchu_6809.asm):00057         delay100ms
6B6F 8E0000           (  marchu_6809.asm):00058          ldx #$0
                      (  marchu_6809.asm):00059         !
6B72 3001             (  marchu_6809.asm):00060          leax 1,x
6B74 26FC             (  marchu_6809.asm):00061          bne <
6B76 39               (  marchu_6809.asm):00062          rts
                      (  marchu_6809.asm):00063                  
6B77                  (  marchu_6809.asm):00064         continue
6B77 8E9FFF           (  marchu_6809.asm):00065          ldx #end_memory-1
6B7A 1F98             (  marchu_6809.asm):00066          tfr b,a                ; recover test value
6B7C 43               (  marchu_6809.asm):00067          coma                   ; invert
                      (  marchu_6809.asm):00068         
                      (  marchu_6809.asm):00069         ; step 3; down - r1,w0,r0,w1
6B7D                  (  marchu_6809.asm):00070         marchU3
6B7D A884             (  marchu_6809.asm):00071          eora ,x                ; r1 - read and compare with inverted test value (by XOR'ing with accumulator)
6B7F 26EB             (  marchu_6809.asm):00072          bne mem_bad    ; if bits differ, location is bad
6B81 1F98             (  marchu_6809.asm):00073          tfr b,a                ; get the test value
6B83 A784             (  marchu_6809.asm):00074          sta ,x                 ; w0 - write the test value
6B85 A884             (  marchu_6809.asm):00075          eora ,x                ; r0 - read the same value back and compare using XOR
6B87 26E3             (  marchu_6809.asm):00076          bne mem_bad    ; if bits differ, location is bad
6B89 1F98             (  marchu_6809.asm):00077          tfr b,a                ; get a fresh copy of the test value
6B8B 43               (  marchu_6809.asm):00078          coma                   ; invert
6B8C A784             (  marchu_6809.asm):00079          sta ,x                 ; w1 - write the inverted test value
6B8E 301F             (  marchu_6809.asm):00080          leax -1,x              ; count down
6B90 8C7FFF           (  marchu_6809.asm):00081          cmpx #start_memory-1   ; did we wrap?
6B93 26E8             (  marchu_6809.asm):00082          bne marchU3    ; repeat until Y overflows back to FF
                      (  marchu_6809.asm):00083         
                      (  marchu_6809.asm):00084         ; step 4; down - r1,w0
6B95 8E9FFF           (  marchu_6809.asm):00085          ldx #end_memory-1
6B98                  (  marchu_6809.asm):00086         marchU4
6B98 A884             (  marchu_6809.asm):00087          eora ,x                ; r1 - read and compare with inverted test value (by XOR'ing with accumulator)
6B9A 26D0             (  marchu_6809.asm):00088          bne mem_bad    ; if bits differ, location is bad
6B9C 1F98             (  marchu_6809.asm):00089          tfr b,a                ; get the test value
6B9E A784             (  marchu_6809.asm):00090          sta ,x                 ; w0 - write the test value
6BA0 43               (  marchu_6809.asm):00091          coma                   ; invert
6BA1 301F             (  marchu_6809.asm):00092          leax -1,x              ; count down
6BA3 8C7FFF           (  marchu_6809.asm):00093          cmpx #start_memory-1   ; did we wrap?
6BA6 26F0             (  marchu_6809.asm):00094          bne marchU4    ; repeat until Y overflows back to FF
                      (  marchu_6809.asm):00095         
6BA8 3121             (  marchu_6809.asm):00096          leay 1,y               ; choose the next one
6BAA 108C6BC4         (  marchu_6809.asm):00097          cmpy #test_table_end
6BAE 1026FF71         (  marchu_6809.asm):00098          lbne marchU            ; start again with next value
                      (  marchu_6809.asm):00099         
6BB2                  (  marchu_6809.asm):00100         mem_good
6BB2 1A04             (  marchu_6809.asm):00101          orcc #%00000100 # set z
6BB4 39               (  marchu_6809.asm):00102          rts
                      (  marchu_6809.asm):00103         
6BB5                  (  marchu_6809.asm):00104         mem_error
6BB5 1CFB             (  marchu_6809.asm):00105          andcc #%11111011 # clear z
6BB7 39               (  marchu_6809.asm):00106          rts
                      (  marchu_6809.asm):00107         
6BB8                  (  marchu_6809.asm):00108         test_table
6BB8 80402010         (  marchu_6809.asm):00109          fcb $80,$40,$20,$10
6BBC 08040201         (  marchu_6809.asm):00110          fcb $08,$04,$02,$01
6BC0 00FFA55A         (  marchu_6809.asm):00111          fcb $00,$FF,$A5,$5A 
     6BC4             (  marchu_6809.asm):00112         test_table_end equ *
                      (  marchu_6809.asm):00113          
                      (        gmmut.asm):00910         
                      (        gmmut.asm):00911         # 
                      (        gmmut.asm):00912         #
                      (        gmmut.asm):00913         # subroutine
                      (        gmmut.asm):00914         # Store reg a into sam video offset register
                      (        gmmut.asm):00915         #
6BC4                  (        gmmut.asm):00916         store_a_into_sam_offset
6BC4 C607             (        gmmut.asm):00917          ldb #7
6BC6 8EFFC6           (        gmmut.asm):00918          ldx #$ffc6
6BC9                  (        gmmut.asm):00919         loop_store_a
6BC9 46               (        gmmut.asm):00920          rora
6BCA 10240007         (        gmmut.asm):00921          bcc set_clear
6BCE                  (        gmmut.asm):00922         set_set
6BCE 3001             (        gmmut.asm):00923          leax 1,x
6BD0 A780             (        gmmut.asm):00924          sta ,x+
6BD2 160002           (        gmmut.asm):00925          bra set_done
6BD5                  (        gmmut.asm):00926         set_clear
6BD5 A781             (        gmmut.asm):00927          sta ,x++
6BD7                  (        gmmut.asm):00928         set_done 
6BD7 5A               (        gmmut.asm):00929          decb
6BD8 26EF             (        gmmut.asm):00930          bne loop_store_a
6BDA 39               (        gmmut.asm):00931          rts
                      (        gmmut.asm):00932         
                      (        gmmut.asm):00933         #
                      (        gmmut.asm):00934         # subroutine
                      (        gmmut.asm):00935         # turn off all interrupts
                      (        gmmut.asm):00936         #
6BDB                  (        gmmut.asm):00937         turn_off_ints
6BDB 1A50             (        gmmut.asm):00938          orcc #$50
6BDD 39               (        gmmut.asm):00939          rts
                      (        gmmut.asm):00940         
                      (        gmmut.asm):00941         #
                      (        gmmut.asm):00942         # subroutine
                      (        gmmut.asm):00943         # turn on all interrupts
                      (        gmmut.asm):00944         #
6BDE                  (        gmmut.asm):00945         turn_on_ints
6BDE 1CAF             (        gmmut.asm):00946          andcc #$af
6BE0 39               (        gmmut.asm):00947          rts
                      (        gmmut.asm):00948          
6BE1                  (        gmmut.asm):00949         saved_task rmb 8
                      (        gmmut.asm):00950          
6BE9                  (        gmmut.asm):00951         restore_task_0
                      (        gmmut.asm):00952         #
                      (        gmmut.asm):00953         # subroutine
                      (        gmmut.asm):00954         # restore mmu regs at ffa0
                      (        gmmut.asm):00955         #
6BE9 108E6BE1         (        gmmut.asm):00956          ldy #saved_task
6BED 8EFFA0           (        gmmut.asm):00957          ldx #$ffa0
6BF0 160007           (        gmmut.asm):00958          bra copy_task
                      (        gmmut.asm):00959          
6BF3                  (        gmmut.asm):00960         save_task_0
                      (        gmmut.asm):00961         #
                      (        gmmut.asm):00962         # subroutine
                      (        gmmut.asm):00963         # save mmu regs at ffa0
                      (        gmmut.asm):00964         #
6BF3 108EFFA0         (        gmmut.asm):00965          ldy #$ffa0
6BF7 8E6BE1           (        gmmut.asm):00966          ldx #saved_task
6BFA                  (        gmmut.asm):00967         copy_task
6BFA ECA1             (        gmmut.asm):00968          ldd ,y++
6BFC ED81             (        gmmut.asm):00969          std ,x++
6BFE ECA1             (        gmmut.asm):00970          ldd ,y++
6C00 ED81             (        gmmut.asm):00971          std ,x++
6C02 ECA1             (        gmmut.asm):00972          ldd ,y++
6C04 ED81             (        gmmut.asm):00973          std ,x++
6C06 ECA1             (        gmmut.asm):00974          ldd ,y++
6C08 ED81             (        gmmut.asm):00975          std ,x++
6C0A 39               (        gmmut.asm):00976          rts
                      (        gmmut.asm):00977         
6C0B                  (        gmmut.asm):00978         clear_screen
                      (        gmmut.asm):00979         #
                      (        gmmut.asm):00980         # subroutine
                      (        gmmut.asm):00981         # clear the text screen
                      (        gmmut.asm):00982         #
6C0B 8E0400           (        gmmut.asm):00983          ldx #$0400
6C0E CC6060           (        gmmut.asm):00984          ldd #$6060
6C11                  (        gmmut.asm):00985         cs_loop
6C11 ED81             (        gmmut.asm):00986          std ,x++
6C13 8C0600           (        gmmut.asm):00987          cmpx #$600
6C16 26F9             (        gmmut.asm):00988          bne cs_loop
6C18 7F6006           (        gmmut.asm):00989          clr text_position
6C1B 7F6007           (        gmmut.asm):00990          clr text_position+1
6C1E 39               (        gmmut.asm):00991          rts
                      (        gmmut.asm):00992          
6C1F                  (        gmmut.asm):00993         strout
                      (        gmmut.asm):00994         #
                      (        gmmut.asm):00995         # subroutine
                      (        gmmut.asm):00996         # Output string to screen
                      (        gmmut.asm):00997         #
6C1F 3540             (        gmmut.asm):00998          puls u
6C21                  (        gmmut.asm):00999         so_loop
6C21 A6C0             (        gmmut.asm):01000          lda ,u+
6C23 10270005         (        gmmut.asm):01001          beq so_done
6C27 BD6C59           (        gmmut.asm):01002          jsr chrout
6C2A 20F5             (        gmmut.asm):01003          bra so_loop
6C2C                  (        gmmut.asm):01004         so_done
6C2C 1F35             (        gmmut.asm):01005          tfr u,pc
                      (        gmmut.asm):01006         
6C2E                  (        gmmut.asm):01007         charout_hex
6C2E 3432             (        gmmut.asm):01008          pshs a,y,x
6C30 108E6C49         (        gmmut.asm):01009          ldy #hex_ascii
6C34 44               (        gmmut.asm):01010          lsra
6C35 44               (        gmmut.asm):01011          lsra
6C36 44               (        gmmut.asm):01012          lsra
6C37 44               (        gmmut.asm):01013          lsra
6C38 A6A6             (        gmmut.asm):01014          lda a,y
6C3A BD6C59           (        gmmut.asm):01015          jsr chrout
6C3D A6E4             (        gmmut.asm):01016          lda ,s
6C3F 840F             (        gmmut.asm):01017          anda #$0f
6C41 A6A6             (        gmmut.asm):01018          lda a,y
6C43 BD6C59           (        gmmut.asm):01019          jsr chrout
6C46 3532             (        gmmut.asm):01020          puls a,y,x
6C48 39               (        gmmut.asm):01021          rts
                      (        gmmut.asm):01022         
6C49 3031323334353637 (        gmmut.asm):01023         hex_ascii fcc "0123456789ABCDEF"
     3839414243444546
                      (        gmmut.asm):01024         
6C59                  (        gmmut.asm):01025         chrout
                      (        gmmut.asm):01026         #
                      (        gmmut.asm):01027         # subroutine
                      (        gmmut.asm):01028         # output to text screen
                      (        gmmut.asm):01029         #
6C59 810D             (        gmmut.asm):01030          cmpa #$0d
6C5B 1027002D         (        gmmut.asm):01031          beq co_carrage_return
6C5F 8160             (        gmmut.asm):01032          cmpa #$60
6C61 102C000B         (        gmmut.asm):01033          bge co_sub60
6C65 8140             (        gmmut.asm):01034          cmpa #$40
6C67 102C0007         (        gmmut.asm):01035          bge co_out
6C6B                  (        gmmut.asm):01036         co_add40
6C6B 8B40             (        gmmut.asm):01037          adda #$40
6C6D 160002           (        gmmut.asm):01038          bra co_out
6C70                  (        gmmut.asm):01039         co_sub60
6C70 8060             (        gmmut.asm):01040          suba #$60
6C72                  (        gmmut.asm):01041         co_out
6C72 3402             (        gmmut.asm):01042          pshs a
6C74 BE6004           (        gmmut.asm):01043          ldx text_address
6C77 FC6006           (        gmmut.asm):01044          ldd text_position
6C7A 308B             (        gmmut.asm):01045          leax d,x
6C7C C30001           (        gmmut.asm):01046          addd #1
6C7F FD6006           (        gmmut.asm):01047          std text_position
6C82 3502             (        gmmut.asm):01048          puls a
6C84 A784             (        gmmut.asm):01049          sta ,x
6C86 FC6006           (        gmmut.asm):01050          ldd text_position
6C89 16000B           (        gmmut.asm):01051          bra co_check_scroll
6C8C                  (        gmmut.asm):01052         co_carrage_return
6C8C FC6006           (        gmmut.asm):01053          ldd text_position
6C8F C30020           (        gmmut.asm):01054          addd #32
6C92 C4E0             (        gmmut.asm):01055          andb #%11100000
6C94 FD6006           (        gmmut.asm):01056          std text_position
6C97                  (        gmmut.asm):01057         co_check_scroll
6C97 10830200         (        gmmut.asm):01058          cmpd #512
6C9B 10270001         (        gmmut.asm):01059          beq co_scroll
6C9F 39               (        gmmut.asm):01060          rts
6CA0                  (        gmmut.asm):01061         co_scroll
6CA0 BE6004           (        gmmut.asm):01062          ldx text_address
6CA3                  (        gmmut.asm):01063         co_scroll_loop
6CA3 EC8820           (        gmmut.asm):01064          ldd 32,x
6CA6 ED81             (        gmmut.asm):01065          std ,x++
6CA8 8C05E0           (        gmmut.asm):01066          cmpx #$0600-32
6CAB 26F6             (        gmmut.asm):01067          bne co_scroll_loop
6CAD CC6060           (        gmmut.asm):01068          ldd #$6060
6CB0                  (        gmmut.asm):01069         co_clear_last_line_loop
6CB0 ED81             (        gmmut.asm):01070          std ,x++
6CB2 8C0600           (        gmmut.asm):01071          cmpx #$0600
6CB5 26F9             (        gmmut.asm):01072          bne co_clear_last_line_loop
6CB7 FC6006           (        gmmut.asm):01073          ldd text_position
6CBA 830020           (        gmmut.asm):01074          subd #32
6CBD FD6006           (        gmmut.asm):01075          std text_position
6CC0 39               (        gmmut.asm):01076          rts
                      (        gmmut.asm):01077         
6CC1                  (        gmmut.asm):01078         wait
                      (        gmmut.asm):01079         #
                      (        gmmut.asm):01080         # subroutine
                      (        gmmut.asm):01081         #
6CC1                  (        gmmut.asm):01082         wait_loop
6CC1 BD6CD2           (        gmmut.asm):01083          jsr keyin
6CC4 8100             (        gmmut.asm):01084          cmpa #0
6CC6 27F9             (        gmmut.asm):01085          beq wait_loop
6CC8 39               (        gmmut.asm):01086          rts
                      (        gmmut.asm):01087          
     FF00             (        gmmut.asm):01088         pia0 equ $ff00
6CC9                  (        gmmut.asm):01089         keybuf rmb 8 keyboard memory buffer
6CD1                  (        gmmut.asm):01090         casflg rmb 1 upper case/lower case flag: $ff=upper, 0=lower
                      (        gmmut.asm):01091         
                      (        gmmut.asm):01092         # la1c1 clr pia0+2 clear column strobe
                      (        gmmut.asm):01093         #  lda pia0 read key rows
                      (        gmmut.asm):01094         #  coma complement row data
                      (        gmmut.asm):01095         #  asla shift off joystick data
                      (        gmmut.asm):01096         #  beq la244 return if no keys or fire buttons down
                      (        gmmut.asm):01097         #
                      (        gmmut.asm):01098         # subroutine
                      (        gmmut.asm):01099         # this routine gets a keystroke from the keyboard if a key
                      (        gmmut.asm):01100         # is down. it returns zero true if there was no key down.
                      (        gmmut.asm):01101         #
6CD2 3454             (        gmmut.asm):01102         keyin pshs u,x,b save registers
6CD4 CEFF00           (        gmmut.asm):01103          ldu #pia0 point u to pia0
6CD7 8E6CC9           (        gmmut.asm):01104          ldx #keybuf point x to keyboard memory buffer
6CDA 4F               (        gmmut.asm):01105          clra * clear carry flag, set column counter (acca)
6CDB 4A               (        gmmut.asm):01106          deca * to $ff
6CDC 3412             (        gmmut.asm):01107          pshs x,a save column ctr & 2 blank (x reg) on stack
6CDE A742             (        gmmut.asm):01108          sta 2,u initialize column strobe to $ff
6CE0 6942             (        gmmut.asm):01109         la1d9 rol 2,u * rotate column strobe data left 1 bit, carry
6CE2 10240050         (        gmmut.asm):01110          bcc la220 * into bit 0 - branch if 8 shifts done
6CE6 6CE4             (        gmmut.asm):01111          inc ,s increment column counter
6CE8 170069           (        gmmut.asm):01112          bsr la23a read keyboard row data
6CEB A761             (        gmmut.asm):01113          sta 1,s temp store key data
6CED A884             (        gmmut.asm):01114          eora ,x set any bit where a key has moved
6CEF A484             (        gmmut.asm):01115          anda ,x acca=0 if no new key down, <70 if key was released
6CF1 E661             (        gmmut.asm):01116          ldb 1,s get new key data
6CF3 E780             (        gmmut.asm):01117          stb ,x+ store it in key memory
6CF5 4D               (        gmmut.asm):01118          tsta was a new key down?
6CF6 27E8             (        gmmut.asm):01119          beq la1d9 no-check another column
6CF8 E642             (        gmmut.asm):01120          ldb 2,u * get column strobe data and
6CFA E762             (        gmmut.asm):01121          stb 2,s * temp store it on the stack
                      (        gmmut.asm):01122         * this routine converts the key depression into a number
                      (        gmmut.asm):01123         * from 0-50 in accb corresponding to the key that was down
6CFC C6F8             (        gmmut.asm):01124          ldb #$f8 to make sure accb=0 after first addb #8
6CFE CB08             (        gmmut.asm):01125         la1f4 addb #$08 add 8 for each row of keyboard
6D00 44               (        gmmut.asm):01126          lsra acca has the row number of this key - add 8 for each row
6D01 24FB             (        gmmut.asm):01127          bcc la1f4 go on until a zero appears in the carry flag
6D03 EBE4             (        gmmut.asm):01128          addb ,s add in the column number
                      (        gmmut.asm):01129         * now convert the value in accb into ascii
6D05 10270058         (        gmmut.asm):01130          beq la245
6D09 C11A             (        gmmut.asm):01131          cmpb #26 the ‘at sign’ key was down was it a letter?
6D0B 10220054         (        gmmut.asm):01132          bhi la247 no
6D0F CA40             (        gmmut.asm):01133          orb #$40 yes, convert to upper case ascii
6D11 170034           (        gmmut.asm):01134          bsr la22e check for the shift key
6D14 BA6CD1           (        gmmut.asm):01135          ora casflg * ‘or’ in the case flag & branch if in upper
6D17 10260002         (        gmmut.asm):01136          bne la20c * case mode or shift key down
6D1B CA20             (        gmmut.asm):01137          orb #$20 convert to lower case
6D1D E7E4             (        gmmut.asm):01138         la20c stb ,s temp store ascii value
6D1F 8E045E           (        gmmut.asm):01139          ldx #$45e get keyboard debounce
6D22 17006D           (        gmmut.asm):01140          bsr la1ae
6D25 C6FF             (        gmmut.asm):01141          ldb #$ff set column strobe to all ones (no
6D27 170028           (        gmmut.asm):01142          bsr la238 strobe) and read keyboard
6D2A 4C               (        gmmut.asm):01143          inca = incr row data, acca now 0 if no joystick
6D2B 10260007         (        gmmut.asm):01144          bne la220 = button down. branch if joystick button down
6D2F E662             (        gmmut.asm):01145         la21a ldb 2,s get column strobe data
6D31 17001E           (        gmmut.asm):01146          bsr la238 read a key
6D34 A161             (        gmmut.asm):01147          cmpa 1,s is it the same key as before debounce?
6D36 3512             (        gmmut.asm):01148         la220 puls a,x remove temp slots from the stack and recover
                      (        gmmut.asm):01149         * the ascii value of the key
6D38 10260009         (        gmmut.asm):01150          bne la22b not the same key or joystick button
6D3C 8112             (        gmmut.asm):01151          cmpa #$12 is shift zero down?
6D3E 10260004         (        gmmut.asm):01152          bne la22c no
6D42 736CD1           (        gmmut.asm):01153          com casflg yes, toggle upper case/lower case flag
6D45 4F               (        gmmut.asm):01154         la22b clra set zero flag to indicate no new key down
6D46 35D4             (        gmmut.asm):01155         la22c puls b,x,u,pc restore registers
                      (        gmmut.asm):01156         
                      (        gmmut.asm):01157         * test for the shift key
6D48 867F             (        gmmut.asm):01158         la22e lda #$7f column strobe
6D4A A742             (        gmmut.asm):01159          sta 2,u store to pla
6D4C A6C4             (        gmmut.asm):01160          lda ,u read key data
6D4E 43               (        gmmut.asm):01161          coma *
6D4F 8440             (        gmmut.asm):01162          anda #$40 * set bit 6 if shift key down
6D51 39               (        gmmut.asm):01163          rts return
                      (        gmmut.asm):01164         
                      (        gmmut.asm):01165         * read the keyboard
6D52 E742             (        gmmut.asm):01166         la238 stb 2,u save new column strobe value
6D54 A6C4             (        gmmut.asm):01167         la23a lda ,u read pia0, port a to see if key is down
                      (        gmmut.asm):01168         * a bit will be zero if one is
6D56 8A80             (        gmmut.asm):01169          ora #$80 mask off the joystick comparator input
6D58 6D42             (        gmmut.asm):01170          tst $02,u are we strobing column 7?
6D5A 102B0002         (        gmmut.asm):01171          bmi la244 no
6D5E 8AC0             (        gmmut.asm):01172          ora #$c0 yes, force row 6 to be high - this will cause
                      (        gmmut.asm):01173         * the shift key to be ignored
6D60 39               (        gmmut.asm):01174         la244 rts return
                      (        gmmut.asm):01175         
6D61 C633             (        gmmut.asm):01176         la245 ldb #51 code for ‘at sign’
6D63 8E6D64           (        gmmut.asm):01177         la247 ldx #contab-$36 point x to control code table
6D66 C121             (        gmmut.asm):01178          cmpb #33 key number <33?
6D68 1025001A         (        gmmut.asm):01179          blo la264 yes (arrow keys, space bar, zero)
6D6C 8E6D46           (        gmmut.asm):01180          ldx #contab-$54 point x to middle of control table
6D6F C130             (        gmmut.asm):01181          cmpb #48 key number >48?
6D71 10240011         (        gmmut.asm):01182          bhs la264 yes (enter,clear,break,at sign)
6D75 8DD1             (        gmmut.asm):01183          bsr la22e check shift key (acca will contain status)
6D77 C12B             (        gmmut.asm):01184          cmpb #43 is key a number, colon or semicolon?
6D79 10230002         (        gmmut.asm):01185          bls la25d yes
6D7D 8840             (        gmmut.asm):01186          eora #$40 toggle bit 6 of acca which contains the shift data
                      (        gmmut.asm):01187         * only for slash,hyphen,period,comma
6D7F 4D               (        gmmut.asm):01188         la25d tsta shift key down?
6D80 269B             (        gmmut.asm):01189          bne la20c yes
6D82 CB10             (        gmmut.asm):01190          addb #$10 no, add in ascii offset correction
6D84 2097             (        gmmut.asm):01191          bra la20c go check for debounce
6D86 58               (        gmmut.asm):01192         la264 aslb mult accb by 2 - there are 2 entries in control
                      (        gmmut.asm):01193         * table for each key - one shifted, one not
6D87 8DBF             (        gmmut.asm):01194          bsr la22e check shift key
6D89 10270001         (        gmmut.asm):01195          beq la26a not down
6D8D 5C               (        gmmut.asm):01196          incb add one to get the shifted value
6D8E E685             (        gmmut.asm):01197         la26a ldb b,x get ascii code from control table
6D90 208B             (        gmmut.asm):01198          bra la20c go check debounce
6D92 7E6D95           (        gmmut.asm):01199         la1ae jmp la7d3 delay while x decrements to zero
                      (        gmmut.asm):01200         * delay while decrementing x to zero
6D95 301F             (        gmmut.asm):01201         la7d3 leax -1,x decrement x
6D97 26FC             (        gmmut.asm):01202          bne la7d3 branch if not zero
6D99 39               (        gmmut.asm):01203          rts
                      (        gmmut.asm):01204         *
                      (        gmmut.asm):01205         *
                      (        gmmut.asm):01206         * control table unshifted, shifted values
6D9A 5E5F             (        gmmut.asm):01207         contab fcb $5e,$5f up arrow
6D9C 0A5B             (        gmmut.asm):01208          fcb $0a,$5b down arrow
6D9E 0815             (        gmmut.asm):01209          fcb $08,$15 right arrow
6DA0 095D             (        gmmut.asm):01210          fcb $09,$5d left arrow
6DA2 2020             (        gmmut.asm):01211          fcb $20,$20 space bar
6DA4 3012             (        gmmut.asm):01212          fcb $30,$12 zero
6DA6 0D0D             (        gmmut.asm):01213          fcb $0d,$0d enter
6DA8 0C5C             (        gmmut.asm):01214          fcb $0c,$5c clear
6DAA 0303             (        gmmut.asm):01215          fcb $03,$03 break
6DAC 4013             (        gmmut.asm):01216          fcb $40,$13 at sign
                      (        gmmut.asm):01217         
                      (        gmmut.asm):01218         
                      (        gmmut.asm):01219         
                      (        gmmut.asm):01220         
6DAE                  (        gmmut.asm):01221         buffer rmb 256
                      (        gmmut.asm):01222         # buffer2 rmb 256
6EAE                  (        gmmut.asm):01223         bitmap_font
6EAE FFFFFFFFFFFFFFFF (        gmmut.asm):01224          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ( )
6EB6 E7C3C3E7E7FFE7FF (        gmmut.asm):01225          fcb $e7,$c3,$c3,$e7,$e7,$ff,$e7,$ff (!)
6EBE 9393FFFFFFFFFFFF (        gmmut.asm):01226          fcb $93,$93,$ff,$ff,$ff,$ff,$ff,$ff (")
6EC6 93930193019393FF (        gmmut.asm):01227          fcb $93,$93,$01,$93,$01,$93,$93,$ff (#)
6ECE CF833F87F307CFFF (        gmmut.asm):01228          fcb $cf,$83,$3f,$87,$f3,$07,$cf,$ff ($)
6ED6 FF3933E7CF9939FF (        gmmut.asm):01229          fcb $ff,$39,$33,$e7,$cf,$99,$39,$ff (%)
6EDE C793C789233389FF (        gmmut.asm):01230          fcb $c7,$93,$c7,$89,$23,$33,$89,$ff (&)
6EE6 9F9F3FFFFFFFFFFF (        gmmut.asm):01231          fcb $9f,$9f,$3f,$ff,$ff,$ff,$ff,$ff (')
6EEE E7CF9F9F9FCFE7FF (        gmmut.asm):01232          fcb $e7,$cf,$9f,$9f,$9f,$cf,$e7,$ff (()
6EF6 9FCFE7E7E7CF9FFF (        gmmut.asm):01233          fcb $9f,$cf,$e7,$e7,$e7,$cf,$9f,$ff ())
6EFE FF99C300C399FFFF (        gmmut.asm):01234          fcb $ff,$99,$c3,$00,$c3,$99,$ff,$ff (*)
6F06 FFCFCF03CFCFFFFF (        gmmut.asm):01235          fcb $ff,$cf,$cf,$03,$cf,$cf,$ff,$ff (+)
6F0E FFFFFFFFFFCFCF9F (        gmmut.asm):01236          fcb $ff,$ff,$ff,$ff,$ff,$cf,$cf,$9f (,)
6F16 FFFFFF03FFFFFFFF (        gmmut.asm):01237          fcb $ff,$ff,$ff,$03,$ff,$ff,$ff,$ff (-)
6F1E FFFFFFFFFFCFCFFF (        gmmut.asm):01238          fcb $ff,$ff,$ff,$ff,$ff,$cf,$cf,$ff (.)
6F26 F9F3E7CF9F3F7FFF (        gmmut.asm):01239          fcb $f9,$f3,$e7,$cf,$9f,$3f,$7f,$ff (/)
6F2E 83393121091983FF (        gmmut.asm):01240          fcb $83,$39,$31,$21,$09,$19,$83,$ff (0)
6F36 CF8FCFCFCFCF03FF (        gmmut.asm):01241          fcb $cf,$8f,$cf,$cf,$cf,$cf,$03,$ff (1)
6F3E 8733F3C79F3303FF (        gmmut.asm):01242          fcb $87,$33,$f3,$c7,$9f,$33,$03,$ff (2)
6F46 8733F3C7F33387FF (        gmmut.asm):01243          fcb $87,$33,$f3,$c7,$f3,$33,$87,$ff (3)
6F4E E3C3933301F3E1FF (        gmmut.asm):01244          fcb $e3,$c3,$93,$33,$01,$f3,$e1,$ff (4)
6F56 033F07F3F33387FF (        gmmut.asm):01245          fcb $03,$3f,$07,$f3,$f3,$33,$87,$ff (5)
6F5E C79F3F07333387FF (        gmmut.asm):01246          fcb $c7,$9f,$3f,$07,$33,$33,$87,$ff (6)
6F66 0333F3E7CFCFCFFF (        gmmut.asm):01247          fcb $03,$33,$f3,$e7,$cf,$cf,$cf,$ff (7)
6F6E 87333387333387FF (        gmmut.asm):01248          fcb $87,$33,$33,$87,$33,$33,$87,$ff (8)
6F76 87333383F3E78FFF (        gmmut.asm):01249          fcb $87,$33,$33,$83,$f3,$e7,$8f,$ff (9)
6F7E FFCFCFFFFFCFCFFF (        gmmut.asm):01250          fcb $ff,$cf,$cf,$ff,$ff,$cf,$cf,$ff (:)
6F86 FFCFCFFFFFCFCF9F (        gmmut.asm):01251          fcb $ff,$cf,$cf,$ff,$ff,$cf,$cf,$9f (;)
6F8E E7CF9F3F9FCFE7FF (        gmmut.asm):01252          fcb $e7,$cf,$9f,$3f,$9f,$cf,$e7,$ff (<)
6F96 FFFF03FFFF03FFFF (        gmmut.asm):01253          fcb $ff,$ff,$03,$ff,$ff,$03,$ff,$ff (=)
6F9E 9FCFE7F3E7CF9FFF (        gmmut.asm):01254          fcb $9f,$cf,$e7,$f3,$e7,$cf,$9f,$ff (>)
6FA6 8733F3E7CFFFCFFF (        gmmut.asm):01255          fcb $87,$33,$f3,$e7,$cf,$ff,$cf,$ff (?)
6FAE 83392121213F87FF (        gmmut.asm):01256          fcb $83,$39,$21,$21,$21,$3f,$87,$ff (@)
6FB6 CF873333033333FF (        gmmut.asm):01257          fcb $cf,$87,$33,$33,$03,$33,$33,$ff (A)
6FBE 03999983999903FF (        gmmut.asm):01258          fcb $03,$99,$99,$83,$99,$99,$03,$ff (B)
6FC6 C3993F3F3F99C3FF (        gmmut.asm):01259          fcb $c3,$99,$3f,$3f,$3f,$99,$c3,$ff (C)
6FCE 07939999999307FF (        gmmut.asm):01260          fcb $07,$93,$99,$99,$99,$93,$07,$ff (D)
6FD6 019D9787979D01FF (        gmmut.asm):01261          fcb $01,$9d,$97,$87,$97,$9d,$01,$ff (E)
6FDE 019D9787979F0FFF (        gmmut.asm):01262          fcb $01,$9d,$97,$87,$97,$9f,$0f,$ff (F)
6FE6 C3993F3F3199C1FF (        gmmut.asm):01263          fcb $c3,$99,$3f,$3f,$31,$99,$c1,$ff (G)
6FEE 33333303333333FF (        gmmut.asm):01264          fcb $33,$33,$33,$03,$33,$33,$33,$ff (H)
6FF6 87CFCFCFCFCF87FF (        gmmut.asm):01265          fcb $87,$cf,$cf,$cf,$cf,$cf,$87,$ff (I)
6FFE E1F3F3F3333387FF (        gmmut.asm):01266          fcb $e1,$f3,$f3,$f3,$33,$33,$87,$ff (J)
7006 19999387939919FF (        gmmut.asm):01267          fcb $19,$99,$93,$87,$93,$99,$19,$ff (K)
700E 0F9F9F9F9D9901FF (        gmmut.asm):01268          fcb $0f,$9f,$9f,$9f,$9d,$99,$01,$ff (L)
7016 39110101293939FF (        gmmut.asm):01269          fcb $39,$11,$01,$01,$29,$39,$39,$ff (M)
701E 39190921313939FF (        gmmut.asm):01270          fcb $39,$19,$09,$21,$31,$39,$39,$ff (N)
7026 C79339393993C7FF (        gmmut.asm):01271          fcb $c7,$93,$39,$39,$39,$93,$c7,$ff (O)
702E 039999839F9F0FFF (        gmmut.asm):01272          fcb $03,$99,$99,$83,$9f,$9f,$0f,$ff (P)
7036 873333332387E3FF (        gmmut.asm):01273          fcb $87,$33,$33,$33,$23,$87,$e3,$ff (Q)
703E 03999983939919FF (        gmmut.asm):01274          fcb $03,$99,$99,$83,$93,$99,$19,$ff (R)
7046 87331F8FE33387FF (        gmmut.asm):01275          fcb $87,$33,$1f,$8f,$e3,$33,$87,$ff (S)
704E 034BCFCFCFCF87FF (        gmmut.asm):01276          fcb $03,$4b,$cf,$cf,$cf,$cf,$87,$ff (T)
7056 33333333333303FF (        gmmut.asm):01277          fcb $33,$33,$33,$33,$33,$33,$03,$ff (U)
705E 333333333387CFFF (        gmmut.asm):01278          fcb $33,$33,$33,$33,$33,$87,$cf,$ff (V)
7066 39393929011139FF (        gmmut.asm):01279          fcb $39,$39,$39,$29,$01,$11,$39,$ff (W)
706E 393993C7C79339FF (        gmmut.asm):01280          fcb $39,$39,$93,$c7,$c7,$93,$39,$ff (X)
7076 33333387CFCF87FF (        gmmut.asm):01281          fcb $33,$33,$33,$87,$cf,$cf,$87,$ff (Y)
707E 013973E7CD9901FF (        gmmut.asm):01282          fcb $01,$39,$73,$e7,$cd,$99,$01,$ff (Z)
7086 879F9F9F9F9F87FF (        gmmut.asm):01283          fcb $87,$9f,$9f,$9f,$9f,$9f,$87,$ff ([)
708E 3F9FCFE7F3F9FDFF (        gmmut.asm):01284          fcb $3f,$9f,$cf,$e7,$f3,$f9,$fd,$ff (\)
7096 87E7E7E7E7E787FF (        gmmut.asm):01285          fcb $87,$e7,$e7,$e7,$e7,$e7,$87,$ff (])
709E EFC79339FFFFFFFF (        gmmut.asm):01286          fcb $ef,$c7,$93,$39,$ff,$ff,$ff,$ff (^)
70A6 FFFFFFFFFFFFFF00 (        gmmut.asm):01287          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00 (_)
70AE CFCFE7FFFFFFFFFF (        gmmut.asm):01288          fcb $cf,$cf,$e7,$ff,$ff,$ff,$ff,$ff (`)
70B6 FFFF87F3833389FF (        gmmut.asm):01289          fcb $ff,$ff,$87,$f3,$83,$33,$89,$ff (a)
70BE 1F9F9F83999923FF (        gmmut.asm):01290          fcb $1f,$9f,$9f,$83,$99,$99,$23,$ff (b)
70C6 FFFF87333F3387FF (        gmmut.asm):01291          fcb $ff,$ff,$87,$33,$3f,$33,$87,$ff (c)
70CE E3F3F383333389FF (        gmmut.asm):01292          fcb $e3,$f3,$f3,$83,$33,$33,$89,$ff (d)
70D6 FFFF8733033F87FF (        gmmut.asm):01293          fcb $ff,$ff,$87,$33,$03,$3f,$87,$ff (e)
70DE C7939F0F9F9F0FFF (        gmmut.asm):01294          fcb $c7,$93,$9f,$0f,$9f,$9f,$0f,$ff (f)
70E6 FFFF89333383F307 (        gmmut.asm):01295          fcb $ff,$ff,$89,$33,$33,$83,$f3,$07 (g)
70EE 1F9F9389999919FF (        gmmut.asm):01296          fcb $1f,$9f,$93,$89,$99,$99,$19,$ff (h)
70F6 CFFF8FCFCFCF87FF (        gmmut.asm):01297          fcb $cf,$ff,$8f,$cf,$cf,$cf,$87,$ff (i)
70FE F3FFF3F3F3333387 (        gmmut.asm):01298          fcb $f3,$ff,$f3,$f3,$f3,$33,$33,$87 (j)
7106 1F9F9993879319FF (        gmmut.asm):01299          fcb $1f,$9f,$99,$93,$87,$93,$19,$ff (k)
710E 8FCFCFCFCFCF87FF (        gmmut.asm):01300          fcb $8f,$cf,$cf,$cf,$cf,$cf,$87,$ff (l)
7116 FFFF3301012939FF (        gmmut.asm):01301          fcb $ff,$ff,$33,$01,$01,$29,$39,$ff (m)
711E FFFF0733333333FF (        gmmut.asm):01302          fcb $ff,$ff,$07,$33,$33,$33,$33,$ff (n)
7126 FFFF8733333387FF (        gmmut.asm):01303          fcb $ff,$ff,$87,$33,$33,$33,$87,$ff (o)
712E FFFF239999839F0F (        gmmut.asm):01304          fcb $ff,$ff,$23,$99,$99,$83,$9f,$0f (p)
7136 FFFF89333383F3E1 (        gmmut.asm):01305          fcb $ff,$ff,$89,$33,$33,$83,$f3,$e1 (q)
713E FFFF2389999F0FFF (        gmmut.asm):01306          fcb $ff,$ff,$23,$89,$99,$9f,$0f,$ff (r)
7146 FFFF833F87F307FF (        gmmut.asm):01307          fcb $ff,$ff,$83,$3f,$87,$f3,$07,$ff (s)
714E EFCF83CFCFCBE7FF (        gmmut.asm):01308          fcb $ef,$cf,$83,$cf,$cf,$cb,$e7,$ff (t)
7156 FFFF3333333389FF (        gmmut.asm):01309          fcb $ff,$ff,$33,$33,$33,$33,$89,$ff (u)
715E FFFF33333387CFFF (        gmmut.asm):01310          fcb $ff,$ff,$33,$33,$33,$87,$cf,$ff (v)
7166 FFFF3929010193FF (        gmmut.asm):01311          fcb $ff,$ff,$39,$29,$01,$01,$93,$ff (w)
716E FFFF3993C79339FF (        gmmut.asm):01312          fcb $ff,$ff,$39,$93,$c7,$93,$39,$ff (x)
7176 FFFF33333383F307 (        gmmut.asm):01313          fcb $ff,$ff,$33,$33,$33,$83,$f3,$07 (y)
717E FFFF0367CF9B03FF (        gmmut.asm):01314          fcb $ff,$ff,$03,$67,$cf,$9b,$03,$ff (z)
7186 E3CFCF1FCFCFE3FF (        gmmut.asm):01315          fcb $e3,$cf,$cf,$1f,$cf,$cf,$e3,$ff ({)
718E E7E7E7FFE7E7E7FF (        gmmut.asm):01316          fcb $e7,$e7,$e7,$ff,$e7,$e7,$e7,$ff (|)
7196 1FCFCFE3CFCF1FFF (        gmmut.asm):01317          fcb $1f,$cf,$cf,$e3,$cf,$cf,$1f,$ff (})
719E 8923FFFFFFFFFFFF (        gmmut.asm):01318          fcb $89,$23,$ff,$ff,$ff,$ff,$ff,$ff (~)
71A6 FFFFFFFFFFFFFFFF (        gmmut.asm):01319          fcb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ( )
                      (        gmmut.asm):01320          
                      (        gmmut.asm):01321          IFGT *-$7fff
                      (        gmmut.asm):01322          ERROR "Program to large"
                      (        gmmut.asm):01323          ENDC
                      (        gmmut.asm):01324         
                      (        gmmut.asm):01325          end start
